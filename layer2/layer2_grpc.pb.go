// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: layer2/layer2.proto

package layer2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Layer2Client is the client API for Layer2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Layer2Client interface {
	ClearNeighborDiscovery(ctx context.Context, in *ClearNeighborDiscoveryRequest, opts ...grpc.CallOption) (*ClearNeighborDiscoveryResponse, error)
	ClearSpanningTree(ctx context.Context, in *ClearSpanningTreeRequest, opts ...grpc.CallOption) (*ClearSpanningTreeResponse, error)
	PerformBERT(ctx context.Context, in *PerformBERTRequest, opts ...grpc.CallOption) (Layer2_PerformBERTClient, error)
	ClearLLDPInterface(ctx context.Context, in *ClearLLDPInterfaceRequest, opts ...grpc.CallOption) (*ClearLLDPInterfaceResponse, error)
	SendWakeOnLAN(ctx context.Context, in *SendWakeOnLANRequest, opts ...grpc.CallOption) (*SendWakeOnLANResponse, error)
}

type layer2Client struct {
	cc grpc.ClientConnInterface
}

func NewLayer2Client(cc grpc.ClientConnInterface) Layer2Client {
	return &layer2Client{cc}
}

func (c *layer2Client) ClearNeighborDiscovery(ctx context.Context, in *ClearNeighborDiscoveryRequest, opts ...grpc.CallOption) (*ClearNeighborDiscoveryResponse, error) {
	out := new(ClearNeighborDiscoveryResponse)
	err := c.cc.Invoke(ctx, "/gnoi.layer2.Layer2/ClearNeighborDiscovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layer2Client) ClearSpanningTree(ctx context.Context, in *ClearSpanningTreeRequest, opts ...grpc.CallOption) (*ClearSpanningTreeResponse, error) {
	out := new(ClearSpanningTreeResponse)
	err := c.cc.Invoke(ctx, "/gnoi.layer2.Layer2/ClearSpanningTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layer2Client) PerformBERT(ctx context.Context, in *PerformBERTRequest, opts ...grpc.CallOption) (Layer2_PerformBERTClient, error) {
	stream, err := c.cc.NewStream(ctx, &Layer2_ServiceDesc.Streams[0], "/gnoi.layer2.Layer2/PerformBERT", opts...)
	if err != nil {
		return nil, err
	}
	x := &layer2PerformBERTClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Layer2_PerformBERTClient interface {
	Recv() (*PerformBERTResponse, error)
	grpc.ClientStream
}

type layer2PerformBERTClient struct {
	grpc.ClientStream
}

func (x *layer2PerformBERTClient) Recv() (*PerformBERTResponse, error) {
	m := new(PerformBERTResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *layer2Client) ClearLLDPInterface(ctx context.Context, in *ClearLLDPInterfaceRequest, opts ...grpc.CallOption) (*ClearLLDPInterfaceResponse, error) {
	out := new(ClearLLDPInterfaceResponse)
	err := c.cc.Invoke(ctx, "/gnoi.layer2.Layer2/ClearLLDPInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layer2Client) SendWakeOnLAN(ctx context.Context, in *SendWakeOnLANRequest, opts ...grpc.CallOption) (*SendWakeOnLANResponse, error) {
	out := new(SendWakeOnLANResponse)
	err := c.cc.Invoke(ctx, "/gnoi.layer2.Layer2/SendWakeOnLAN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Layer2Server is the server API for Layer2 service.
// All implementations must embed UnimplementedLayer2Server
// for forward compatibility
type Layer2Server interface {
	ClearNeighborDiscovery(context.Context, *ClearNeighborDiscoveryRequest) (*ClearNeighborDiscoveryResponse, error)
	ClearSpanningTree(context.Context, *ClearSpanningTreeRequest) (*ClearSpanningTreeResponse, error)
	PerformBERT(*PerformBERTRequest, Layer2_PerformBERTServer) error
	ClearLLDPInterface(context.Context, *ClearLLDPInterfaceRequest) (*ClearLLDPInterfaceResponse, error)
	SendWakeOnLAN(context.Context, *SendWakeOnLANRequest) (*SendWakeOnLANResponse, error)
	mustEmbedUnimplementedLayer2Server()
}

// UnimplementedLayer2Server must be embedded to have forward compatible implementations.
type UnimplementedLayer2Server struct {
}

func (UnimplementedLayer2Server) ClearNeighborDiscovery(context.Context, *ClearNeighborDiscoveryRequest) (*ClearNeighborDiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearNeighborDiscovery not implemented")
}
func (UnimplementedLayer2Server) ClearSpanningTree(context.Context, *ClearSpanningTreeRequest) (*ClearSpanningTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSpanningTree not implemented")
}
func (UnimplementedLayer2Server) PerformBERT(*PerformBERTRequest, Layer2_PerformBERTServer) error {
	return status.Errorf(codes.Unimplemented, "method PerformBERT not implemented")
}
func (UnimplementedLayer2Server) ClearLLDPInterface(context.Context, *ClearLLDPInterfaceRequest) (*ClearLLDPInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLLDPInterface not implemented")
}
func (UnimplementedLayer2Server) SendWakeOnLAN(context.Context, *SendWakeOnLANRequest) (*SendWakeOnLANResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWakeOnLAN not implemented")
}
func (UnimplementedLayer2Server) mustEmbedUnimplementedLayer2Server() {}

// UnsafeLayer2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Layer2Server will
// result in compilation errors.
type UnsafeLayer2Server interface {
	mustEmbedUnimplementedLayer2Server()
}

func RegisterLayer2Server(s grpc.ServiceRegistrar, srv Layer2Server) {
	s.RegisterService(&Layer2_ServiceDesc, srv)
}

func _Layer2_ClearNeighborDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearNeighborDiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Layer2Server).ClearNeighborDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.layer2.Layer2/ClearNeighborDiscovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Layer2Server).ClearNeighborDiscovery(ctx, req.(*ClearNeighborDiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layer2_ClearSpanningTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearSpanningTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Layer2Server).ClearSpanningTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.layer2.Layer2/ClearSpanningTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Layer2Server).ClearSpanningTree(ctx, req.(*ClearSpanningTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layer2_PerformBERT_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PerformBERTRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Layer2Server).PerformBERT(m, &layer2PerformBERTServer{stream})
}

type Layer2_PerformBERTServer interface {
	Send(*PerformBERTResponse) error
	grpc.ServerStream
}

type layer2PerformBERTServer struct {
	grpc.ServerStream
}

func (x *layer2PerformBERTServer) Send(m *PerformBERTResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Layer2_ClearLLDPInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLLDPInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Layer2Server).ClearLLDPInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.layer2.Layer2/ClearLLDPInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Layer2Server).ClearLLDPInterface(ctx, req.(*ClearLLDPInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layer2_SendWakeOnLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWakeOnLANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Layer2Server).SendWakeOnLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.layer2.Layer2/SendWakeOnLAN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Layer2Server).SendWakeOnLAN(ctx, req.(*SendWakeOnLANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Layer2_ServiceDesc is the grpc.ServiceDesc for Layer2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Layer2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.layer2.Layer2",
	HandlerType: (*Layer2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearNeighborDiscovery",
			Handler:    _Layer2_ClearNeighborDiscovery_Handler,
		},
		{
			MethodName: "ClearSpanningTree",
			Handler:    _Layer2_ClearSpanningTree_Handler,
		},
		{
			MethodName: "ClearLLDPInterface",
			Handler:    _Layer2_ClearLLDPInterface_Handler,
		},
		{
			MethodName: "SendWakeOnLAN",
			Handler:    _Layer2_SendWakeOnLAN_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PerformBERT",
			Handler:       _Layer2_PerformBERT_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "layer2/layer2.proto",
}
