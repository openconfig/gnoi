//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package gnoi.bgp;

import "github.com/openconfig/gnoi/types/types.proto";

option go_package = "github.com/openconfig/gnoi/bgp";

// The current semantic version of the gNOI BGP service.
option (types.gnoi_version) = "0.1.0";

service BGP {
  // ClearBGPNeighbor clears a BGP session.
  rpc ClearBGPNeighbor(ClearBGPNeighborRequest)
    returns (ClearBGPNeighborResponse) {}

}

message ClearBGPNeighborRequest {
  string address = 1;  // IPv4 or IPv6 BGP neighbor address to clear.
  // Routing instance containing the neighbor. Defaults to the global routing
  // table.
  string routing_instance = 2;
  enum Mode {
    SOFT = 0;         // Send route-refresh and reapply policy.
    SOFTIN = 1;       // Re-apply inbound policy on stored Adj-RIB-In.
    HARD = 2;         // Teardown and restart TCP connection.
  }
  Mode mode = 3;       // Which mode to use for the clear operation.
}

message ClearBGPNeighborResponse {
}
