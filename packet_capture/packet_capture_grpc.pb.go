// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: github.com/openconfig/gnoi/packet_capture/packet_capture.proto

package pcap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PacketCapture_Pcap_FullMethodName = "/gnoi.pcap.PacketCapture/Pcap"
)

// PacketCaptureClient is the client API for PacketCapture service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketCaptureClient interface {
	Pcap(ctx context.Context, in *PcapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PcapResponse], error)
}

type packetCaptureClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketCaptureClient(cc grpc.ClientConnInterface) PacketCaptureClient {
	return &packetCaptureClient{cc}
}

func (c *packetCaptureClient) Pcap(ctx context.Context, in *PcapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PcapResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PacketCapture_ServiceDesc.Streams[0], PacketCapture_Pcap_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PcapRequest, PcapResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PacketCapture_PcapClient = grpc.ServerStreamingClient[PcapResponse]

// PacketCaptureServer is the server API for PacketCapture service.
// All implementations should embed UnimplementedPacketCaptureServer
// for forward compatibility.
type PacketCaptureServer interface {
	Pcap(*PcapRequest, grpc.ServerStreamingServer[PcapResponse]) error
}

// UnimplementedPacketCaptureServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPacketCaptureServer struct{}

func (UnimplementedPacketCaptureServer) Pcap(*PcapRequest, grpc.ServerStreamingServer[PcapResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Pcap not implemented")
}
func (UnimplementedPacketCaptureServer) testEmbeddedByValue() {}

// UnsafePacketCaptureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketCaptureServer will
// result in compilation errors.
type UnsafePacketCaptureServer interface {
	mustEmbedUnimplementedPacketCaptureServer()
}

func RegisterPacketCaptureServer(s grpc.ServiceRegistrar, srv PacketCaptureServer) {
	// If the following call pancis, it indicates UnimplementedPacketCaptureServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PacketCapture_ServiceDesc, srv)
}

func _PacketCapture_Pcap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PcapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PacketCaptureServer).Pcap(m, &grpc.GenericServerStream[PcapRequest, PcapResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PacketCapture_PcapServer = grpc.ServerStreamingServer[PcapResponse]

// PacketCapture_ServiceDesc is the grpc.ServiceDesc for PacketCapture service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketCapture_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.pcap.PacketCapture",
	HandlerType: (*PacketCaptureServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pcap",
			Handler:       _PacketCapture_Pcap_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnoi/packet_capture/packet_capture.proto",
}
