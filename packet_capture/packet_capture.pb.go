// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: github.com/openconfig/gnoi/packet_capture/packet_capture.proto

package pcap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperatingBand int32

const (
	OperatingBand_BAND_2G  OperatingBand = 0
	OperatingBand_BAND_5G  OperatingBand = 1
	OperatingBand_BAND_6G  OperatingBand = 2
	OperatingBand_BAND_ALL OperatingBand = 3
)

// Enum value maps for OperatingBand.
var (
	OperatingBand_name = map[int32]string{
		0: "BAND_2G",
		1: "BAND_5G",
		2: "BAND_6G",
		3: "BAND_ALL",
	}
	OperatingBand_value = map[string]int32{
		"BAND_2G":  0,
		"BAND_5G":  1,
		"BAND_6G":  2,
		"BAND_ALL": 3,
	}
)

func (x OperatingBand) Enum() *OperatingBand {
	p := new(OperatingBand)
	*p = x
	return p
}

func (x OperatingBand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingBand) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes[0].Descriptor()
}

func (OperatingBand) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes[0]
}

func (x OperatingBand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingBand.Descriptor instead.
func (OperatingBand) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{0}
}

type Protocol int32

const (
	Protocol_TCP Protocol = 0
	Protocol_UDP Protocol = 1
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
	}
	Protocol_value = map[string]int32{
		"TCP": 0,
		"UDP": 1,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes[1].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes[1]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{1}
}

type Direction int32

const (
	Direction_RX   Direction = 0
	Direction_TX   Direction = 1
	Direction_BOTH Direction = 2
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "RX",
		1: "TX",
		2: "BOTH",
	}
	Direction_value = map[string]int32{
		"RX":   0,
		"TX":   1,
		"BOTH": 2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes[2].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes[2]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{2}
}

type ChannelWidth int32

const (
	ChannelWidth_WIDTH_20MHZ  ChannelWidth = 0
	ChannelWidth_WIDTH_40MHZ  ChannelWidth = 1
	ChannelWidth_WIDTH_80MHZ  ChannelWidth = 2
	ChannelWidth_WIDTH_160MHZ ChannelWidth = 3
)

// Enum value maps for ChannelWidth.
var (
	ChannelWidth_name = map[int32]string{
		0: "WIDTH_20MHZ",
		1: "WIDTH_40MHZ",
		2: "WIDTH_80MHZ",
		3: "WIDTH_160MHZ",
	}
	ChannelWidth_value = map[string]int32{
		"WIDTH_20MHZ":  0,
		"WIDTH_40MHZ":  1,
		"WIDTH_80MHZ":  2,
		"WIDTH_160MHZ": 3,
	}
)

func (x ChannelWidth) Enum() *ChannelWidth {
	p := new(ChannelWidth)
	*p = x
	return p
}

func (x ChannelWidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelWidth) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes[3].Descriptor()
}

func (ChannelWidth) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes[3]
}

func (x ChannelWidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelWidth.Descriptor instead.
func (ChannelWidth) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{3}
}

type AccessCaptureType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OperatingBand []OperatingBand        `protobuf:"varint,1,rep,packed,name=operating_band,json=operatingBand,proto3,enum=gnoi.pcap.OperatingBand" json:"operating_band,omitempty"`
	// Types that are valid to be assigned to FilterType:
	//
	//	*AccessCaptureType_Ssid
	//	*AccessCaptureType_Mac
	FilterType      isAccessCaptureType_FilterType `protobuf_oneof:"filter_type"`
	PromiscuousMode bool                           `protobuf:"varint,4,opt,name=promiscuous_mode,json=promiscuousMode,proto3" json:"promiscuous_mode,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AccessCaptureType) Reset() {
	*x = AccessCaptureType{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessCaptureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCaptureType) ProtoMessage() {}

func (x *AccessCaptureType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCaptureType.ProtoReflect.Descriptor instead.
func (*AccessCaptureType) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{0}
}

func (x *AccessCaptureType) GetOperatingBand() []OperatingBand {
	if x != nil {
		return x.OperatingBand
	}
	return nil
}

func (x *AccessCaptureType) GetFilterType() isAccessCaptureType_FilterType {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *AccessCaptureType) GetSsid() string {
	if x != nil {
		if x, ok := x.FilterType.(*AccessCaptureType_Ssid); ok {
			return x.Ssid
		}
	}
	return ""
}

func (x *AccessCaptureType) GetMac() string {
	if x != nil {
		if x, ok := x.FilterType.(*AccessCaptureType_Mac); ok {
			return x.Mac
		}
	}
	return ""
}

func (x *AccessCaptureType) GetPromiscuousMode() bool {
	if x != nil {
		return x.PromiscuousMode
	}
	return false
}

type isAccessCaptureType_FilterType interface {
	isAccessCaptureType_FilterType()
}

type AccessCaptureType_Ssid struct {
	Ssid string `protobuf:"bytes,2,opt,name=ssid,proto3,oneof"`
}

type AccessCaptureType_Mac struct {
	Mac string `protobuf:"bytes,3,opt,name=mac,proto3,oneof"`
}

func (*AccessCaptureType_Ssid) isAccessCaptureType_FilterType() {}

func (*AccessCaptureType_Mac) isAccessCaptureType_FilterType() {}

type ChannelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       string                 `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	ChannelWidth  ChannelWidth           `protobuf:"varint,2,opt,name=channel_width,json=channelWidth,proto3,enum=gnoi.pcap.ChannelWidth" json:"channel_width,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelInfo) Reset() {
	*x = ChannelInfo{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfo) ProtoMessage() {}

func (x *ChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelInfo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *ChannelInfo) GetChannelWidth() ChannelWidth {
	if x != nil {
		return x.ChannelWidth
	}
	return ChannelWidth_WIDTH_20MHZ
}

type BandChannelCombo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OperatingBand OperatingBand          `protobuf:"varint,1,opt,name=operating_band,json=operatingBand,proto3,enum=gnoi.pcap.OperatingBand" json:"operating_band,omitempty"`
	ChannelInfo   []*ChannelInfo         `protobuf:"bytes,2,rep,name=channel_info,json=channelInfo,proto3" json:"channel_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BandChannelCombo) Reset() {
	*x = BandChannelCombo{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BandChannelCombo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandChannelCombo) ProtoMessage() {}

func (x *BandChannelCombo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandChannelCombo.ProtoReflect.Descriptor instead.
func (*BandChannelCombo) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{2}
}

func (x *BandChannelCombo) GetOperatingBand() OperatingBand {
	if x != nil {
		return x.OperatingBand
	}
	return OperatingBand_BAND_2G
}

func (x *BandChannelCombo) GetChannelInfo() []*ChannelInfo {
	if x != nil {
		return x.ChannelInfo
	}
	return nil
}

type ScanCaptureType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Combo         []*BandChannelCombo    `protobuf:"bytes,1,rep,name=combo,proto3" json:"combo,omitempty"`
	DwellTime     uint64                 `protobuf:"varint,2,opt,name=dwell_time,json=dwellTime,proto3" json:"dwell_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScanCaptureType) Reset() {
	*x = ScanCaptureType{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanCaptureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanCaptureType) ProtoMessage() {}

func (x *ScanCaptureType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanCaptureType.ProtoReflect.Descriptor instead.
func (*ScanCaptureType) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{3}
}

func (x *ScanCaptureType) GetCombo() []*BandChannelCombo {
	if x != nil {
		return x.Combo
	}
	return nil
}

func (x *ScanCaptureType) GetDwellTime() uint64 {
	if x != nil {
		return x.DwellTime
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterName    string                 `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	SrcNet        string                 `protobuf:"bytes,2,opt,name=src_net,json=srcNet,proto3" json:"src_net,omitempty"`
	DestNet       string                 `protobuf:"bytes,3,opt,name=dest_net,json=destNet,proto3" json:"dest_net,omitempty"`
	Protocol      []Protocol             `protobuf:"varint,4,rep,packed,name=protocol,proto3,enum=gnoi.pcap.Protocol" json:"protocol,omitempty"`
	Port          []uint32               `protobuf:"varint,5,rep,packed,name=port,proto3" json:"port,omitempty"`
	Vlan          []uint32               `protobuf:"varint,6,rep,packed,name=vlan,proto3" json:"vlan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filter) Reset() {
	*x = Filter{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{4}
}

func (x *Filter) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

func (x *Filter) GetSrcNet() string {
	if x != nil {
		return x.SrcNet
	}
	return ""
}

func (x *Filter) GetDestNet() string {
	if x != nil {
		return x.DestNet
	}
	return ""
}

func (x *Filter) GetProtocol() []Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Filter) GetPort() []uint32 {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Filter) GetVlan() []uint32 {
	if x != nil {
		return x.Vlan
	}
	return nil
}

type WiredRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Ifname    string                 `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Direction Direction              `protobuf:"varint,2,opt,name=direction,proto3,enum=gnoi.pcap.Direction" json:"direction,omitempty"`
	// Types that are valid to be assigned to FilterType:
	//
	//	*WiredRequest_TcpdumpExpression
	//	*WiredRequest_Filter
	FilterType    isWiredRequest_FilterType `protobuf_oneof:"filter_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WiredRequest) Reset() {
	*x = WiredRequest{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WiredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiredRequest) ProtoMessage() {}

func (x *WiredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiredRequest.ProtoReflect.Descriptor instead.
func (*WiredRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{5}
}

func (x *WiredRequest) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *WiredRequest) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_RX
}

func (x *WiredRequest) GetFilterType() isWiredRequest_FilterType {
	if x != nil {
		return x.FilterType
	}
	return nil
}

func (x *WiredRequest) GetTcpdumpExpression() string {
	if x != nil {
		if x, ok := x.FilterType.(*WiredRequest_TcpdumpExpression); ok {
			return x.TcpdumpExpression
		}
	}
	return ""
}

func (x *WiredRequest) GetFilter() *Filter {
	if x != nil {
		if x, ok := x.FilterType.(*WiredRequest_Filter); ok {
			return x.Filter
		}
	}
	return nil
}

type isWiredRequest_FilterType interface {
	isWiredRequest_FilterType()
}

type WiredRequest_TcpdumpExpression struct {
	TcpdumpExpression string `protobuf:"bytes,3,opt,name=tcpdump_expression,json=tcpdumpExpression,proto3,oneof"`
}

type WiredRequest_Filter struct {
	Filter *Filter `protobuf:"bytes,4,opt,name=filter,proto3,oneof"`
}

func (*WiredRequest_TcpdumpExpression) isWiredRequest_FilterType() {}

func (*WiredRequest_Filter) isWiredRequest_FilterType() {}

type WirelessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to CaptureType:
	//
	//	*WirelessRequest_AccessType
	//	*WirelessRequest_ScanType
	CaptureType   isWirelessRequest_CaptureType `protobuf_oneof:"capture_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WirelessRequest) Reset() {
	*x = WirelessRequest{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WirelessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessRequest) ProtoMessage() {}

func (x *WirelessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessRequest.ProtoReflect.Descriptor instead.
func (*WirelessRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{6}
}

func (x *WirelessRequest) GetCaptureType() isWirelessRequest_CaptureType {
	if x != nil {
		return x.CaptureType
	}
	return nil
}

func (x *WirelessRequest) GetAccessType() *AccessCaptureType {
	if x != nil {
		if x, ok := x.CaptureType.(*WirelessRequest_AccessType); ok {
			return x.AccessType
		}
	}
	return nil
}

func (x *WirelessRequest) GetScanType() *ScanCaptureType {
	if x != nil {
		if x, ok := x.CaptureType.(*WirelessRequest_ScanType); ok {
			return x.ScanType
		}
	}
	return nil
}

type isWirelessRequest_CaptureType interface {
	isWirelessRequest_CaptureType()
}

type WirelessRequest_AccessType struct {
	AccessType *AccessCaptureType `protobuf:"bytes,1,opt,name=access_type,json=accessType,proto3,oneof"`
}

type WirelessRequest_ScanType struct {
	ScanType *ScanCaptureType `protobuf:"bytes,2,opt,name=scan_type,json=scanType,proto3,oneof"`
}

func (*WirelessRequest_AccessType) isWirelessRequest_CaptureType() {}

func (*WirelessRequest_ScanType) isWirelessRequest_CaptureType() {}

type PcapRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*PcapRequest_WiredRequest
	//	*PcapRequest_WirelessRequest
	RequestType   isPcapRequest_RequestType `protobuf_oneof:"request_type"`
	TrimPayload   uint32                    `protobuf:"varint,3,opt,name=trim_payload,json=trimPayload,proto3" json:"trim_payload,omitempty"`
	PacketCount   uint32                    `protobuf:"varint,4,opt,name=packet_count,json=packetCount,proto3" json:"packet_count,omitempty"`
	Duration      uint64                    `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PcapRequest) Reset() {
	*x = PcapRequest{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PcapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapRequest) ProtoMessage() {}

func (x *PcapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapRequest.ProtoReflect.Descriptor instead.
func (*PcapRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{7}
}

func (x *PcapRequest) GetRequestType() isPcapRequest_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *PcapRequest) GetWiredRequest() *WiredRequest {
	if x != nil {
		if x, ok := x.RequestType.(*PcapRequest_WiredRequest); ok {
			return x.WiredRequest
		}
	}
	return nil
}

func (x *PcapRequest) GetWirelessRequest() *WirelessRequest {
	if x != nil {
		if x, ok := x.RequestType.(*PcapRequest_WirelessRequest); ok {
			return x.WirelessRequest
		}
	}
	return nil
}

func (x *PcapRequest) GetTrimPayload() uint32 {
	if x != nil {
		return x.TrimPayload
	}
	return 0
}

func (x *PcapRequest) GetPacketCount() uint32 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *PcapRequest) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type isPcapRequest_RequestType interface {
	isPcapRequest_RequestType()
}

type PcapRequest_WiredRequest struct {
	WiredRequest *WiredRequest `protobuf:"bytes,1,opt,name=wired_request,json=wiredRequest,proto3,oneof"`
}

type PcapRequest_WirelessRequest struct {
	WirelessRequest *WirelessRequest `protobuf:"bytes,2,opt,name=wireless_request,json=wirelessRequest,proto3,oneof"`
}

func (*PcapRequest_WiredRequest) isPcapRequest_RequestType() {}

func (*PcapRequest_WirelessRequest) isPcapRequest_RequestType() {}

type Packet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{8}
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PcapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Packets       []*Packet              `protobuf:"bytes,1,rep,name=packets,proto3" json:"packets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PcapResponse) Reset() {
	*x = PcapResponse{}
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PcapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapResponse) ProtoMessage() {}

func (x *PcapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapResponse.ProtoReflect.Descriptor instead.
func (*PcapResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP(), []int{9}
}

func (x *PcapResponse) GetPackets() []*Packet {
	if x != nil {
		return x.Packets
	}
	return nil
}

var File_github_com_openconfig_gnoi_packet_capture_packet_capture_proto protoreflect.FileDescriptor

const file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDesc = "" +
	"\n" +
	">github.com/openconfig/gnoi/packet_capture/packet_capture.proto\x12\tgnoi.pcap\"\xb8\x01\n" +
	"\x11AccessCaptureType\x12?\n" +
	"\x0eoperating_band\x18\x01 \x03(\x0e2\x18.gnoi.pcap.OperatingBandR\roperatingBand\x12\x14\n" +
	"\x04ssid\x18\x02 \x01(\tH\x00R\x04ssid\x12\x12\n" +
	"\x03mac\x18\x03 \x01(\tH\x00R\x03mac\x12)\n" +
	"\x10promiscuous_mode\x18\x04 \x01(\bR\x0fpromiscuousModeB\r\n" +
	"\vfilter_type\"e\n" +
	"\vChannelInfo\x12\x18\n" +
	"\achannel\x18\x01 \x01(\tR\achannel\x12<\n" +
	"\rchannel_width\x18\x02 \x01(\x0e2\x17.gnoi.pcap.ChannelWidthR\fchannelWidth\"\x8e\x01\n" +
	"\x10BandChannelCombo\x12?\n" +
	"\x0eoperating_band\x18\x01 \x01(\x0e2\x18.gnoi.pcap.OperatingBandR\roperatingBand\x129\n" +
	"\fchannel_info\x18\x02 \x03(\v2\x16.gnoi.pcap.ChannelInfoR\vchannelInfo\"c\n" +
	"\x0fScanCaptureType\x121\n" +
	"\x05combo\x18\x01 \x03(\v2\x1b.gnoi.pcap.BandChannelComboR\x05combo\x12\x1d\n" +
	"\n" +
	"dwell_time\x18\x02 \x01(\x04R\tdwellTime\"\xb6\x01\n" +
	"\x06Filter\x12\x1f\n" +
	"\vfilter_name\x18\x01 \x01(\tR\n" +
	"filterName\x12\x17\n" +
	"\asrc_net\x18\x02 \x01(\tR\x06srcNet\x12\x19\n" +
	"\bdest_net\x18\x03 \x01(\tR\adestNet\x12/\n" +
	"\bprotocol\x18\x04 \x03(\x0e2\x13.gnoi.pcap.ProtocolR\bprotocol\x12\x12\n" +
	"\x04port\x18\x05 \x03(\rR\x04port\x12\x12\n" +
	"\x04vlan\x18\x06 \x03(\rR\x04vlan\"\xc7\x01\n" +
	"\fWiredRequest\x12\x16\n" +
	"\x06ifname\x18\x01 \x01(\tR\x06ifname\x122\n" +
	"\tdirection\x18\x02 \x01(\x0e2\x14.gnoi.pcap.DirectionR\tdirection\x12/\n" +
	"\x12tcpdump_expression\x18\x03 \x01(\tH\x00R\x11tcpdumpExpression\x12+\n" +
	"\x06filter\x18\x04 \x01(\v2\x11.gnoi.pcap.FilterH\x00R\x06filterB\r\n" +
	"\vfilter_type\"\x9d\x01\n" +
	"\x0fWirelessRequest\x12?\n" +
	"\vaccess_type\x18\x01 \x01(\v2\x1c.gnoi.pcap.AccessCaptureTypeH\x00R\n" +
	"accessType\x129\n" +
	"\tscan_type\x18\x02 \x01(\v2\x1a.gnoi.pcap.ScanCaptureTypeH\x00R\bscanTypeB\x0e\n" +
	"\fcapture_type\"\x88\x02\n" +
	"\vPcapRequest\x12>\n" +
	"\rwired_request\x18\x01 \x01(\v2\x17.gnoi.pcap.WiredRequestH\x00R\fwiredRequest\x12G\n" +
	"\x10wireless_request\x18\x02 \x01(\v2\x1a.gnoi.pcap.WirelessRequestH\x00R\x0fwirelessRequest\x12!\n" +
	"\ftrim_payload\x18\x03 \x01(\rR\vtrimPayload\x12!\n" +
	"\fpacket_count\x18\x04 \x01(\rR\vpacketCount\x12\x1a\n" +
	"\bduration\x18\x05 \x01(\x04R\bdurationB\x0e\n" +
	"\frequest_type\"\x1c\n" +
	"\x06Packet\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\";\n" +
	"\fPcapResponse\x12+\n" +
	"\apackets\x18\x01 \x03(\v2\x11.gnoi.pcap.PacketR\apackets*D\n" +
	"\rOperatingBand\x12\v\n" +
	"\aBAND_2G\x10\x00\x12\v\n" +
	"\aBAND_5G\x10\x01\x12\v\n" +
	"\aBAND_6G\x10\x02\x12\f\n" +
	"\bBAND_ALL\x10\x03*\x1c\n" +
	"\bProtocol\x12\a\n" +
	"\x03TCP\x10\x00\x12\a\n" +
	"\x03UDP\x10\x01*%\n" +
	"\tDirection\x12\x06\n" +
	"\x02RX\x10\x00\x12\x06\n" +
	"\x02TX\x10\x01\x12\b\n" +
	"\x04BOTH\x10\x02*S\n" +
	"\fChannelWidth\x12\x0f\n" +
	"\vWIDTH_20MHZ\x10\x00\x12\x0f\n" +
	"\vWIDTH_40MHZ\x10\x01\x12\x0f\n" +
	"\vWIDTH_80MHZ\x10\x02\x12\x10\n" +
	"\fWIDTH_160MHZ\x10\x032L\n" +
	"\rPacketCapture\x12;\n" +
	"\x04Pcap\x12\x16.gnoi.pcap.PcapRequest\x1a\x17.gnoi.pcap.PcapResponse\"\x000\x01B0Z.github.com/openconfig/gnoi/packet_capture;pcapb\x06proto3"

var (
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescOnce sync.Once
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescData []byte
)

func file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescGZIP() []byte {
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescOnce.Do(func() {
		file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDesc), len(file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDesc)))
	})
	return file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDescData
}

var file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_goTypes = []any{
	(OperatingBand)(0),        // 0: gnoi.pcap.OperatingBand
	(Protocol)(0),             // 1: gnoi.pcap.Protocol
	(Direction)(0),            // 2: gnoi.pcap.Direction
	(ChannelWidth)(0),         // 3: gnoi.pcap.ChannelWidth
	(*AccessCaptureType)(nil), // 4: gnoi.pcap.AccessCaptureType
	(*ChannelInfo)(nil),       // 5: gnoi.pcap.ChannelInfo
	(*BandChannelCombo)(nil),  // 6: gnoi.pcap.BandChannelCombo
	(*ScanCaptureType)(nil),   // 7: gnoi.pcap.ScanCaptureType
	(*Filter)(nil),            // 8: gnoi.pcap.Filter
	(*WiredRequest)(nil),      // 9: gnoi.pcap.WiredRequest
	(*WirelessRequest)(nil),   // 10: gnoi.pcap.WirelessRequest
	(*PcapRequest)(nil),       // 11: gnoi.pcap.PcapRequest
	(*Packet)(nil),            // 12: gnoi.pcap.Packet
	(*PcapResponse)(nil),      // 13: gnoi.pcap.PcapResponse
}
var file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_depIdxs = []int32{
	0,  // 0: gnoi.pcap.AccessCaptureType.operating_band:type_name -> gnoi.pcap.OperatingBand
	3,  // 1: gnoi.pcap.ChannelInfo.channel_width:type_name -> gnoi.pcap.ChannelWidth
	0,  // 2: gnoi.pcap.BandChannelCombo.operating_band:type_name -> gnoi.pcap.OperatingBand
	5,  // 3: gnoi.pcap.BandChannelCombo.channel_info:type_name -> gnoi.pcap.ChannelInfo
	6,  // 4: gnoi.pcap.ScanCaptureType.combo:type_name -> gnoi.pcap.BandChannelCombo
	1,  // 5: gnoi.pcap.Filter.protocol:type_name -> gnoi.pcap.Protocol
	2,  // 6: gnoi.pcap.WiredRequest.direction:type_name -> gnoi.pcap.Direction
	8,  // 7: gnoi.pcap.WiredRequest.filter:type_name -> gnoi.pcap.Filter
	4,  // 8: gnoi.pcap.WirelessRequest.access_type:type_name -> gnoi.pcap.AccessCaptureType
	7,  // 9: gnoi.pcap.WirelessRequest.scan_type:type_name -> gnoi.pcap.ScanCaptureType
	9,  // 10: gnoi.pcap.PcapRequest.wired_request:type_name -> gnoi.pcap.WiredRequest
	10, // 11: gnoi.pcap.PcapRequest.wireless_request:type_name -> gnoi.pcap.WirelessRequest
	12, // 12: gnoi.pcap.PcapResponse.packets:type_name -> gnoi.pcap.Packet
	11, // 13: gnoi.pcap.PacketCapture.Pcap:input_type -> gnoi.pcap.PcapRequest
	13, // 14: gnoi.pcap.PacketCapture.Pcap:output_type -> gnoi.pcap.PcapResponse
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_init() }
func file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_init() {
	if File_github_com_openconfig_gnoi_packet_capture_packet_capture_proto != nil {
		return
	}
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[0].OneofWrappers = []any{
		(*AccessCaptureType_Ssid)(nil),
		(*AccessCaptureType_Mac)(nil),
	}
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[5].OneofWrappers = []any{
		(*WiredRequest_TcpdumpExpression)(nil),
		(*WiredRequest_Filter)(nil),
	}
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[6].OneofWrappers = []any{
		(*WirelessRequest_AccessType)(nil),
		(*WirelessRequest_ScanType)(nil),
	}
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes[7].OneofWrappers = []any{
		(*PcapRequest_WiredRequest)(nil),
		(*PcapRequest_WirelessRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDesc), len(file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_goTypes,
		DependencyIndexes: file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_depIdxs,
		EnumInfos:         file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_enumTypes,
		MessageInfos:      file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_msgTypes,
	}.Build()
	File_github_com_openconfig_gnoi_packet_capture_packet_capture_proto = out.File
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_goTypes = nil
	file_github_com_openconfig_gnoi_packet_capture_packet_capture_proto_depIdxs = nil
}
