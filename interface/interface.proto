//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package gnoi.interface;

import "github.com/openconfig/gnoi/types/types.proto";

// Short name is required in order to avoid using a reserved name.
option go_package = "github.com/openconfig/gnoi/interface;intf";

option (types.gnoi_version) = "0.1.0";

service Interface {
  // SetLoopbackMode is used to set the mode of loopback on a interface.
  rpc SetLoopbackMode(SetLoopbackModeRequest)
    returns (SetLoopbackModeResponse) {}

  // GetLoopbackMode is used to get the mode of loopback on a interface.
  rpc GetLoopbackMode(GetLoopbackModeRequest)
    returns (GetLoopbackModeResponse) {}

  // ClearInterfaceCounters will reset the counters for the provided interface.
  rpc ClearInterfaceCounters(ClearInterfaceCountersRequest)
    returns (ClearInterfaceCountersResponse) {}

}

// SetLoopbackModeRequest requests the provide interface be have its loopback
// mode set to the specified mode. The mode may be vendor specific. For example,
// on a transport device, available modes are "none", "mac", "phy", 
// "phy_remote", "framer_facility", and "framer_terminal".
message SetLoopbackModeRequest {
  types.Path interface = 1;
  string mode = 2;
}

message SetLoopbackModeResponse {
}

message GetLoopbackModeRequest {
  types.Path interface = 1;
}

message GetLoopbackModeResponse {
  string mode = 1;
}

message ClearInterfaceCountersRequest {
  repeated types.Path interface = 1;
}

message ClearInterfaceCountersResponse {
}
