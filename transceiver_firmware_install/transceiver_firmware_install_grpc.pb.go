// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: github.com/openconfig/gnoi/transceiver_firmware_install/transceiver_firmware_install.proto

package transceiver_firmware_install

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransceiverFirmwareInstall_Transfer_FullMethodName = "/gnoi.transceiver_firmware_install.TransceiverFirmwareInstall/Transfer"
	TransceiverFirmwareInstall_Install_FullMethodName  = "/gnoi.transceiver_firmware_install.TransceiverFirmwareInstall/Install"
	TransceiverFirmwareInstall_Verify_FullMethodName   = "/gnoi.transceiver_firmware_install.TransceiverFirmwareInstall/Verify"
	TransceiverFirmwareInstall_Delete_FullMethodName   = "/gnoi.transceiver_firmware_install.TransceiverFirmwareInstall/Delete"
)

// TransceiverFirmwareInstallClient is the client API for TransceiverFirmwareInstall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransceiverFirmwareInstallClient interface {
	Transfer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TransferRequest, TransferResponse], error)
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstallResponse], error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type transceiverFirmwareInstallClient struct {
	cc grpc.ClientConnInterface
}

func NewTransceiverFirmwareInstallClient(cc grpc.ClientConnInterface) TransceiverFirmwareInstallClient {
	return &transceiverFirmwareInstallClient{cc}
}

func (c *transceiverFirmwareInstallClient) Transfer(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TransferRequest, TransferResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransceiverFirmwareInstall_ServiceDesc.Streams[0], TransceiverFirmwareInstall_Transfer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransferRequest, TransferResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransceiverFirmwareInstall_TransferClient = grpc.BidiStreamingClient[TransferRequest, TransferResponse]

func (c *transceiverFirmwareInstallClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InstallResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransceiverFirmwareInstall_ServiceDesc.Streams[1], TransceiverFirmwareInstall_Install_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InstallRequest, InstallResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransceiverFirmwareInstall_InstallClient = grpc.ServerStreamingClient[InstallResponse]

func (c *transceiverFirmwareInstallClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, TransceiverFirmwareInstall_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transceiverFirmwareInstallClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, TransceiverFirmwareInstall_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransceiverFirmwareInstallServer is the server API for TransceiverFirmwareInstall service.
// All implementations should embed UnimplementedTransceiverFirmwareInstallServer
// for forward compatibility.
type TransceiverFirmwareInstallServer interface {
	Transfer(grpc.BidiStreamingServer[TransferRequest, TransferResponse]) error
	Install(*InstallRequest, grpc.ServerStreamingServer[InstallResponse]) error
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedTransceiverFirmwareInstallServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransceiverFirmwareInstallServer struct{}

func (UnimplementedTransceiverFirmwareInstallServer) Transfer(grpc.BidiStreamingServer[TransferRequest, TransferResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedTransceiverFirmwareInstallServer) Install(*InstallRequest, grpc.ServerStreamingServer[InstallResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedTransceiverFirmwareInstallServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedTransceiverFirmwareInstallServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransceiverFirmwareInstallServer) testEmbeddedByValue() {}

// UnsafeTransceiverFirmwareInstallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransceiverFirmwareInstallServer will
// result in compilation errors.
type UnsafeTransceiverFirmwareInstallServer interface {
	mustEmbedUnimplementedTransceiverFirmwareInstallServer()
}

func RegisterTransceiverFirmwareInstallServer(s grpc.ServiceRegistrar, srv TransceiverFirmwareInstallServer) {
	// If the following call pancis, it indicates UnimplementedTransceiverFirmwareInstallServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransceiverFirmwareInstall_ServiceDesc, srv)
}

func _TransceiverFirmwareInstall_Transfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransceiverFirmwareInstallServer).Transfer(&grpc.GenericServerStream[TransferRequest, TransferResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransceiverFirmwareInstall_TransferServer = grpc.BidiStreamingServer[TransferRequest, TransferResponse]

func _TransceiverFirmwareInstall_Install_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransceiverFirmwareInstallServer).Install(m, &grpc.GenericServerStream[InstallRequest, InstallResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransceiverFirmwareInstall_InstallServer = grpc.ServerStreamingServer[InstallResponse]

func _TransceiverFirmwareInstall_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransceiverFirmwareInstallServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransceiverFirmwareInstall_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransceiverFirmwareInstallServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransceiverFirmwareInstall_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransceiverFirmwareInstallServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransceiverFirmwareInstall_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransceiverFirmwareInstallServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransceiverFirmwareInstall_ServiceDesc is the grpc.ServiceDesc for TransceiverFirmwareInstall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransceiverFirmwareInstall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.transceiver_firmware_install.TransceiverFirmwareInstall",
	HandlerType: (*TransceiverFirmwareInstallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verify",
			Handler:    _TransceiverFirmwareInstall_Verify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TransceiverFirmwareInstall_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transfer",
			Handler:       _TransceiverFirmwareInstall_Transfer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Install",
			Handler:       _TransceiverFirmwareInstall_Install_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnoi/transceiver_firmware_install/transceiver_firmware_install.proto",
}
