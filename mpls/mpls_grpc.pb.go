// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.1
// source: github.com/openconfig/gnoi/mpls/mpls.proto

package mpls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MPLS_ClearLSP_FullMethodName         = "/gnoi.mpls.MPLS/ClearLSP"
	MPLS_ClearLSPCounters_FullMethodName = "/gnoi.mpls.MPLS/ClearLSPCounters"
	MPLS_MPLSPing_FullMethodName         = "/gnoi.mpls.MPLS/MPLSPing"
)

// MPLSClient is the client API for MPLS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MPLSClient interface {
	ClearLSP(ctx context.Context, in *ClearLSPRequest, opts ...grpc.CallOption) (*ClearLSPResponse, error)
	ClearLSPCounters(ctx context.Context, in *ClearLSPCountersRequest, opts ...grpc.CallOption) (*ClearLSPCountersResponse, error)
	MPLSPing(ctx context.Context, in *MPLSPingRequest, opts ...grpc.CallOption) (MPLS_MPLSPingClient, error)
}

type mPLSClient struct {
	cc grpc.ClientConnInterface
}

func NewMPLSClient(cc grpc.ClientConnInterface) MPLSClient {
	return &mPLSClient{cc}
}

func (c *mPLSClient) ClearLSP(ctx context.Context, in *ClearLSPRequest, opts ...grpc.CallOption) (*ClearLSPResponse, error) {
	out := new(ClearLSPResponse)
	err := c.cc.Invoke(ctx, MPLS_ClearLSP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPLSClient) ClearLSPCounters(ctx context.Context, in *ClearLSPCountersRequest, opts ...grpc.CallOption) (*ClearLSPCountersResponse, error) {
	out := new(ClearLSPCountersResponse)
	err := c.cc.Invoke(ctx, MPLS_ClearLSPCounters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPLSClient) MPLSPing(ctx context.Context, in *MPLSPingRequest, opts ...grpc.CallOption) (MPLS_MPLSPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &MPLS_ServiceDesc.Streams[0], MPLS_MPLSPing_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mPLSMPLSPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MPLS_MPLSPingClient interface {
	Recv() (*MPLSPingResponse, error)
	grpc.ClientStream
}

type mPLSMPLSPingClient struct {
	grpc.ClientStream
}

func (x *mPLSMPLSPingClient) Recv() (*MPLSPingResponse, error) {
	m := new(MPLSPingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MPLSServer is the server API for MPLS service.
// All implementations should embed UnimplementedMPLSServer
// for forward compatibility
type MPLSServer interface {
	ClearLSP(context.Context, *ClearLSPRequest) (*ClearLSPResponse, error)
	ClearLSPCounters(context.Context, *ClearLSPCountersRequest) (*ClearLSPCountersResponse, error)
	MPLSPing(*MPLSPingRequest, MPLS_MPLSPingServer) error
}

// UnimplementedMPLSServer should be embedded to have forward compatible implementations.
type UnimplementedMPLSServer struct {
}

func (UnimplementedMPLSServer) ClearLSP(context.Context, *ClearLSPRequest) (*ClearLSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLSP not implemented")
}
func (UnimplementedMPLSServer) ClearLSPCounters(context.Context, *ClearLSPCountersRequest) (*ClearLSPCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLSPCounters not implemented")
}
func (UnimplementedMPLSServer) MPLSPing(*MPLSPingRequest, MPLS_MPLSPingServer) error {
	return status.Errorf(codes.Unimplemented, "method MPLSPing not implemented")
}

// UnsafeMPLSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MPLSServer will
// result in compilation errors.
type UnsafeMPLSServer interface {
	mustEmbedUnimplementedMPLSServer()
}

func RegisterMPLSServer(s grpc.ServiceRegistrar, srv MPLSServer) {
	s.RegisterService(&MPLS_ServiceDesc, srv)
}

func _MPLS_ClearLSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPLSServer).ClearLSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPLS_ClearLSP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPLSServer).ClearLSP(ctx, req.(*ClearLSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPLS_ClearLSPCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLSPCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPLSServer).ClearLSPCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPLS_ClearLSPCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPLSServer).ClearLSPCounters(ctx, req.(*ClearLSPCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPLS_MPLSPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MPLSPingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MPLSServer).MPLSPing(m, &mPLSMPLSPingServer{stream})
}

type MPLS_MPLSPingServer interface {
	Send(*MPLSPingResponse) error
	grpc.ServerStream
}

type mPLSMPLSPingServer struct {
	grpc.ServerStream
}

func (x *mPLSMPLSPingServer) Send(m *MPLSPingResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MPLS_ServiceDesc is the grpc.ServiceDesc for MPLS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MPLS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.mpls.MPLS",
	HandlerType: (*MPLSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearLSP",
			Handler:    _MPLS_ClearLSP_Handler,
		},
		{
			MethodName: "ClearLSPCounters",
			Handler:    _MPLS_ClearLSPCounters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MPLSPing",
			Handler:       _MPLS_MPLSPing_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnoi/mpls/mpls.proto",
}
