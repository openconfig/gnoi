// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: github.com/openconfig/gnoi/mpls/mpls.proto

package mpls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MPLS_ClearLSP_FullMethodName         = "/gnoi.mpls.MPLS/ClearLSP"
	MPLS_ClearLSPCounters_FullMethodName = "/gnoi.mpls.MPLS/ClearLSPCounters"
	MPLS_MPLSPing_FullMethodName         = "/gnoi.mpls.MPLS/MPLSPing"
)

// MPLSClient is the client API for MPLS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MPLSClient interface {
	ClearLSP(ctx context.Context, in *ClearLSPRequest, opts ...grpc.CallOption) (*ClearLSPResponse, error)
	ClearLSPCounters(ctx context.Context, in *ClearLSPCountersRequest, opts ...grpc.CallOption) (*ClearLSPCountersResponse, error)
	MPLSPing(ctx context.Context, in *MPLSPingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MPLSPingResponse], error)
}

type mPLSClient struct {
	cc grpc.ClientConnInterface
}

func NewMPLSClient(cc grpc.ClientConnInterface) MPLSClient {
	return &mPLSClient{cc}
}

func (c *mPLSClient) ClearLSP(ctx context.Context, in *ClearLSPRequest, opts ...grpc.CallOption) (*ClearLSPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearLSPResponse)
	err := c.cc.Invoke(ctx, MPLS_ClearLSP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPLSClient) ClearLSPCounters(ctx context.Context, in *ClearLSPCountersRequest, opts ...grpc.CallOption) (*ClearLSPCountersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearLSPCountersResponse)
	err := c.cc.Invoke(ctx, MPLS_ClearLSPCounters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPLSClient) MPLSPing(ctx context.Context, in *MPLSPingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MPLSPingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MPLS_ServiceDesc.Streams[0], MPLS_MPLSPing_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MPLSPingRequest, MPLSPingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MPLS_MPLSPingClient = grpc.ServerStreamingClient[MPLSPingResponse]

// MPLSServer is the server API for MPLS service.
// All implementations should embed UnimplementedMPLSServer
// for forward compatibility.
type MPLSServer interface {
	ClearLSP(context.Context, *ClearLSPRequest) (*ClearLSPResponse, error)
	ClearLSPCounters(context.Context, *ClearLSPCountersRequest) (*ClearLSPCountersResponse, error)
	MPLSPing(*MPLSPingRequest, grpc.ServerStreamingServer[MPLSPingResponse]) error
}

// UnimplementedMPLSServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMPLSServer struct{}

func (UnimplementedMPLSServer) ClearLSP(context.Context, *ClearLSPRequest) (*ClearLSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLSP not implemented")
}
func (UnimplementedMPLSServer) ClearLSPCounters(context.Context, *ClearLSPCountersRequest) (*ClearLSPCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLSPCounters not implemented")
}
func (UnimplementedMPLSServer) MPLSPing(*MPLSPingRequest, grpc.ServerStreamingServer[MPLSPingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MPLSPing not implemented")
}
func (UnimplementedMPLSServer) testEmbeddedByValue() {}

// UnsafeMPLSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MPLSServer will
// result in compilation errors.
type UnsafeMPLSServer interface {
	mustEmbedUnimplementedMPLSServer()
}

func RegisterMPLSServer(s grpc.ServiceRegistrar, srv MPLSServer) {
	// If the following call pancis, it indicates UnimplementedMPLSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MPLS_ServiceDesc, srv)
}

func _MPLS_ClearLSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPLSServer).ClearLSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPLS_ClearLSP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPLSServer).ClearLSP(ctx, req.(*ClearLSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPLS_ClearLSPCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLSPCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPLSServer).ClearLSPCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPLS_ClearLSPCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPLSServer).ClearLSPCounters(ctx, req.(*ClearLSPCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPLS_MPLSPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MPLSPingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MPLSServer).MPLSPing(m, &grpc.GenericServerStream[MPLSPingRequest, MPLSPingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MPLS_MPLSPingServer = grpc.ServerStreamingServer[MPLSPingResponse]

// MPLS_ServiceDesc is the grpc.ServiceDesc for MPLS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MPLS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.mpls.MPLS",
	HandlerType: (*MPLSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearLSP",
			Handler:    _MPLS_ClearLSP_Handler,
		},
		{
			MethodName: "ClearLSPCounters",
			Handler:    _MPLS_ClearLSPCounters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MPLSPing",
			Handler:       _MPLS_MPLSPing_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnoi/mpls/mpls.proto",
}
