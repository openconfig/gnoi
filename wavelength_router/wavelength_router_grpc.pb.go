// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: github.com/openconfig/gnoi/wavelength_router/wavelength_router.proto

package wavelength_router

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WavelengthRouter_AdjustPSD_FullMethodName            = "/gnoi.optical.WavelengthRouter/AdjustPSD"
	WavelengthRouter_CancelAdjustPSD_FullMethodName      = "/gnoi.optical.WavelengthRouter/CancelAdjustPSD"
	WavelengthRouter_AdjustSpectrum_FullMethodName       = "/gnoi.optical.WavelengthRouter/AdjustSpectrum"
	WavelengthRouter_CancelAdjustSpectrum_FullMethodName = "/gnoi.optical.WavelengthRouter/CancelAdjustSpectrum"
)

// WavelengthRouterClient is the client API for WavelengthRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WavelengthRouterClient interface {
	// Deprecated: Do not use.
	AdjustPSD(ctx context.Context, in *AdjustPSDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AdjustPSDResponse], error)
	// Deprecated: Do not use.
	CancelAdjustPSD(ctx context.Context, in *AdjustPSDRequest, opts ...grpc.CallOption) (*CancelAdjustPSDResponse, error)
	AdjustSpectrum(ctx context.Context, in *AdjustSpectrumRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AdjustSpectrumResponse], error)
	CancelAdjustSpectrum(ctx context.Context, in *AdjustSpectrumRequest, opts ...grpc.CallOption) (*CancelAdjustSpectrumResponse, error)
}

type wavelengthRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewWavelengthRouterClient(cc grpc.ClientConnInterface) WavelengthRouterClient {
	return &wavelengthRouterClient{cc}
}

// Deprecated: Do not use.
func (c *wavelengthRouterClient) AdjustPSD(ctx context.Context, in *AdjustPSDRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AdjustPSDResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WavelengthRouter_ServiceDesc.Streams[0], WavelengthRouter_AdjustPSD_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AdjustPSDRequest, AdjustPSDResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WavelengthRouter_AdjustPSDClient = grpc.ServerStreamingClient[AdjustPSDResponse]

// Deprecated: Do not use.
func (c *wavelengthRouterClient) CancelAdjustPSD(ctx context.Context, in *AdjustPSDRequest, opts ...grpc.CallOption) (*CancelAdjustPSDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelAdjustPSDResponse)
	err := c.cc.Invoke(ctx, WavelengthRouter_CancelAdjustPSD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wavelengthRouterClient) AdjustSpectrum(ctx context.Context, in *AdjustSpectrumRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AdjustSpectrumResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WavelengthRouter_ServiceDesc.Streams[1], WavelengthRouter_AdjustSpectrum_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AdjustSpectrumRequest, AdjustSpectrumResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WavelengthRouter_AdjustSpectrumClient = grpc.ServerStreamingClient[AdjustSpectrumResponse]

func (c *wavelengthRouterClient) CancelAdjustSpectrum(ctx context.Context, in *AdjustSpectrumRequest, opts ...grpc.CallOption) (*CancelAdjustSpectrumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelAdjustSpectrumResponse)
	err := c.cc.Invoke(ctx, WavelengthRouter_CancelAdjustSpectrum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WavelengthRouterServer is the server API for WavelengthRouter service.
// All implementations should embed UnimplementedWavelengthRouterServer
// for forward compatibility.
type WavelengthRouterServer interface {
	// Deprecated: Do not use.
	AdjustPSD(*AdjustPSDRequest, grpc.ServerStreamingServer[AdjustPSDResponse]) error
	// Deprecated: Do not use.
	CancelAdjustPSD(context.Context, *AdjustPSDRequest) (*CancelAdjustPSDResponse, error)
	AdjustSpectrum(*AdjustSpectrumRequest, grpc.ServerStreamingServer[AdjustSpectrumResponse]) error
	CancelAdjustSpectrum(context.Context, *AdjustSpectrumRequest) (*CancelAdjustSpectrumResponse, error)
}

// UnimplementedWavelengthRouterServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWavelengthRouterServer struct{}

func (UnimplementedWavelengthRouterServer) AdjustPSD(*AdjustPSDRequest, grpc.ServerStreamingServer[AdjustPSDResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AdjustPSD not implemented")
}
func (UnimplementedWavelengthRouterServer) CancelAdjustPSD(context.Context, *AdjustPSDRequest) (*CancelAdjustPSDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAdjustPSD not implemented")
}
func (UnimplementedWavelengthRouterServer) AdjustSpectrum(*AdjustSpectrumRequest, grpc.ServerStreamingServer[AdjustSpectrumResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AdjustSpectrum not implemented")
}
func (UnimplementedWavelengthRouterServer) CancelAdjustSpectrum(context.Context, *AdjustSpectrumRequest) (*CancelAdjustSpectrumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAdjustSpectrum not implemented")
}
func (UnimplementedWavelengthRouterServer) testEmbeddedByValue() {}

// UnsafeWavelengthRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WavelengthRouterServer will
// result in compilation errors.
type UnsafeWavelengthRouterServer interface {
	mustEmbedUnimplementedWavelengthRouterServer()
}

func RegisterWavelengthRouterServer(s grpc.ServiceRegistrar, srv WavelengthRouterServer) {
	// If the following call pancis, it indicates UnimplementedWavelengthRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WavelengthRouter_ServiceDesc, srv)
}

func _WavelengthRouter_AdjustPSD_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdjustPSDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WavelengthRouterServer).AdjustPSD(m, &grpc.GenericServerStream[AdjustPSDRequest, AdjustPSDResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WavelengthRouter_AdjustPSDServer = grpc.ServerStreamingServer[AdjustPSDResponse]

func _WavelengthRouter_CancelAdjustPSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustPSDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WavelengthRouterServer).CancelAdjustPSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WavelengthRouter_CancelAdjustPSD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WavelengthRouterServer).CancelAdjustPSD(ctx, req.(*AdjustPSDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WavelengthRouter_AdjustSpectrum_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AdjustSpectrumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WavelengthRouterServer).AdjustSpectrum(m, &grpc.GenericServerStream[AdjustSpectrumRequest, AdjustSpectrumResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WavelengthRouter_AdjustSpectrumServer = grpc.ServerStreamingServer[AdjustSpectrumResponse]

func _WavelengthRouter_CancelAdjustSpectrum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustSpectrumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WavelengthRouterServer).CancelAdjustSpectrum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WavelengthRouter_CancelAdjustSpectrum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WavelengthRouterServer).CancelAdjustSpectrum(ctx, req.(*AdjustSpectrumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WavelengthRouter_ServiceDesc is the grpc.ServiceDesc for WavelengthRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WavelengthRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.optical.WavelengthRouter",
	HandlerType: (*WavelengthRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelAdjustPSD",
			Handler:    _WavelengthRouter_CancelAdjustPSD_Handler,
		},
		{
			MethodName: "CancelAdjustSpectrum",
			Handler:    _WavelengthRouter_CancelAdjustSpectrum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AdjustPSD",
			Handler:       _WavelengthRouter_AdjustPSD_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AdjustSpectrum",
			Handler:       _WavelengthRouter_AdjustSpectrum_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnoi/wavelength_router/wavelength_router.proto",
}
