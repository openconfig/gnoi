// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: github.com/openconfig/gnoi/containerz/containerz.proto

package containerz

import (
	common "github.com/openconfig/gnoi/common"
	types "github.com/openconfig/gnoi/types"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Driver int32

const (
	Driver_DS_UNSPECIFIED Driver = 0
	Driver_DS_LOCAL       Driver = 1
	Driver_DS_CUSTOM      Driver = 2
)

// Enum value maps for Driver.
var (
	Driver_name = map[int32]string{
		0: "DS_UNSPECIFIED",
		1: "DS_LOCAL",
		2: "DS_CUSTOM",
	}
	Driver_value = map[string]int32{
		"DS_UNSPECIFIED": 0,
		"DS_LOCAL":       1,
		"DS_CUSTOM":      2,
	}
)

func (x Driver) Enum() *Driver {
	p := new(Driver)
	*p = x
	return p
}

func (x Driver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Driver) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[0].Descriptor()
}

func (Driver) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[0]
}

func (x Driver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Driver.Descriptor instead.
func (Driver) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{0}
}

type RemoveImageResponse_Code int32

const (
	RemoveImageResponse_UNSPECIFIED RemoveImageResponse_Code = 0
	RemoveImageResponse_UNKNOWN     RemoveImageResponse_Code = 1
	RemoveImageResponse_NOT_FOUND   RemoveImageResponse_Code = 2
	RemoveImageResponse_RUNNING     RemoveImageResponse_Code = 3
	RemoveImageResponse_SUCCESS     RemoveImageResponse_Code = 4
)

// Enum value maps for RemoveImageResponse_Code.
var (
	RemoveImageResponse_Code_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNKNOWN",
		2: "NOT_FOUND",
		3: "RUNNING",
		4: "SUCCESS",
	}
	RemoveImageResponse_Code_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNKNOWN":     1,
		"NOT_FOUND":   2,
		"RUNNING":     3,
		"SUCCESS":     4,
	}
)

func (x RemoveImageResponse_Code) Enum() *RemoveImageResponse_Code {
	p := new(RemoveImageResponse_Code)
	*p = x
	return p
}

func (x RemoveImageResponse_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveImageResponse_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[1].Descriptor()
}

func (RemoveImageResponse_Code) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[1]
}

func (x RemoveImageResponse_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveImageResponse_Code.Descriptor instead.
func (RemoveImageResponse_Code) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{8, 0}
}

type RemoveContainerResponse_Code int32

const (
	RemoveContainerResponse_UNSPECIFIED RemoveContainerResponse_Code = 0
	RemoveContainerResponse_NOT_FOUND   RemoveContainerResponse_Code = 1
	RemoveContainerResponse_RUNNING     RemoveContainerResponse_Code = 2
	RemoveContainerResponse_SUCCESS     RemoveContainerResponse_Code = 3
)

// Enum value maps for RemoveContainerResponse_Code.
var (
	RemoveContainerResponse_Code_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NOT_FOUND",
		2: "RUNNING",
		3: "SUCCESS",
	}
	RemoveContainerResponse_Code_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NOT_FOUND":   1,
		"RUNNING":     2,
		"SUCCESS":     3,
	}
)

func (x RemoveContainerResponse_Code) Enum() *RemoveContainerResponse_Code {
	p := new(RemoveContainerResponse_Code)
	*p = x
	return p
}

func (x RemoveContainerResponse_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveContainerResponse_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[2].Descriptor()
}

func (RemoveContainerResponse_Code) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[2]
}

func (x RemoveContainerResponse_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveContainerResponse_Code.Descriptor instead.
func (RemoveContainerResponse_Code) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{10, 0}
}

type ListContainerResponse_Status int32

const (
	ListContainerResponse_UNSPECIFIED ListContainerResponse_Status = 0
	ListContainerResponse_STOPPED     ListContainerResponse_Status = 1
	ListContainerResponse_RUNNING     ListContainerResponse_Status = 2
	ListContainerResponse_PRESENT     ListContainerResponse_Status = 3
	ListContainerResponse_NOT_FOUND   ListContainerResponse_Status = 4
)

// Enum value maps for ListContainerResponse_Status.
var (
	ListContainerResponse_Status_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "STOPPED",
		2: "RUNNING",
		3: "PRESENT",
		4: "NOT_FOUND",
	}
	ListContainerResponse_Status_value = map[string]int32{
		"UNSPECIFIED": 0,
		"STOPPED":     1,
		"RUNNING":     2,
		"PRESENT":     3,
		"NOT_FOUND":   4,
	}
)

func (x ListContainerResponse_Status) Enum() *ListContainerResponse_Status {
	p := new(ListContainerResponse_Status)
	*p = x
	return p
}

func (x ListContainerResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListContainerResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[3].Descriptor()
}

func (ListContainerResponse_Status) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[3]
}

func (x ListContainerResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListContainerResponse_Status.Descriptor instead.
func (ListContainerResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{14, 0}
}

type Device_Permission int32

const (
	Device_UNSPECIFIED Device_Permission = 0
	Device_READ        Device_Permission = 1
	Device_WRITE       Device_Permission = 2
	Device_MKNOD       Device_Permission = 3
)

// Enum value maps for Device_Permission.
var (
	Device_Permission_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "READ",
		2: "WRITE",
		3: "MKNOD",
	}
	Device_Permission_value = map[string]int32{
		"UNSPECIFIED": 0,
		"READ":        1,
		"WRITE":       2,
		"MKNOD":       3,
	}
)

func (x Device_Permission) Enum() *Device_Permission {
	p := new(Device_Permission)
	*p = x
	return p
}

func (x Device_Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[4].Descriptor()
}

func (Device_Permission) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[4]
}

func (x Device_Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Permission.Descriptor instead.
func (Device_Permission) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{16, 0}
}

type StartContainerRequest_Restart_Policy int32

const (
	StartContainerRequest_Restart_NONE           StartContainerRequest_Restart_Policy = 0
	StartContainerRequest_Restart_ALWAYS         StartContainerRequest_Restart_Policy = 1
	StartContainerRequest_Restart_UNLESS_STOPPED StartContainerRequest_Restart_Policy = 2
	StartContainerRequest_Restart_ON_FAILURE     StartContainerRequest_Restart_Policy = 3
)

// Enum value maps for StartContainerRequest_Restart_Policy.
var (
	StartContainerRequest_Restart_Policy_name = map[int32]string{
		0: "NONE",
		1: "ALWAYS",
		2: "UNLESS_STOPPED",
		3: "ON_FAILURE",
	}
	StartContainerRequest_Restart_Policy_value = map[string]int32{
		"NONE":           0,
		"ALWAYS":         1,
		"UNLESS_STOPPED": 2,
		"ON_FAILURE":     3,
	}
)

func (x StartContainerRequest_Restart_Policy) Enum() *StartContainerRequest_Restart_Policy {
	p := new(StartContainerRequest_Restart_Policy)
	*p = x
	return p
}

func (x StartContainerRequest_Restart_Policy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartContainerRequest_Restart_Policy) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[5].Descriptor()
}

func (StartContainerRequest_Restart_Policy) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[5]
}

func (x StartContainerRequest_Restart_Policy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartContainerRequest_Restart_Policy.Descriptor instead.
func (StartContainerRequest_Restart_Policy) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{17, 3, 0}
}

type StartError_Code int32

const (
	StartError_UNSPECIFIED StartError_Code = 0
	StartError_UNKNOWN     StartError_Code = 1
	StartError_NOT_FOUND   StartError_Code = 2
	StartError_PORT_USED   StartError_Code = 3
)

// Enum value maps for StartError_Code.
var (
	StartError_Code_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "UNKNOWN",
		2: "NOT_FOUND",
		3: "PORT_USED",
	}
	StartError_Code_value = map[string]int32{
		"UNSPECIFIED": 0,
		"UNKNOWN":     1,
		"NOT_FOUND":   2,
		"PORT_USED":   3,
	}
)

func (x StartError_Code) Enum() *StartError_Code {
	p := new(StartError_Code)
	*p = x
	return p
}

func (x StartError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[6].Descriptor()
}

func (StartError_Code) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[6]
}

func (x StartError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartError_Code.Descriptor instead.
func (StartError_Code) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{20, 0}
}

type StopContainerResponse_Code int32

const (
	StopContainerResponse_UNSPECIFIED StopContainerResponse_Code = 0
	StopContainerResponse_BUSY        StopContainerResponse_Code = 1
	StopContainerResponse_NOT_FOUND   StopContainerResponse_Code = 2
	StopContainerResponse_SUCCESS     StopContainerResponse_Code = 3
)

// Enum value maps for StopContainerResponse_Code.
var (
	StopContainerResponse_Code_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "BUSY",
		2: "NOT_FOUND",
		3: "SUCCESS",
	}
	StopContainerResponse_Code_value = map[string]int32{
		"UNSPECIFIED": 0,
		"BUSY":        1,
		"NOT_FOUND":   2,
		"SUCCESS":     3,
	}
)

func (x StopContainerResponse_Code) Enum() *StopContainerResponse_Code {
	p := new(StopContainerResponse_Code)
	*p = x
	return p
}

func (x StopContainerResponse_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopContainerResponse_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[7].Descriptor()
}

func (StopContainerResponse_Code) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[7]
}

func (x StopContainerResponse_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopContainerResponse_Code.Descriptor instead.
func (StopContainerResponse_Code) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{22, 0}
}

type UpdateError_Code int32

const (
	UpdateError_UNSPECIFIED UpdateError_Code = 0
	UpdateError_NOT_FOUND   UpdateError_Code = 1
	UpdateError_PORT_USED   UpdateError_Code = 2
	UpdateError_NOT_RUNNING UpdateError_Code = 3
	UpdateError_NOT_UPDATED UpdateError_Code = 4
	UpdateError_FAILURE     UpdateError_Code = 5
)

// Enum value maps for UpdateError_Code.
var (
	UpdateError_Code_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NOT_FOUND",
		2: "PORT_USED",
		3: "NOT_RUNNING",
		4: "NOT_UPDATED",
		5: "FAILURE",
	}
	UpdateError_Code_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NOT_FOUND":   1,
		"PORT_USED":   2,
		"NOT_RUNNING": 3,
		"NOT_UPDATED": 4,
		"FAILURE":     5,
	}
)

func (x UpdateError_Code) Enum() *UpdateError_Code {
	p := new(UpdateError_Code)
	*p = x
	return p
}

func (x UpdateError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[8].Descriptor()
}

func (UpdateError_Code) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[8]
}

func (x UpdateError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateError_Code.Descriptor instead.
func (UpdateError_Code) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{26, 0}
}

type LocalDriverOptions_Type int32

const (
	LocalDriverOptions_TYPE_UNSPECIFIED LocalDriverOptions_Type = 0
	LocalDriverOptions_TYPE_NONE        LocalDriverOptions_Type = 1
)

// Enum value maps for LocalDriverOptions_Type.
var (
	LocalDriverOptions_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_NONE",
	}
	LocalDriverOptions_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_NONE":        1,
	}
)

func (x LocalDriverOptions_Type) Enum() *LocalDriverOptions_Type {
	p := new(LocalDriverOptions_Type)
	*p = x
	return p
}

func (x LocalDriverOptions_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalDriverOptions_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[9].Descriptor()
}

func (LocalDriverOptions_Type) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes[9]
}

func (x LocalDriverOptions_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalDriverOptions_Type.Descriptor instead.
func (LocalDriverOptions_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{29, 0}
}

type DeployRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*DeployRequest_ImageTransfer
	//	*DeployRequest_Content
	//	*DeployRequest_ImageTransferEnd
	Request       isDeployRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployRequest) Reset() {
	*x = DeployRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployRequest) ProtoMessage() {}

func (x *DeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployRequest.ProtoReflect.Descriptor instead.
func (*DeployRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{0}
}

func (x *DeployRequest) GetRequest() isDeployRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DeployRequest) GetImageTransfer() *ImageTransfer {
	if x != nil {
		if x, ok := x.Request.(*DeployRequest_ImageTransfer); ok {
			return x.ImageTransfer
		}
	}
	return nil
}

func (x *DeployRequest) GetContent() []byte {
	if x != nil {
		if x, ok := x.Request.(*DeployRequest_Content); ok {
			return x.Content
		}
	}
	return nil
}

func (x *DeployRequest) GetImageTransferEnd() *ImageTransferEnd {
	if x != nil {
		if x, ok := x.Request.(*DeployRequest_ImageTransferEnd); ok {
			return x.ImageTransferEnd
		}
	}
	return nil
}

type isDeployRequest_Request interface {
	isDeployRequest_Request()
}

type DeployRequest_ImageTransfer struct {
	ImageTransfer *ImageTransfer `protobuf:"bytes,1,opt,name=image_transfer,json=imageTransfer,proto3,oneof"`
}

type DeployRequest_Content struct {
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3,oneof"`
}

type DeployRequest_ImageTransferEnd struct {
	ImageTransferEnd *ImageTransferEnd `protobuf:"bytes,3,opt,name=image_transfer_end,json=imageTransferEnd,proto3,oneof"`
}

func (*DeployRequest_ImageTransfer) isDeployRequest_Request() {}

func (*DeployRequest_Content) isDeployRequest_Request() {}

func (*DeployRequest_ImageTransferEnd) isDeployRequest_Request() {}

type ImageTransfer struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tag            string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	ImageSize      uint64                 `protobuf:"varint,3,opt,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`
	RemoteDownload *common.RemoteDownload `protobuf:"bytes,4,opt,name=remote_download,json=remoteDownload,proto3" json:"remote_download,omitempty"`
	IsPlugin       bool                   `protobuf:"varint,5,opt,name=is_plugin,json=isPlugin,proto3" json:"is_plugin,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ImageTransfer) Reset() {
	*x = ImageTransfer{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageTransfer) ProtoMessage() {}

func (x *ImageTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageTransfer.ProtoReflect.Descriptor instead.
func (*ImageTransfer) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{1}
}

func (x *ImageTransfer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageTransfer) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ImageTransfer) GetImageSize() uint64 {
	if x != nil {
		return x.ImageSize
	}
	return 0
}

func (x *ImageTransfer) GetRemoteDownload() *common.RemoteDownload {
	if x != nil {
		return x.RemoteDownload
	}
	return nil
}

func (x *ImageTransfer) GetIsPlugin() bool {
	if x != nil {
		return x.IsPlugin
	}
	return false
}

type ImageTransferEnd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageTransferEnd) Reset() {
	*x = ImageTransferEnd{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageTransferEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageTransferEnd) ProtoMessage() {}

func (x *ImageTransferEnd) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageTransferEnd.ProtoReflect.Descriptor instead.
func (*ImageTransferEnd) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{2}
}

type DeployResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*DeployResponse_ImageTransferReady
	//	*DeployResponse_ImageTransferProgress
	//	*DeployResponse_ImageTransferSuccess
	//	*DeployResponse_ImageTransferError
	Response      isDeployResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeployResponse) Reset() {
	*x = DeployResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployResponse) ProtoMessage() {}

func (x *DeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployResponse.ProtoReflect.Descriptor instead.
func (*DeployResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{3}
}

func (x *DeployResponse) GetResponse() isDeployResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DeployResponse) GetImageTransferReady() *ImageTransferReady {
	if x != nil {
		if x, ok := x.Response.(*DeployResponse_ImageTransferReady); ok {
			return x.ImageTransferReady
		}
	}
	return nil
}

func (x *DeployResponse) GetImageTransferProgress() *ImageTransferProgress {
	if x != nil {
		if x, ok := x.Response.(*DeployResponse_ImageTransferProgress); ok {
			return x.ImageTransferProgress
		}
	}
	return nil
}

func (x *DeployResponse) GetImageTransferSuccess() *ImageTransferSuccess {
	if x != nil {
		if x, ok := x.Response.(*DeployResponse_ImageTransferSuccess); ok {
			return x.ImageTransferSuccess
		}
	}
	return nil
}

func (x *DeployResponse) GetImageTransferError() *status.Status {
	if x != nil {
		if x, ok := x.Response.(*DeployResponse_ImageTransferError); ok {
			return x.ImageTransferError
		}
	}
	return nil
}

type isDeployResponse_Response interface {
	isDeployResponse_Response()
}

type DeployResponse_ImageTransferReady struct {
	ImageTransferReady *ImageTransferReady `protobuf:"bytes,1,opt,name=image_transfer_ready,json=imageTransferReady,proto3,oneof"`
}

type DeployResponse_ImageTransferProgress struct {
	ImageTransferProgress *ImageTransferProgress `protobuf:"bytes,2,opt,name=image_transfer_progress,json=imageTransferProgress,proto3,oneof"`
}

type DeployResponse_ImageTransferSuccess struct {
	ImageTransferSuccess *ImageTransferSuccess `protobuf:"bytes,3,opt,name=image_transfer_success,json=imageTransferSuccess,proto3,oneof"`
}

type DeployResponse_ImageTransferError struct {
	ImageTransferError *status.Status `protobuf:"bytes,4,opt,name=image_transfer_error,json=imageTransferError,proto3,oneof"`
}

func (*DeployResponse_ImageTransferReady) isDeployResponse_Response() {}

func (*DeployResponse_ImageTransferProgress) isDeployResponse_Response() {}

func (*DeployResponse_ImageTransferSuccess) isDeployResponse_Response() {}

func (*DeployResponse_ImageTransferError) isDeployResponse_Response() {}

type ImageTransferReady struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkSize     int32                  `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageTransferReady) Reset() {
	*x = ImageTransferReady{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageTransferReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageTransferReady) ProtoMessage() {}

func (x *ImageTransferReady) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageTransferReady.ProtoReflect.Descriptor instead.
func (*ImageTransferReady) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{4}
}

func (x *ImageTransferReady) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type ImageTransferProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BytesReceived uint64                 `protobuf:"varint,1,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageTransferProgress) Reset() {
	*x = ImageTransferProgress{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageTransferProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageTransferProgress) ProtoMessage() {}

func (x *ImageTransferProgress) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageTransferProgress.ProtoReflect.Descriptor instead.
func (*ImageTransferProgress) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{5}
}

func (x *ImageTransferProgress) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

type ImageTransferSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	ImageSize     uint64                 `protobuf:"varint,3,opt,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageTransferSuccess) Reset() {
	*x = ImageTransferSuccess{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageTransferSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageTransferSuccess) ProtoMessage() {}

func (x *ImageTransferSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageTransferSuccess.ProtoReflect.Descriptor instead.
func (*ImageTransferSuccess) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{6}
}

func (x *ImageTransferSuccess) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageTransferSuccess) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ImageTransferSuccess) GetImageSize() uint64 {
	if x != nil {
		return x.ImageSize
	}
	return 0
}

type RemoveImageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Force         bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveImageRequest) Reset() {
	*x = RemoveImageRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveImageRequest) ProtoMessage() {}

func (x *RemoveImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveImageRequest.ProtoReflect.Descriptor instead.
func (*RemoveImageRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveImageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveImageRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *RemoveImageRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RemoveImageResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Code          RemoveImageResponse_Code `protobuf:"varint,1,opt,name=code,proto3,enum=gnoi.containerz.RemoveImageResponse_Code" json:"code,omitempty"`
	Detail        string                   `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveImageResponse) Reset() {
	*x = RemoveImageResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveImageResponse) ProtoMessage() {}

func (x *RemoveImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveImageResponse.ProtoReflect.Descriptor instead.
func (*RemoveImageResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveImageResponse) GetCode() RemoveImageResponse_Code {
	if x != nil {
		return x.Code
	}
	return RemoveImageResponse_UNSPECIFIED
}

func (x *RemoveImageResponse) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type RemoveContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Force         bool                   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveContainerRequest) Reset() {
	*x = RemoveContainerRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContainerRequest) ProtoMessage() {}

func (x *RemoveContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContainerRequest.ProtoReflect.Descriptor instead.
func (*RemoveContainerRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveContainerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveContainerRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RemoveContainerResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Code          RemoveContainerResponse_Code `protobuf:"varint,1,opt,name=code,proto3,enum=gnoi.containerz.RemoveContainerResponse_Code" json:"code,omitempty"`
	Detail        string                       `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveContainerResponse) Reset() {
	*x = RemoveContainerResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveContainerResponse) ProtoMessage() {}

func (x *RemoveContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveContainerResponse.ProtoReflect.Descriptor instead.
func (*RemoveContainerResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveContainerResponse) GetCode() RemoveContainerResponse_Code {
	if x != nil {
		return x.Code
	}
	return RemoveContainerResponse_UNSPECIFIED
}

func (x *RemoveContainerResponse) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type ListImageRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Limit         int32                      `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Filter        []*ListImageRequest_Filter `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListImageRequest) Reset() {
	*x = ListImageRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageRequest) ProtoMessage() {}

func (x *ListImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageRequest.ProtoReflect.Descriptor instead.
func (*ListImageRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{11}
}

func (x *ListImageRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListImageRequest) GetFilter() []*ListImageRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListImageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ImageName     string                 `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	Tag           string                 `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListImageResponse) Reset() {
	*x = ListImageResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageResponse) ProtoMessage() {}

func (x *ListImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageResponse.ProtoReflect.Descriptor instead.
func (*ListImageResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{12}
}

func (x *ListImageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListImageResponse) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ListImageResponse) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type ListContainerRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	All           bool                           `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Limit         int32                          `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Filter        []*ListContainerRequest_Filter `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContainerRequest) Reset() {
	*x = ListContainerRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerRequest) ProtoMessage() {}

func (x *ListContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerRequest.ProtoReflect.Descriptor instead.
func (*ListContainerRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{13}
}

func (x *ListContainerRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListContainerRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListContainerRequest) GetFilter() []*ListContainerRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListContainerResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Id            string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ImageName     string                       `protobuf:"bytes,3,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	Status        ListContainerResponse_Status `protobuf:"varint,4,opt,name=status,proto3,enum=gnoi.containerz.ListContainerResponse_Status" json:"status,omitempty"`
	Labels        map[string]string            `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Hash          *types.HashType              `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContainerResponse) Reset() {
	*x = ListContainerResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerResponse) ProtoMessage() {}

func (x *ListContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerResponse.ProtoReflect.Descriptor instead.
func (*ListContainerResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{14}
}

func (x *ListContainerResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListContainerResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListContainerResponse) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ListContainerResponse) GetStatus() ListContainerResponse_Status {
	if x != nil {
		return x.Status
	}
	return ListContainerResponse_UNSPECIFIED
}

func (x *ListContainerResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListContainerResponse) GetHash() *types.HashType {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Volume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MountPoint    string                 `protobuf:"bytes,2,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,3,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{15}
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *Volume) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type Device struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SrcPath       string                 `protobuf:"bytes,1,opt,name=src_path,json=srcPath,proto3" json:"src_path,omitempty"`
	DstPath       string                 `protobuf:"bytes,2,opt,name=dst_path,json=dstPath,proto3" json:"dst_path,omitempty"`
	Permissions   []Device_Permission    `protobuf:"varint,3,rep,packed,name=permissions,proto3,enum=gnoi.containerz.Device_Permission" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{16}
}

func (x *Device) GetSrcPath() string {
	if x != nil {
		return x.SrcPath
	}
	return ""
}

func (x *Device) GetDstPath() string {
	if x != nil {
		return x.DstPath
	}
	return ""
}

func (x *Device) GetPermissions() []Device_Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type StartContainerRequest struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	ImageName     string                              `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	Tag           string                              `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Cmd           string                              `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	InstanceName  string                              `protobuf:"bytes,4,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Ports         []*StartContainerRequest_Port       `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	Environment   map[string]string                   `protobuf:"bytes,6,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Volumes       []*Volume                           `protobuf:"bytes,7,rep,name=volumes,proto3" json:"volumes,omitempty"`
	Network       string                              `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	Cap           *StartContainerRequest_Capabilities `protobuf:"bytes,9,opt,name=cap,proto3" json:"cap,omitempty"`
	Restart       *StartContainerRequest_Restart      `protobuf:"bytes,10,opt,name=restart,proto3" json:"restart,omitempty"`
	RunAs         *StartContainerRequest_RunAs        `protobuf:"bytes,11,opt,name=run_as,json=runAs,proto3" json:"run_as,omitempty"`
	Labels        map[string]string                   `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Limits        *StartContainerRequest_Limits       `protobuf:"bytes,13,opt,name=limits,proto3" json:"limits,omitempty"`
	Devices       []*Device                           `protobuf:"bytes,14,rep,name=devices,proto3" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerRequest) Reset() {
	*x = StartContainerRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest) ProtoMessage() {}

func (x *StartContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest.ProtoReflect.Descriptor instead.
func (*StartContainerRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{17}
}

func (x *StartContainerRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *StartContainerRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *StartContainerRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *StartContainerRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *StartContainerRequest) GetPorts() []*StartContainerRequest_Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *StartContainerRequest) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *StartContainerRequest) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *StartContainerRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *StartContainerRequest) GetCap() *StartContainerRequest_Capabilities {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *StartContainerRequest) GetRestart() *StartContainerRequest_Restart {
	if x != nil {
		return x.Restart
	}
	return nil
}

func (x *StartContainerRequest) GetRunAs() *StartContainerRequest_RunAs {
	if x != nil {
		return x.RunAs
	}
	return nil
}

func (x *StartContainerRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *StartContainerRequest) GetLimits() *StartContainerRequest_Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *StartContainerRequest) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type StartContainerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*StartContainerResponse_StartOk
	//	*StartContainerResponse_StartError
	Response      isStartContainerResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerResponse) Reset() {
	*x = StartContainerResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerResponse) ProtoMessage() {}

func (x *StartContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerResponse.ProtoReflect.Descriptor instead.
func (*StartContainerResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{18}
}

func (x *StartContainerResponse) GetResponse() isStartContainerResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StartContainerResponse) GetStartOk() *StartOK {
	if x != nil {
		if x, ok := x.Response.(*StartContainerResponse_StartOk); ok {
			return x.StartOk
		}
	}
	return nil
}

func (x *StartContainerResponse) GetStartError() *StartError {
	if x != nil {
		if x, ok := x.Response.(*StartContainerResponse_StartError); ok {
			return x.StartError
		}
	}
	return nil
}

type isStartContainerResponse_Response interface {
	isStartContainerResponse_Response()
}

type StartContainerResponse_StartOk struct {
	StartOk *StartOK `protobuf:"bytes,1,opt,name=start_ok,json=startOk,proto3,oneof"`
}

type StartContainerResponse_StartError struct {
	StartError *StartError `protobuf:"bytes,2,opt,name=start_error,json=startError,proto3,oneof"`
}

func (*StartContainerResponse_StartOk) isStartContainerResponse_Response() {}

func (*StartContainerResponse_StartError) isStartContainerResponse_Response() {}

type StartOK struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartOK) Reset() {
	*x = StartOK{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartOK) ProtoMessage() {}

func (x *StartOK) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartOK.ProtoReflect.Descriptor instead.
func (*StartOK) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{19}
}

func (x *StartOK) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type StartError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     StartError_Code        `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=gnoi.containerz.StartError_Code" json:"error_code,omitempty"`
	Details       string                 `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartError) Reset() {
	*x = StartError{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartError) ProtoMessage() {}

func (x *StartError) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartError.ProtoReflect.Descriptor instead.
func (*StartError) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{20}
}

func (x *StartError) GetErrorCode() StartError_Code {
	if x != nil {
		return x.ErrorCode
	}
	return StartError_UNSPECIFIED
}

func (x *StartError) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type StopContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Force         bool                   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	Restart       bool                   `protobuf:"varint,3,opt,name=restart,proto3" json:"restart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopContainerRequest) Reset() {
	*x = StopContainerRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopContainerRequest) ProtoMessage() {}

func (x *StopContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopContainerRequest.ProtoReflect.Descriptor instead.
func (*StopContainerRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{21}
}

func (x *StopContainerRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *StopContainerRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *StopContainerRequest) GetRestart() bool {
	if x != nil {
		return x.Restart
	}
	return false
}

type StopContainerResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Code          StopContainerResponse_Code `protobuf:"varint,1,opt,name=code,proto3,enum=gnoi.containerz.StopContainerResponse_Code" json:"code,omitempty"`
	Details       string                     `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopContainerResponse) Reset() {
	*x = StopContainerResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopContainerResponse) ProtoMessage() {}

func (x *StopContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopContainerResponse.ProtoReflect.Descriptor instead.
func (*StopContainerResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{22}
}

func (x *StopContainerResponse) GetCode() StopContainerResponse_Code {
	if x != nil {
		return x.Code
	}
	return StopContainerResponse_UNSPECIFIED
}

func (x *StopContainerResponse) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type UpdateContainerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	ImageName     string                 `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageTag      string                 `protobuf:"bytes,3,opt,name=image_tag,json=imageTag,proto3" json:"image_tag,omitempty"`
	Params        *StartContainerRequest `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	Async         bool                   `protobuf:"varint,5,opt,name=async,proto3" json:"async,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateContainerRequest) Reset() {
	*x = UpdateContainerRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContainerRequest) ProtoMessage() {}

func (x *UpdateContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContainerRequest.ProtoReflect.Descriptor instead.
func (*UpdateContainerRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateContainerRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *UpdateContainerRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *UpdateContainerRequest) GetImageTag() string {
	if x != nil {
		return x.ImageTag
	}
	return ""
}

func (x *UpdateContainerRequest) GetParams() *StartContainerRequest {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *UpdateContainerRequest) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

type UpdateContainerResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*UpdateContainerResponse_UpdateOk
	//	*UpdateContainerResponse_UpdateError
	Response      isUpdateContainerResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateContainerResponse) Reset() {
	*x = UpdateContainerResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContainerResponse) ProtoMessage() {}

func (x *UpdateContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContainerResponse.ProtoReflect.Descriptor instead.
func (*UpdateContainerResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateContainerResponse) GetResponse() isUpdateContainerResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateContainerResponse) GetUpdateOk() *UpdateOK {
	if x != nil {
		if x, ok := x.Response.(*UpdateContainerResponse_UpdateOk); ok {
			return x.UpdateOk
		}
	}
	return nil
}

func (x *UpdateContainerResponse) GetUpdateError() *UpdateError {
	if x != nil {
		if x, ok := x.Response.(*UpdateContainerResponse_UpdateError); ok {
			return x.UpdateError
		}
	}
	return nil
}

type isUpdateContainerResponse_Response interface {
	isUpdateContainerResponse_Response()
}

type UpdateContainerResponse_UpdateOk struct {
	UpdateOk *UpdateOK `protobuf:"bytes,1,opt,name=update_ok,json=updateOk,proto3,oneof"`
}

type UpdateContainerResponse_UpdateError struct {
	UpdateError *UpdateError `protobuf:"bytes,2,opt,name=update_error,json=updateError,proto3,oneof"`
}

func (*UpdateContainerResponse_UpdateOk) isUpdateContainerResponse_Response() {}

func (*UpdateContainerResponse_UpdateError) isUpdateContainerResponse_Response() {}

type UpdateOK struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	IsAsync       bool                   `protobuf:"varint,2,opt,name=is_async,json=isAsync,proto3" json:"is_async,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOK) Reset() {
	*x = UpdateOK{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOK) ProtoMessage() {}

func (x *UpdateOK) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOK.ProtoReflect.Descriptor instead.
func (*UpdateOK) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateOK) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *UpdateOK) GetIsAsync() bool {
	if x != nil {
		return x.IsAsync
	}
	return false
}

type UpdateError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     UpdateError_Code       `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=gnoi.containerz.UpdateError_Code" json:"error_code,omitempty"`
	Details       string                 `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateError) Reset() {
	*x = UpdateError{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateError) ProtoMessage() {}

func (x *UpdateError) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateError.ProtoReflect.Descriptor instead.
func (*UpdateError) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateError) GetErrorCode() UpdateError_Code {
	if x != nil {
		return x.ErrorCode
	}
	return UpdateError_UNSPECIFIED
}

func (x *UpdateError) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type LogRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Follow        bool                   `protobuf:"varint,2,opt,name=follow,proto3" json:"follow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{27}
}

func (x *LogRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *LogRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

type LogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           string                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{28}
}

func (x *LogResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type LocalDriverOptions struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          LocalDriverOptions_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gnoi.containerz.LocalDriverOptions_Type" json:"type,omitempty"`
	Options       []string                `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	Mountpoint    string                  `protobuf:"bytes,3,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalDriverOptions) Reset() {
	*x = LocalDriverOptions{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalDriverOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDriverOptions) ProtoMessage() {}

func (x *LocalDriverOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDriverOptions.ProtoReflect.Descriptor instead.
func (*LocalDriverOptions) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{29}
}

func (x *LocalDriverOptions) GetType() LocalDriverOptions_Type {
	if x != nil {
		return x.Type
	}
	return LocalDriverOptions_TYPE_UNSPECIFIED
}

func (x *LocalDriverOptions) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *LocalDriverOptions) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

type CustomOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Options       map[string]string      `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomOptions) Reset() {
	*x = CustomOptions{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomOptions) ProtoMessage() {}

func (x *CustomOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomOptions.ProtoReflect.Descriptor instead.
func (*CustomOptions) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{30}
}

func (x *CustomOptions) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateVolumeRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Driver Driver                 `protobuf:"varint,2,opt,name=driver,proto3,enum=gnoi.containerz.Driver" json:"driver,omitempty"`
	Labels map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to Options:
	//
	//	*CreateVolumeRequest_LocalMountOptions
	//	*CreateVolumeRequest_CustomOptions
	Options       isCreateVolumeRequest_Options `protobuf_oneof:"options"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVolumeRequest) Reset() {
	*x = CreateVolumeRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeRequest) ProtoMessage() {}

func (x *CreateVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{31}
}

func (x *CreateVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVolumeRequest) GetDriver() Driver {
	if x != nil {
		return x.Driver
	}
	return Driver_DS_UNSPECIFIED
}

func (x *CreateVolumeRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateVolumeRequest) GetOptions() isCreateVolumeRequest_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateVolumeRequest) GetLocalMountOptions() *LocalDriverOptions {
	if x != nil {
		if x, ok := x.Options.(*CreateVolumeRequest_LocalMountOptions); ok {
			return x.LocalMountOptions
		}
	}
	return nil
}

func (x *CreateVolumeRequest) GetCustomOptions() *CustomOptions {
	if x != nil {
		if x, ok := x.Options.(*CreateVolumeRequest_CustomOptions); ok {
			return x.CustomOptions
		}
	}
	return nil
}

type isCreateVolumeRequest_Options interface {
	isCreateVolumeRequest_Options()
}

type CreateVolumeRequest_LocalMountOptions struct {
	LocalMountOptions *LocalDriverOptions `protobuf:"bytes,3,opt,name=local_mount_options,json=localMountOptions,proto3,oneof"`
}

type CreateVolumeRequest_CustomOptions struct {
	CustomOptions *CustomOptions `protobuf:"bytes,5,opt,name=custom_options,json=customOptions,proto3,oneof"`
}

func (*CreateVolumeRequest_LocalMountOptions) isCreateVolumeRequest_Options() {}

func (*CreateVolumeRequest_CustomOptions) isCreateVolumeRequest_Options() {}

type CreateVolumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVolumeResponse) Reset() {
	*x = CreateVolumeResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeResponse) ProtoMessage() {}

func (x *CreateVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeResponse.ProtoReflect.Descriptor instead.
func (*CreateVolumeResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{32}
}

func (x *CreateVolumeResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RemoveVolumeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Force         bool                   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveVolumeRequest) Reset() {
	*x = RemoveVolumeRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVolumeRequest) ProtoMessage() {}

func (x *RemoveVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVolumeRequest.ProtoReflect.Descriptor instead.
func (*RemoveVolumeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{33}
}

func (x *RemoveVolumeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoveVolumeRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RemoveVolumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveVolumeResponse) Reset() {
	*x = RemoveVolumeResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVolumeResponse) ProtoMessage() {}

func (x *RemoveVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVolumeResponse.ProtoReflect.Descriptor instead.
func (*RemoveVolumeResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{34}
}

type ListVolumeRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Filter        []*ListVolumeRequest_Filter `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVolumeRequest) Reset() {
	*x = ListVolumeRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeRequest) ProtoMessage() {}

func (x *ListVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeRequest.ProtoReflect.Descriptor instead.
func (*ListVolumeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{35}
}

func (x *ListVolumeRequest) GetFilter() []*ListVolumeRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListVolumeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Created       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	Driver        string                 `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty"`
	Options       map[string]string      `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels        map[string]string      `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVolumeResponse) Reset() {
	*x = ListVolumeResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeResponse) ProtoMessage() {}

func (x *ListVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeResponse.ProtoReflect.Descriptor instead.
func (*ListVolumeResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{36}
}

func (x *ListVolumeResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListVolumeResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ListVolumeResponse) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *ListVolumeResponse) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ListVolumeResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type StartPluginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	InstanceName  string                 `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Config        string                 `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartPluginRequest) Reset() {
	*x = StartPluginRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPluginRequest) ProtoMessage() {}

func (x *StartPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPluginRequest.ProtoReflect.Descriptor instead.
func (*StartPluginRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{37}
}

func (x *StartPluginRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartPluginRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *StartPluginRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type StartPluginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartPluginResponse) Reset() {
	*x = StartPluginResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPluginResponse) ProtoMessage() {}

func (x *StartPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPluginResponse.ProtoReflect.Descriptor instead.
func (*StartPluginResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{38}
}

func (x *StartPluginResponse) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type StopPluginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopPluginRequest) Reset() {
	*x = StopPluginRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPluginRequest) ProtoMessage() {}

func (x *StopPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPluginRequest.ProtoReflect.Descriptor instead.
func (*StopPluginRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{39}
}

func (x *StopPluginRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type StopPluginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopPluginResponse) Reset() {
	*x = StopPluginResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPluginResponse) ProtoMessage() {}

func (x *StopPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPluginResponse.ProtoReflect.Descriptor instead.
func (*StopPluginResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{40}
}

type ListPluginsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPluginsRequest) Reset() {
	*x = ListPluginsRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginsRequest) ProtoMessage() {}

func (x *ListPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginsRequest.ProtoReflect.Descriptor instead.
func (*ListPluginsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{41}
}

func (x *ListPluginsRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type Plugin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InstanceName  string                 `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	Hash          *types.HashType        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Config        string                 `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Plugin) Reset() {
	*x = Plugin{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin) ProtoMessage() {}

func (x *Plugin) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin.ProtoReflect.Descriptor instead.
func (*Plugin) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{42}
}

func (x *Plugin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plugin) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *Plugin) GetHash() *types.HashType {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Plugin) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type ListPluginsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Plugins       []*Plugin              `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPluginsResponse) Reset() {
	*x = ListPluginsResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginsResponse) ProtoMessage() {}

func (x *ListPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginsResponse.ProtoReflect.Descriptor instead.
func (*ListPluginsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{43}
}

func (x *ListPluginsResponse) GetPlugins() []*Plugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type RemovePluginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceName  string                 `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePluginRequest) Reset() {
	*x = RemovePluginRequest{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePluginRequest) ProtoMessage() {}

func (x *RemovePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePluginRequest.ProtoReflect.Descriptor instead.
func (*RemovePluginRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{44}
}

func (x *RemovePluginRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

type RemovePluginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePluginResponse) Reset() {
	*x = RemovePluginResponse{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePluginResponse) ProtoMessage() {}

func (x *RemovePluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePluginResponse.ProtoReflect.Descriptor instead.
func (*RemovePluginResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{45}
}

type ListImageRequest_Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []string               `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListImageRequest_Filter) Reset() {
	*x = ListImageRequest_Filter{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImageRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageRequest_Filter) ProtoMessage() {}

func (x *ListImageRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListImageRequest_Filter) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListImageRequest_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListImageRequest_Filter) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ListContainerRequest_Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []string               `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContainerRequest_Filter) Reset() {
	*x = ListContainerRequest_Filter{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContainerRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerRequest_Filter) ProtoMessage() {}

func (x *ListContainerRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListContainerRequest_Filter) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListContainerRequest_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListContainerRequest_Filter) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type StartContainerRequest_Port struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Internal      uint32                 `protobuf:"varint,1,opt,name=internal,proto3" json:"internal,omitempty"`
	External      uint32                 `protobuf:"varint,2,opt,name=external,proto3" json:"external,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerRequest_Port) Reset() {
	*x = StartContainerRequest_Port{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerRequest_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest_Port) ProtoMessage() {}

func (x *StartContainerRequest_Port) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest_Port.ProtoReflect.Descriptor instead.
func (*StartContainerRequest_Port) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{17, 0}
}

func (x *StartContainerRequest_Port) GetInternal() uint32 {
	if x != nil {
		return x.Internal
	}
	return 0
}

func (x *StartContainerRequest_Port) GetExternal() uint32 {
	if x != nil {
		return x.External
	}
	return 0
}

type StartContainerRequest_Capabilities struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Add           []string               `protobuf:"bytes,1,rep,name=add,proto3" json:"add,omitempty"`
	Remove        []string               `protobuf:"bytes,2,rep,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerRequest_Capabilities) Reset() {
	*x = StartContainerRequest_Capabilities{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerRequest_Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest_Capabilities) ProtoMessage() {}

func (x *StartContainerRequest_Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest_Capabilities.ProtoReflect.Descriptor instead.
func (*StartContainerRequest_Capabilities) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{17, 2}
}

func (x *StartContainerRequest_Capabilities) GetAdd() []string {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *StartContainerRequest_Capabilities) GetRemove() []string {
	if x != nil {
		return x.Remove
	}
	return nil
}

type StartContainerRequest_Restart struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Policy        StartContainerRequest_Restart_Policy `protobuf:"varint,1,opt,name=policy,proto3,enum=gnoi.containerz.StartContainerRequest_Restart_Policy" json:"policy,omitempty"`
	Attempts      uint32                               `protobuf:"varint,2,opt,name=attempts,proto3" json:"attempts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerRequest_Restart) Reset() {
	*x = StartContainerRequest_Restart{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerRequest_Restart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest_Restart) ProtoMessage() {}

func (x *StartContainerRequest_Restart) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest_Restart.ProtoReflect.Descriptor instead.
func (*StartContainerRequest_Restart) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{17, 3}
}

func (x *StartContainerRequest_Restart) GetPolicy() StartContainerRequest_Restart_Policy {
	if x != nil {
		return x.Policy
	}
	return StartContainerRequest_Restart_NONE
}

func (x *StartContainerRequest_Restart) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

type StartContainerRequest_RunAs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Group         string                 `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerRequest_RunAs) Reset() {
	*x = StartContainerRequest_RunAs{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerRequest_RunAs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest_RunAs) ProtoMessage() {}

func (x *StartContainerRequest_RunAs) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest_RunAs.ProtoReflect.Descriptor instead.
func (*StartContainerRequest_RunAs) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{17, 4}
}

func (x *StartContainerRequest_RunAs) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *StartContainerRequest_RunAs) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type StartContainerRequest_Limits struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxCpu        float64                `protobuf:"fixed64,1,opt,name=max_cpu,json=maxCpu,proto3" json:"max_cpu,omitempty"`
	SoftMemBytes  int64                  `protobuf:"varint,2,opt,name=soft_mem_bytes,json=softMemBytes,proto3" json:"soft_mem_bytes,omitempty"`
	HardMemBytes  int64                  `protobuf:"varint,3,opt,name=hard_mem_bytes,json=hardMemBytes,proto3" json:"hard_mem_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartContainerRequest_Limits) Reset() {
	*x = StartContainerRequest_Limits{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartContainerRequest_Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartContainerRequest_Limits) ProtoMessage() {}

func (x *StartContainerRequest_Limits) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartContainerRequest_Limits.ProtoReflect.Descriptor instead.
func (*StartContainerRequest_Limits) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{17, 6}
}

func (x *StartContainerRequest_Limits) GetMaxCpu() float64 {
	if x != nil {
		return x.MaxCpu
	}
	return 0
}

func (x *StartContainerRequest_Limits) GetSoftMemBytes() int64 {
	if x != nil {
		return x.SoftMemBytes
	}
	return 0
}

func (x *StartContainerRequest_Limits) GetHardMemBytes() int64 {
	if x != nil {
		return x.HardMemBytes
	}
	return 0
}

type ListVolumeRequest_Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []string               `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVolumeRequest_Filter) Reset() {
	*x = ListVolumeRequest_Filter{}
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVolumeRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeRequest_Filter) ProtoMessage() {}

func (x *ListVolumeRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListVolumeRequest_Filter) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP(), []int{35, 0}
}

func (x *ListVolumeRequest_Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListVolumeRequest_Filter) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_github_com_openconfig_gnoi_containerz_containerz_proto protoreflect.FileDescriptor

var file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x22, 0x12, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x12, 0x60, 0x0a, 0x17, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x46, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3e, 0x0a, 0x15, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x14, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x7a, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x4d, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x22, 0x48, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x40, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22,
	0xb6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x44, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x22, 0x5a,
	0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xc3, 0x01, 0x0a, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x7a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x3d, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4b, 0x4e, 0x4f, 0x44, 0x10, 0x03,
	0x22, 0xd8, 0x0a, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x45, 0x0a,
	0x03, 0x63, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x03, 0x63, 0x61, 0x70, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x43,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x41, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x45, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0c, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x4d, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x06, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x31,
	0x0a, 0x05, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x06,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x4d, 0x65, 0x6d,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x65,
	0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68,
	0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x16,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x4b, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6b, 0x12, 0x3e, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x4b, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x42, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x22, 0x6b, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x3d, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x4b, 0x48, 0x00, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6b,
	0x12, 0x41, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x4b, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x22, 0xcf, 0x01, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x64, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x22, 0x49, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x1f, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x03, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x55, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x7a, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x30, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x3a, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x38, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x6f,
	0x70, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x06, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x48, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x39, 0x0a, 0x06, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x53, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x53, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x10, 0x02, 0x32, 0xdb, 0x0b, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x12, 0x4f, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x1e, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0b,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x7a, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x53, 0x74, 0x6f,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x27,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x1b, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x7a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x12, 0x23, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x7a, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x7a, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x2f, 0xd2, 0x3e, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x32, 0x5a, 0x25, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescOnce sync.Once
	file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescData = file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDesc
)

func file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescGZIP() []byte {
	file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescOnce.Do(func() {
		file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescData)
	})
	return file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDescData
}

var file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_github_com_openconfig_gnoi_containerz_containerz_proto_goTypes = []any{
	(Driver)(0),                                // 0: gnoi.containerz.Driver
	(RemoveImageResponse_Code)(0),              // 1: gnoi.containerz.RemoveImageResponse.Code
	(RemoveContainerResponse_Code)(0),          // 2: gnoi.containerz.RemoveContainerResponse.Code
	(ListContainerResponse_Status)(0),          // 3: gnoi.containerz.ListContainerResponse.Status
	(Device_Permission)(0),                     // 4: gnoi.containerz.Device.Permission
	(StartContainerRequest_Restart_Policy)(0),  // 5: gnoi.containerz.StartContainerRequest.Restart.Policy
	(StartError_Code)(0),                       // 6: gnoi.containerz.StartError.Code
	(StopContainerResponse_Code)(0),            // 7: gnoi.containerz.StopContainerResponse.Code
	(UpdateError_Code)(0),                      // 8: gnoi.containerz.UpdateError.Code
	(LocalDriverOptions_Type)(0),               // 9: gnoi.containerz.LocalDriverOptions.Type
	(*DeployRequest)(nil),                      // 10: gnoi.containerz.DeployRequest
	(*ImageTransfer)(nil),                      // 11: gnoi.containerz.ImageTransfer
	(*ImageTransferEnd)(nil),                   // 12: gnoi.containerz.ImageTransferEnd
	(*DeployResponse)(nil),                     // 13: gnoi.containerz.DeployResponse
	(*ImageTransferReady)(nil),                 // 14: gnoi.containerz.ImageTransferReady
	(*ImageTransferProgress)(nil),              // 15: gnoi.containerz.ImageTransferProgress
	(*ImageTransferSuccess)(nil),               // 16: gnoi.containerz.ImageTransferSuccess
	(*RemoveImageRequest)(nil),                 // 17: gnoi.containerz.RemoveImageRequest
	(*RemoveImageResponse)(nil),                // 18: gnoi.containerz.RemoveImageResponse
	(*RemoveContainerRequest)(nil),             // 19: gnoi.containerz.RemoveContainerRequest
	(*RemoveContainerResponse)(nil),            // 20: gnoi.containerz.RemoveContainerResponse
	(*ListImageRequest)(nil),                   // 21: gnoi.containerz.ListImageRequest
	(*ListImageResponse)(nil),                  // 22: gnoi.containerz.ListImageResponse
	(*ListContainerRequest)(nil),               // 23: gnoi.containerz.ListContainerRequest
	(*ListContainerResponse)(nil),              // 24: gnoi.containerz.ListContainerResponse
	(*Volume)(nil),                             // 25: gnoi.containerz.Volume
	(*Device)(nil),                             // 26: gnoi.containerz.Device
	(*StartContainerRequest)(nil),              // 27: gnoi.containerz.StartContainerRequest
	(*StartContainerResponse)(nil),             // 28: gnoi.containerz.StartContainerResponse
	(*StartOK)(nil),                            // 29: gnoi.containerz.StartOK
	(*StartError)(nil),                         // 30: gnoi.containerz.StartError
	(*StopContainerRequest)(nil),               // 31: gnoi.containerz.StopContainerRequest
	(*StopContainerResponse)(nil),              // 32: gnoi.containerz.StopContainerResponse
	(*UpdateContainerRequest)(nil),             // 33: gnoi.containerz.UpdateContainerRequest
	(*UpdateContainerResponse)(nil),            // 34: gnoi.containerz.UpdateContainerResponse
	(*UpdateOK)(nil),                           // 35: gnoi.containerz.UpdateOK
	(*UpdateError)(nil),                        // 36: gnoi.containerz.UpdateError
	(*LogRequest)(nil),                         // 37: gnoi.containerz.LogRequest
	(*LogResponse)(nil),                        // 38: gnoi.containerz.LogResponse
	(*LocalDriverOptions)(nil),                 // 39: gnoi.containerz.LocalDriverOptions
	(*CustomOptions)(nil),                      // 40: gnoi.containerz.CustomOptions
	(*CreateVolumeRequest)(nil),                // 41: gnoi.containerz.CreateVolumeRequest
	(*CreateVolumeResponse)(nil),               // 42: gnoi.containerz.CreateVolumeResponse
	(*RemoveVolumeRequest)(nil),                // 43: gnoi.containerz.RemoveVolumeRequest
	(*RemoveVolumeResponse)(nil),               // 44: gnoi.containerz.RemoveVolumeResponse
	(*ListVolumeRequest)(nil),                  // 45: gnoi.containerz.ListVolumeRequest
	(*ListVolumeResponse)(nil),                 // 46: gnoi.containerz.ListVolumeResponse
	(*StartPluginRequest)(nil),                 // 47: gnoi.containerz.StartPluginRequest
	(*StartPluginResponse)(nil),                // 48: gnoi.containerz.StartPluginResponse
	(*StopPluginRequest)(nil),                  // 49: gnoi.containerz.StopPluginRequest
	(*StopPluginResponse)(nil),                 // 50: gnoi.containerz.StopPluginResponse
	(*ListPluginsRequest)(nil),                 // 51: gnoi.containerz.ListPluginsRequest
	(*Plugin)(nil),                             // 52: gnoi.containerz.Plugin
	(*ListPluginsResponse)(nil),                // 53: gnoi.containerz.ListPluginsResponse
	(*RemovePluginRequest)(nil),                // 54: gnoi.containerz.RemovePluginRequest
	(*RemovePluginResponse)(nil),               // 55: gnoi.containerz.RemovePluginResponse
	(*ListImageRequest_Filter)(nil),            // 56: gnoi.containerz.ListImageRequest.Filter
	(*ListContainerRequest_Filter)(nil),        // 57: gnoi.containerz.ListContainerRequest.Filter
	nil,                                        // 58: gnoi.containerz.ListContainerResponse.LabelsEntry
	(*StartContainerRequest_Port)(nil),         // 59: gnoi.containerz.StartContainerRequest.Port
	nil,                                        // 60: gnoi.containerz.StartContainerRequest.EnvironmentEntry
	(*StartContainerRequest_Capabilities)(nil), // 61: gnoi.containerz.StartContainerRequest.Capabilities
	(*StartContainerRequest_Restart)(nil),      // 62: gnoi.containerz.StartContainerRequest.Restart
	(*StartContainerRequest_RunAs)(nil),        // 63: gnoi.containerz.StartContainerRequest.RunAs
	nil,                                        // 64: gnoi.containerz.StartContainerRequest.LabelsEntry
	(*StartContainerRequest_Limits)(nil),       // 65: gnoi.containerz.StartContainerRequest.Limits
	nil,                                        // 66: gnoi.containerz.CustomOptions.OptionsEntry
	nil,                                        // 67: gnoi.containerz.CreateVolumeRequest.LabelsEntry
	(*ListVolumeRequest_Filter)(nil),           // 68: gnoi.containerz.ListVolumeRequest.Filter
	nil,                                        // 69: gnoi.containerz.ListVolumeResponse.OptionsEntry
	nil,                                        // 70: gnoi.containerz.ListVolumeResponse.LabelsEntry
	(*common.RemoteDownload)(nil),              // 71: gnoi.common.RemoteDownload
	(*status.Status)(nil),                      // 72: google.rpc.Status
	(*types.HashType)(nil),                     // 73: gnoi.types.HashType
	(*timestamppb.Timestamp)(nil),              // 74: google.protobuf.Timestamp
}
var file_github_com_openconfig_gnoi_containerz_containerz_proto_depIdxs = []int32{
	11, // 0: gnoi.containerz.DeployRequest.image_transfer:type_name -> gnoi.containerz.ImageTransfer
	12, // 1: gnoi.containerz.DeployRequest.image_transfer_end:type_name -> gnoi.containerz.ImageTransferEnd
	71, // 2: gnoi.containerz.ImageTransfer.remote_download:type_name -> gnoi.common.RemoteDownload
	14, // 3: gnoi.containerz.DeployResponse.image_transfer_ready:type_name -> gnoi.containerz.ImageTransferReady
	15, // 4: gnoi.containerz.DeployResponse.image_transfer_progress:type_name -> gnoi.containerz.ImageTransferProgress
	16, // 5: gnoi.containerz.DeployResponse.image_transfer_success:type_name -> gnoi.containerz.ImageTransferSuccess
	72, // 6: gnoi.containerz.DeployResponse.image_transfer_error:type_name -> google.rpc.Status
	1,  // 7: gnoi.containerz.RemoveImageResponse.code:type_name -> gnoi.containerz.RemoveImageResponse.Code
	2,  // 8: gnoi.containerz.RemoveContainerResponse.code:type_name -> gnoi.containerz.RemoveContainerResponse.Code
	56, // 9: gnoi.containerz.ListImageRequest.filter:type_name -> gnoi.containerz.ListImageRequest.Filter
	57, // 10: gnoi.containerz.ListContainerRequest.filter:type_name -> gnoi.containerz.ListContainerRequest.Filter
	3,  // 11: gnoi.containerz.ListContainerResponse.status:type_name -> gnoi.containerz.ListContainerResponse.Status
	58, // 12: gnoi.containerz.ListContainerResponse.labels:type_name -> gnoi.containerz.ListContainerResponse.LabelsEntry
	73, // 13: gnoi.containerz.ListContainerResponse.hash:type_name -> gnoi.types.HashType
	4,  // 14: gnoi.containerz.Device.permissions:type_name -> gnoi.containerz.Device.Permission
	59, // 15: gnoi.containerz.StartContainerRequest.ports:type_name -> gnoi.containerz.StartContainerRequest.Port
	60, // 16: gnoi.containerz.StartContainerRequest.environment:type_name -> gnoi.containerz.StartContainerRequest.EnvironmentEntry
	25, // 17: gnoi.containerz.StartContainerRequest.volumes:type_name -> gnoi.containerz.Volume
	61, // 18: gnoi.containerz.StartContainerRequest.cap:type_name -> gnoi.containerz.StartContainerRequest.Capabilities
	62, // 19: gnoi.containerz.StartContainerRequest.restart:type_name -> gnoi.containerz.StartContainerRequest.Restart
	63, // 20: gnoi.containerz.StartContainerRequest.run_as:type_name -> gnoi.containerz.StartContainerRequest.RunAs
	64, // 21: gnoi.containerz.StartContainerRequest.labels:type_name -> gnoi.containerz.StartContainerRequest.LabelsEntry
	65, // 22: gnoi.containerz.StartContainerRequest.limits:type_name -> gnoi.containerz.StartContainerRequest.Limits
	26, // 23: gnoi.containerz.StartContainerRequest.devices:type_name -> gnoi.containerz.Device
	29, // 24: gnoi.containerz.StartContainerResponse.start_ok:type_name -> gnoi.containerz.StartOK
	30, // 25: gnoi.containerz.StartContainerResponse.start_error:type_name -> gnoi.containerz.StartError
	6,  // 26: gnoi.containerz.StartError.error_code:type_name -> gnoi.containerz.StartError.Code
	7,  // 27: gnoi.containerz.StopContainerResponse.code:type_name -> gnoi.containerz.StopContainerResponse.Code
	27, // 28: gnoi.containerz.UpdateContainerRequest.params:type_name -> gnoi.containerz.StartContainerRequest
	35, // 29: gnoi.containerz.UpdateContainerResponse.update_ok:type_name -> gnoi.containerz.UpdateOK
	36, // 30: gnoi.containerz.UpdateContainerResponse.update_error:type_name -> gnoi.containerz.UpdateError
	8,  // 31: gnoi.containerz.UpdateError.error_code:type_name -> gnoi.containerz.UpdateError.Code
	9,  // 32: gnoi.containerz.LocalDriverOptions.type:type_name -> gnoi.containerz.LocalDriverOptions.Type
	66, // 33: gnoi.containerz.CustomOptions.options:type_name -> gnoi.containerz.CustomOptions.OptionsEntry
	0,  // 34: gnoi.containerz.CreateVolumeRequest.driver:type_name -> gnoi.containerz.Driver
	67, // 35: gnoi.containerz.CreateVolumeRequest.labels:type_name -> gnoi.containerz.CreateVolumeRequest.LabelsEntry
	39, // 36: gnoi.containerz.CreateVolumeRequest.local_mount_options:type_name -> gnoi.containerz.LocalDriverOptions
	40, // 37: gnoi.containerz.CreateVolumeRequest.custom_options:type_name -> gnoi.containerz.CustomOptions
	68, // 38: gnoi.containerz.ListVolumeRequest.filter:type_name -> gnoi.containerz.ListVolumeRequest.Filter
	74, // 39: gnoi.containerz.ListVolumeResponse.created:type_name -> google.protobuf.Timestamp
	69, // 40: gnoi.containerz.ListVolumeResponse.options:type_name -> gnoi.containerz.ListVolumeResponse.OptionsEntry
	70, // 41: gnoi.containerz.ListVolumeResponse.labels:type_name -> gnoi.containerz.ListVolumeResponse.LabelsEntry
	73, // 42: gnoi.containerz.Plugin.hash:type_name -> gnoi.types.HashType
	52, // 43: gnoi.containerz.ListPluginsResponse.plugins:type_name -> gnoi.containerz.Plugin
	5,  // 44: gnoi.containerz.StartContainerRequest.Restart.policy:type_name -> gnoi.containerz.StartContainerRequest.Restart.Policy
	10, // 45: gnoi.containerz.Containerz.Deploy:input_type -> gnoi.containerz.DeployRequest
	21, // 46: gnoi.containerz.Containerz.ListImage:input_type -> gnoi.containerz.ListImageRequest
	17, // 47: gnoi.containerz.Containerz.RemoveImage:input_type -> gnoi.containerz.RemoveImageRequest
	19, // 48: gnoi.containerz.Containerz.RemoveContainer:input_type -> gnoi.containerz.RemoveContainerRequest
	23, // 49: gnoi.containerz.Containerz.ListContainer:input_type -> gnoi.containerz.ListContainerRequest
	27, // 50: gnoi.containerz.Containerz.StartContainer:input_type -> gnoi.containerz.StartContainerRequest
	31, // 51: gnoi.containerz.Containerz.StopContainer:input_type -> gnoi.containerz.StopContainerRequest
	33, // 52: gnoi.containerz.Containerz.UpdateContainer:input_type -> gnoi.containerz.UpdateContainerRequest
	37, // 53: gnoi.containerz.Containerz.Log:input_type -> gnoi.containerz.LogRequest
	41, // 54: gnoi.containerz.Containerz.CreateVolume:input_type -> gnoi.containerz.CreateVolumeRequest
	43, // 55: gnoi.containerz.Containerz.RemoveVolume:input_type -> gnoi.containerz.RemoveVolumeRequest
	45, // 56: gnoi.containerz.Containerz.ListVolume:input_type -> gnoi.containerz.ListVolumeRequest
	47, // 57: gnoi.containerz.Containerz.StartPlugin:input_type -> gnoi.containerz.StartPluginRequest
	49, // 58: gnoi.containerz.Containerz.StopPlugin:input_type -> gnoi.containerz.StopPluginRequest
	51, // 59: gnoi.containerz.Containerz.ListPlugins:input_type -> gnoi.containerz.ListPluginsRequest
	54, // 60: gnoi.containerz.Containerz.RemovePlugin:input_type -> gnoi.containerz.RemovePluginRequest
	13, // 61: gnoi.containerz.Containerz.Deploy:output_type -> gnoi.containerz.DeployResponse
	22, // 62: gnoi.containerz.Containerz.ListImage:output_type -> gnoi.containerz.ListImageResponse
	18, // 63: gnoi.containerz.Containerz.RemoveImage:output_type -> gnoi.containerz.RemoveImageResponse
	20, // 64: gnoi.containerz.Containerz.RemoveContainer:output_type -> gnoi.containerz.RemoveContainerResponse
	24, // 65: gnoi.containerz.Containerz.ListContainer:output_type -> gnoi.containerz.ListContainerResponse
	28, // 66: gnoi.containerz.Containerz.StartContainer:output_type -> gnoi.containerz.StartContainerResponse
	32, // 67: gnoi.containerz.Containerz.StopContainer:output_type -> gnoi.containerz.StopContainerResponse
	34, // 68: gnoi.containerz.Containerz.UpdateContainer:output_type -> gnoi.containerz.UpdateContainerResponse
	38, // 69: gnoi.containerz.Containerz.Log:output_type -> gnoi.containerz.LogResponse
	42, // 70: gnoi.containerz.Containerz.CreateVolume:output_type -> gnoi.containerz.CreateVolumeResponse
	44, // 71: gnoi.containerz.Containerz.RemoveVolume:output_type -> gnoi.containerz.RemoveVolumeResponse
	46, // 72: gnoi.containerz.Containerz.ListVolume:output_type -> gnoi.containerz.ListVolumeResponse
	48, // 73: gnoi.containerz.Containerz.StartPlugin:output_type -> gnoi.containerz.StartPluginResponse
	50, // 74: gnoi.containerz.Containerz.StopPlugin:output_type -> gnoi.containerz.StopPluginResponse
	53, // 75: gnoi.containerz.Containerz.ListPlugins:output_type -> gnoi.containerz.ListPluginsResponse
	55, // 76: gnoi.containerz.Containerz.RemovePlugin:output_type -> gnoi.containerz.RemovePluginResponse
	61, // [61:77] is the sub-list for method output_type
	45, // [45:61] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_github_com_openconfig_gnoi_containerz_containerz_proto_init() }
func file_github_com_openconfig_gnoi_containerz_containerz_proto_init() {
	if File_github_com_openconfig_gnoi_containerz_containerz_proto != nil {
		return
	}
	file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[0].OneofWrappers = []any{
		(*DeployRequest_ImageTransfer)(nil),
		(*DeployRequest_Content)(nil),
		(*DeployRequest_ImageTransferEnd)(nil),
	}
	file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[3].OneofWrappers = []any{
		(*DeployResponse_ImageTransferReady)(nil),
		(*DeployResponse_ImageTransferProgress)(nil),
		(*DeployResponse_ImageTransferSuccess)(nil),
		(*DeployResponse_ImageTransferError)(nil),
	}
	file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[18].OneofWrappers = []any{
		(*StartContainerResponse_StartOk)(nil),
		(*StartContainerResponse_StartError)(nil),
	}
	file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[24].OneofWrappers = []any{
		(*UpdateContainerResponse_UpdateOk)(nil),
		(*UpdateContainerResponse_UpdateError)(nil),
	}
	file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes[31].OneofWrappers = []any{
		(*CreateVolumeRequest_LocalMountOptions)(nil),
		(*CreateVolumeRequest_CustomOptions)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openconfig_gnoi_containerz_containerz_proto_goTypes,
		DependencyIndexes: file_github_com_openconfig_gnoi_containerz_containerz_proto_depIdxs,
		EnumInfos:         file_github_com_openconfig_gnoi_containerz_containerz_proto_enumTypes,
		MessageInfos:      file_github_com_openconfig_gnoi_containerz_containerz_proto_msgTypes,
	}.Build()
	File_github_com_openconfig_gnoi_containerz_containerz_proto = out.File
	file_github_com_openconfig_gnoi_containerz_containerz_proto_rawDesc = nil
	file_github_com_openconfig_gnoi_containerz_containerz_proto_goTypes = nil
	file_github_com_openconfig_gnoi_containerz_containerz_proto_depIdxs = nil
}
