// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: github.com/openconfig/gnoi/system/system.proto

package system

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	System_Ping_FullMethodName                   = "/gnoi.system.System/Ping"
	System_Traceroute_FullMethodName             = "/gnoi.system.System/Traceroute"
	System_Time_FullMethodName                   = "/gnoi.system.System/Time"
	System_SetPackage_FullMethodName             = "/gnoi.system.System/SetPackage"
	System_SwitchControlProcessor_FullMethodName = "/gnoi.system.System/SwitchControlProcessor"
	System_Reboot_FullMethodName                 = "/gnoi.system.System/Reboot"
	System_RebootStatus_FullMethodName           = "/gnoi.system.System/RebootStatus"
	System_CancelReboot_FullMethodName           = "/gnoi.system.System/CancelReboot"
	System_KillProcess_FullMethodName            = "/gnoi.system.System/KillProcess"
)

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PingResponse], error)
	Traceroute(ctx context.Context, in *TracerouteRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TracerouteResponse], error)
	Time(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeResponse, error)
	SetPackage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetPackageRequest, SetPackageResponse], error)
	SwitchControlProcessor(ctx context.Context, in *SwitchControlProcessorRequest, opts ...grpc.CallOption) (*SwitchControlProcessorResponse, error)
	Reboot(ctx context.Context, in *RebootRequest, opts ...grpc.CallOption) (*RebootResponse, error)
	RebootStatus(ctx context.Context, in *RebootStatusRequest, opts ...grpc.CallOption) (*RebootStatusResponse, error)
	CancelReboot(ctx context.Context, in *CancelRebootRequest, opts ...grpc.CallOption) (*CancelRebootResponse, error)
	KillProcess(ctx context.Context, in *KillProcessRequest, opts ...grpc.CallOption) (*KillProcessResponse, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &System_ServiceDesc.Streams[0], System_Ping_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PingRequest, PingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type System_PingClient = grpc.ServerStreamingClient[PingResponse]

func (c *systemClient) Traceroute(ctx context.Context, in *TracerouteRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TracerouteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &System_ServiceDesc.Streams[1], System_Traceroute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TracerouteRequest, TracerouteResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type System_TracerouteClient = grpc.ServerStreamingClient[TracerouteResponse]

func (c *systemClient) Time(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, System_Time_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SetPackage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetPackageRequest, SetPackageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &System_ServiceDesc.Streams[2], System_SetPackage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SetPackageRequest, SetPackageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type System_SetPackageClient = grpc.ClientStreamingClient[SetPackageRequest, SetPackageResponse]

func (c *systemClient) SwitchControlProcessor(ctx context.Context, in *SwitchControlProcessorRequest, opts ...grpc.CallOption) (*SwitchControlProcessorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwitchControlProcessorResponse)
	err := c.cc.Invoke(ctx, System_SwitchControlProcessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) Reboot(ctx context.Context, in *RebootRequest, opts ...grpc.CallOption) (*RebootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebootResponse)
	err := c.cc.Invoke(ctx, System_Reboot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RebootStatus(ctx context.Context, in *RebootStatusRequest, opts ...grpc.CallOption) (*RebootStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebootStatusResponse)
	err := c.cc.Invoke(ctx, System_RebootStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CancelReboot(ctx context.Context, in *CancelRebootRequest, opts ...grpc.CallOption) (*CancelRebootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelRebootResponse)
	err := c.cc.Invoke(ctx, System_CancelReboot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) KillProcess(ctx context.Context, in *KillProcessRequest, opts ...grpc.CallOption) (*KillProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KillProcessResponse)
	err := c.cc.Invoke(ctx, System_KillProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations should embed UnimplementedSystemServer
// for forward compatibility.
type SystemServer interface {
	Ping(*PingRequest, grpc.ServerStreamingServer[PingResponse]) error
	Traceroute(*TracerouteRequest, grpc.ServerStreamingServer[TracerouteResponse]) error
	Time(context.Context, *TimeRequest) (*TimeResponse, error)
	SetPackage(grpc.ClientStreamingServer[SetPackageRequest, SetPackageResponse]) error
	SwitchControlProcessor(context.Context, *SwitchControlProcessorRequest) (*SwitchControlProcessorResponse, error)
	Reboot(context.Context, *RebootRequest) (*RebootResponse, error)
	RebootStatus(context.Context, *RebootStatusRequest) (*RebootStatusResponse, error)
	CancelReboot(context.Context, *CancelRebootRequest) (*CancelRebootResponse, error)
	KillProcess(context.Context, *KillProcessRequest) (*KillProcessResponse, error)
}

// UnimplementedSystemServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemServer struct{}

func (UnimplementedSystemServer) Ping(*PingRequest, grpc.ServerStreamingServer[PingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSystemServer) Traceroute(*TracerouteRequest, grpc.ServerStreamingServer[TracerouteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Traceroute not implemented")
}
func (UnimplementedSystemServer) Time(context.Context, *TimeRequest) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Time not implemented")
}
func (UnimplementedSystemServer) SetPackage(grpc.ClientStreamingServer[SetPackageRequest, SetPackageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SetPackage not implemented")
}
func (UnimplementedSystemServer) SwitchControlProcessor(context.Context, *SwitchControlProcessorRequest) (*SwitchControlProcessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchControlProcessor not implemented")
}
func (UnimplementedSystemServer) Reboot(context.Context, *RebootRequest) (*RebootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reboot not implemented")
}
func (UnimplementedSystemServer) RebootStatus(context.Context, *RebootStatusRequest) (*RebootStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootStatus not implemented")
}
func (UnimplementedSystemServer) CancelReboot(context.Context, *CancelRebootRequest) (*CancelRebootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReboot not implemented")
}
func (UnimplementedSystemServer) KillProcess(context.Context, *KillProcessRequest) (*KillProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillProcess not implemented")
}
func (UnimplementedSystemServer) testEmbeddedByValue() {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	// If the following call pancis, it indicates UnimplementedSystemServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemServer).Ping(m, &grpc.GenericServerStream[PingRequest, PingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type System_PingServer = grpc.ServerStreamingServer[PingResponse]

func _System_Traceroute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TracerouteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemServer).Traceroute(m, &grpc.GenericServerStream[TracerouteRequest, TracerouteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type System_TracerouteServer = grpc.ServerStreamingServer[TracerouteResponse]

func _System_Time_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).Time(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_Time_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).Time(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SetPackage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SystemServer).SetPackage(&grpc.GenericServerStream[SetPackageRequest, SetPackageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type System_SetPackageServer = grpc.ClientStreamingServer[SetPackageRequest, SetPackageResponse]

func _System_SwitchControlProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchControlProcessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SwitchControlProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_SwitchControlProcessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SwitchControlProcessor(ctx, req.(*SwitchControlProcessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_Reboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).Reboot(ctx, req.(*RebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RebootStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RebootStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_RebootStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RebootStatus(ctx, req.(*RebootStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CancelReboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CancelReboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CancelReboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CancelReboot(ctx, req.(*CancelRebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_KillProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).KillProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_KillProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).KillProcess(ctx, req.(*KillProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.system.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Time",
			Handler:    _System_Time_Handler,
		},
		{
			MethodName: "SwitchControlProcessor",
			Handler:    _System_SwitchControlProcessor_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _System_Reboot_Handler,
		},
		{
			MethodName: "RebootStatus",
			Handler:    _System_RebootStatus_Handler,
		},
		{
			MethodName: "CancelReboot",
			Handler:    _System_CancelReboot_Handler,
		},
		{
			MethodName: "KillProcess",
			Handler:    _System_KillProcess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _System_Ping_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Traceroute",
			Handler:       _System_Traceroute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetPackage",
			Handler:       _System_SetPackage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnoi/system/system.proto",
}
