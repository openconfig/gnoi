//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Generic Network Operation Interface, GNOI, defines a set of RPC's used for
// the operational aspects of network targets. These services are meant to be
// used in conjunction with GNMI for all target state and operational aspects
// of a network target. The gnoi.system.Service is the only mandatory vendor
// implementation.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: system.proto

package system

import (
	common "github.com/openconfig/gnoi/common"
	types "github.com/openconfig/gnoi/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A RebootMethod determines what should be done with a target when a Reboot is
// requested.  Only the COLD method is required to be supported by all
// targets.  A target should return 'INVALID_ARGUMENT` if UNKNOWN or any other
// unsupported method is called.
//
// It is vendor defined if a WARM reboot is the same as an NSF reboot.
type RebootMethod int32

const (
	RebootMethod_UNKNOWN   RebootMethod = 0 // Invalid default method.
	RebootMethod_COLD      RebootMethod = 1 // Shutdown and restart OS and all hardware.
	RebootMethod_POWERDOWN RebootMethod = 2 // Halt and power down, if possible.
	RebootMethod_HALT      RebootMethod = 3 // Halt, if possible.
	RebootMethod_WARM      RebootMethod = 4 // Reload configuration but not underlying hardware.
	RebootMethod_NSF       RebootMethod = 5 // Non-stop-forwarding reboot, if possible.
	RebootMethod_POWERUP   RebootMethod = 7 // Apply power, no-op if power is already on.
)

// Enum value maps for RebootMethod.
var (
	RebootMethod_name = map[int32]string{
		0: "UNKNOWN",
		1: "COLD",
		2: "POWERDOWN",
		3: "HALT",
		4: "WARM",
		5: "NSF",
		7: "POWERUP",
	}
	RebootMethod_value = map[string]int32{
		"UNKNOWN":   0,
		"COLD":      1,
		"POWERDOWN": 2,
		"HALT":      3,
		"WARM":      4,
		"NSF":       5,
		"POWERUP":   7,
	}
)

func (x RebootMethod) Enum() *RebootMethod {
	p := new(RebootMethod)
	*p = x
	return p
}

func (x RebootMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RebootMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_system_proto_enumTypes[0].Descriptor()
}

func (RebootMethod) Type() protoreflect.EnumType {
	return &file_system_proto_enumTypes[0]
}

func (x RebootMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RebootMethod.Descriptor instead.
func (RebootMethod) EnumDescriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{0}
}

type RebootStatus_Status int32

const (
	RebootStatus_STATUS_UNKNOWN           RebootStatus_Status = 0
	RebootStatus_STATUS_SUCCESS           RebootStatus_Status = 1
	RebootStatus_STATUS_RETRIABLE_FAILURE RebootStatus_Status = 2
	RebootStatus_STATUS_FAILURE           RebootStatus_Status = 3
)

// Enum value maps for RebootStatus_Status.
var (
	RebootStatus_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_SUCCESS",
		2: "STATUS_RETRIABLE_FAILURE",
		3: "STATUS_FAILURE",
	}
	RebootStatus_Status_value = map[string]int32{
		"STATUS_UNKNOWN":           0,
		"STATUS_SUCCESS":           1,
		"STATUS_RETRIABLE_FAILURE": 2,
		"STATUS_FAILURE":           3,
	}
)

func (x RebootStatus_Status) Enum() *RebootStatus_Status {
	p := new(RebootStatus_Status)
	*p = x
	return p
}

func (x RebootStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RebootStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_system_proto_enumTypes[1].Descriptor()
}

func (RebootStatus_Status) Type() protoreflect.EnumType {
	return &file_system_proto_enumTypes[1]
}

func (x RebootStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RebootStatus_Status.Descriptor instead.
func (RebootStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{8, 0}
}

type ProbeResponse_Code int32

const (
	ProbeResponse_CODE_UNKNOWN             ProbeResponse_Code = 0
	ProbeResponse_CODE_NO_ERROR            ProbeResponse_Code = 1
	ProbeResponse_CODE_MALFORMED_QUERY     ProbeResponse_Code = 2
	ProbeResponse_CODE_NO_SUCH_INTERFACE   ProbeResponse_Code = 3
	ProbeResponse_CODE_NO_SUCH_TABLE_ENTRY ProbeResponse_Code = 4
	ProbeResponse_CODE_MULTIPLE_INTERFACES ProbeResponse_Code = 5
)

// Enum value maps for ProbeResponse_Code.
var (
	ProbeResponse_Code_name = map[int32]string{
		0: "CODE_UNKNOWN",
		1: "CODE_NO_ERROR",
		2: "CODE_MALFORMED_QUERY",
		3: "CODE_NO_SUCH_INTERFACE",
		4: "CODE_NO_SUCH_TABLE_ENTRY",
		5: "CODE_MULTIPLE_INTERFACES",
	}
	ProbeResponse_Code_value = map[string]int32{
		"CODE_UNKNOWN":             0,
		"CODE_NO_ERROR":            1,
		"CODE_MALFORMED_QUERY":     2,
		"CODE_NO_SUCH_INTERFACE":   3,
		"CODE_NO_SUCH_TABLE_ENTRY": 4,
		"CODE_MULTIPLE_INTERFACES": 5,
	}
)

func (x ProbeResponse_Code) Enum() *ProbeResponse_Code {
	p := new(ProbeResponse_Code)
	*p = x
	return p
}

func (x ProbeResponse_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbeResponse_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_system_proto_enumTypes[2].Descriptor()
}

func (ProbeResponse_Code) Type() protoreflect.EnumType {
	return &file_system_proto_enumTypes[2]
}

func (x ProbeResponse_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProbeResponse_Code.Descriptor instead.
func (ProbeResponse_Code) EnumDescriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{14, 0}
}

type ProbeResponse_State int32

const (
	ProbeResponse_STATE_UNKNOWN    ProbeResponse_State = 0
	ProbeResponse_STATE_INCOMPLETE ProbeResponse_State = 1
	ProbeResponse_STATE_REACHABLE  ProbeResponse_State = 2
	ProbeResponse_STATE_STALE      ProbeResponse_State = 3
	ProbeResponse_STATE_DELAY      ProbeResponse_State = 4
	ProbeResponse_STATE_PROBE      ProbeResponse_State = 5
	ProbeResponse_STATE_FAILED     ProbeResponse_State = 6
)

// Enum value maps for ProbeResponse_State.
var (
	ProbeResponse_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_INCOMPLETE",
		2: "STATE_REACHABLE",
		3: "STATE_STALE",
		4: "STATE_DELAY",
		5: "STATE_PROBE",
		6: "STATE_FAILED",
	}
	ProbeResponse_State_value = map[string]int32{
		"STATE_UNKNOWN":    0,
		"STATE_INCOMPLETE": 1,
		"STATE_REACHABLE":  2,
		"STATE_STALE":      3,
		"STATE_DELAY":      4,
		"STATE_PROBE":      5,
		"STATE_FAILED":     6,
	}
)

func (x ProbeResponse_State) Enum() *ProbeResponse_State {
	p := new(ProbeResponse_State)
	*p = x
	return p
}

func (x ProbeResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbeResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_system_proto_enumTypes[3].Descriptor()
}

func (ProbeResponse_State) Type() protoreflect.EnumType {
	return &file_system_proto_enumTypes[3]
}

func (x ProbeResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProbeResponse_State.Descriptor instead.
func (ProbeResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{14, 1}
}

type ProbeResponse_Active int32

const (
	ProbeResponse_ACTIVE_UNKNOWN   ProbeResponse_Active = 0
	ProbeResponse_ACTIVE_INACTIVE  ProbeResponse_Active = 1
	ProbeResponse_ACTIVE_NOV4_NOV6 ProbeResponse_Active = 2
	ProbeResponse_ACTIVE_V4        ProbeResponse_Active = 3
	ProbeResponse_ACTIVE_V6        ProbeResponse_Active = 4
	ProbeResponse_ACTIVE_V4_V6     ProbeResponse_Active = 5
)

// Enum value maps for ProbeResponse_Active.
var (
	ProbeResponse_Active_name = map[int32]string{
		0: "ACTIVE_UNKNOWN",
		1: "ACTIVE_INACTIVE",
		2: "ACTIVE_NOV4_NOV6",
		3: "ACTIVE_V4",
		4: "ACTIVE_V6",
		5: "ACTIVE_V4_V6",
	}
	ProbeResponse_Active_value = map[string]int32{
		"ACTIVE_UNKNOWN":   0,
		"ACTIVE_INACTIVE":  1,
		"ACTIVE_NOV4_NOV6": 2,
		"ACTIVE_V4":        3,
		"ACTIVE_V6":        4,
		"ACTIVE_V4_V6":     5,
	}
)

func (x ProbeResponse_Active) Enum() *ProbeResponse_Active {
	p := new(ProbeResponse_Active)
	*p = x
	return p
}

func (x ProbeResponse_Active) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbeResponse_Active) Descriptor() protoreflect.EnumDescriptor {
	return file_system_proto_enumTypes[4].Descriptor()
}

func (ProbeResponse_Active) Type() protoreflect.EnumType {
	return &file_system_proto_enumTypes[4]
}

func (x ProbeResponse_Active) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProbeResponse_Active.Descriptor instead.
func (ProbeResponse_Active) EnumDescriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{14, 2}
}

type TracerouteRequest_L4Protocol int32

const (
	TracerouteRequest_ICMP TracerouteRequest_L4Protocol = 0 // Use ICMP ECHO for probes.
	TracerouteRequest_TCP  TracerouteRequest_L4Protocol = 1 // Use TCP SYN for probes.
	TracerouteRequest_UDP  TracerouteRequest_L4Protocol = 2 // Use UDP for probes.
)

// Enum value maps for TracerouteRequest_L4Protocol.
var (
	TracerouteRequest_L4Protocol_name = map[int32]string{
		0: "ICMP",
		1: "TCP",
		2: "UDP",
	}
	TracerouteRequest_L4Protocol_value = map[string]int32{
		"ICMP": 0,
		"TCP":  1,
		"UDP":  2,
	}
)

func (x TracerouteRequest_L4Protocol) Enum() *TracerouteRequest_L4Protocol {
	p := new(TracerouteRequest_L4Protocol)
	*p = x
	return p
}

func (x TracerouteRequest_L4Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TracerouteRequest_L4Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_system_proto_enumTypes[5].Descriptor()
}

func (TracerouteRequest_L4Protocol) Type() protoreflect.EnumType {
	return &file_system_proto_enumTypes[5]
}

func (x TracerouteRequest_L4Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TracerouteRequest_L4Protocol.Descriptor instead.
func (TracerouteRequest_L4Protocol) EnumDescriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{15, 0}
}

// State is the resulting state of a single traceoroute packet.
type TracerouteResponse_State int32

const (
	TracerouteResponse_DEFAULT              TracerouteResponse_State = 0  // Normal hop response.
	TracerouteResponse_NONE                 TracerouteResponse_State = 1  // No response.
	TracerouteResponse_UNKNOWN              TracerouteResponse_State = 2  // Unknown response state.
	TracerouteResponse_ICMP                 TracerouteResponse_State = 3  // See icmp_code field.
	TracerouteResponse_HOST_UNREACHABLE     TracerouteResponse_State = 4  // Host unreachable.
	TracerouteResponse_NETWORK_UNREACHABLE  TracerouteResponse_State = 5  // Network unreachable.
	TracerouteResponse_PROTOCOL_UNREACHABLE TracerouteResponse_State = 6  // Protocol unreachable.
	TracerouteResponse_SOURCE_ROUTE_FAILED  TracerouteResponse_State = 7  // Source route failed.
	TracerouteResponse_FRAGMENTATION_NEEDED TracerouteResponse_State = 8  // Fragmentation needed.
	TracerouteResponse_PROHIBITED           TracerouteResponse_State = 9  // Communication administratively prohibited.
	TracerouteResponse_PRECEDENCE_VIOLATION TracerouteResponse_State = 10 // Host precedence violation.
	TracerouteResponse_PRECEDENCE_CUTOFF    TracerouteResponse_State = 11 // Precedence cutoff in  effect.
)

// Enum value maps for TracerouteResponse_State.
var (
	TracerouteResponse_State_name = map[int32]string{
		0:  "DEFAULT",
		1:  "NONE",
		2:  "UNKNOWN",
		3:  "ICMP",
		4:  "HOST_UNREACHABLE",
		5:  "NETWORK_UNREACHABLE",
		6:  "PROTOCOL_UNREACHABLE",
		7:  "SOURCE_ROUTE_FAILED",
		8:  "FRAGMENTATION_NEEDED",
		9:  "PROHIBITED",
		10: "PRECEDENCE_VIOLATION",
		11: "PRECEDENCE_CUTOFF",
	}
	TracerouteResponse_State_value = map[string]int32{
		"DEFAULT":              0,
		"NONE":                 1,
		"UNKNOWN":              2,
		"ICMP":                 3,
		"HOST_UNREACHABLE":     4,
		"NETWORK_UNREACHABLE":  5,
		"PROTOCOL_UNREACHABLE": 6,
		"SOURCE_ROUTE_FAILED":  7,
		"FRAGMENTATION_NEEDED": 8,
		"PROHIBITED":           9,
		"PRECEDENCE_VIOLATION": 10,
		"PRECEDENCE_CUTOFF":    11,
	}
)

func (x TracerouteResponse_State) Enum() *TracerouteResponse_State {
	p := new(TracerouteResponse_State)
	*p = x
	return p
}

func (x TracerouteResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TracerouteResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_system_proto_enumTypes[6].Descriptor()
}

func (TracerouteResponse_State) Type() protoreflect.EnumType {
	return &file_system_proto_enumTypes[6]
}

func (x TracerouteResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TracerouteResponse_State.Descriptor instead.
func (TracerouteResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{16, 0}
}

// Termination signal sent to the process.
type KillProcessRequest_Signal int32

const (
	KillProcessRequest_SIGNAL_UNSPECIFIED KillProcessRequest_Signal = 0 // Invalid default.
	KillProcessRequest_SIGNAL_TERM        KillProcessRequest_Signal = 1 // Terminate the process gracefully.
	KillProcessRequest_SIGNAL_KILL        KillProcessRequest_Signal = 2 // Terminate the process immediately.
	KillProcessRequest_SIGNAL_HUP         KillProcessRequest_Signal = 3 // Reload the process configuration.
	// Terminate the process immediately and dump a core file.
	KillProcessRequest_SIGNAL_ABRT KillProcessRequest_Signal = 4
)

// Enum value maps for KillProcessRequest_Signal.
var (
	KillProcessRequest_Signal_name = map[int32]string{
		0: "SIGNAL_UNSPECIFIED",
		1: "SIGNAL_TERM",
		2: "SIGNAL_KILL",
		3: "SIGNAL_HUP",
		4: "SIGNAL_ABRT",
	}
	KillProcessRequest_Signal_value = map[string]int32{
		"SIGNAL_UNSPECIFIED": 0,
		"SIGNAL_TERM":        1,
		"SIGNAL_KILL":        2,
		"SIGNAL_HUP":         3,
		"SIGNAL_ABRT":        4,
	}
)

func (x KillProcessRequest_Signal) Enum() *KillProcessRequest_Signal {
	p := new(KillProcessRequest_Signal)
	*p = x
	return p
}

func (x KillProcessRequest_Signal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KillProcessRequest_Signal) Descriptor() protoreflect.EnumDescriptor {
	return file_system_proto_enumTypes[7].Descriptor()
}

func (KillProcessRequest_Signal) Type() protoreflect.EnumType {
	return &file_system_proto_enumTypes[7]
}

func (x KillProcessRequest_Signal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KillProcessRequest_Signal.Descriptor instead.
func (KillProcessRequest_Signal) EnumDescriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{20, 0}
}

type SwitchControlProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the target Control Processor.
	ControlProcessor *types.Path `protobuf:"bytes,1,opt,name=control_processor,json=controlProcessor,proto3" json:"control_processor,omitempty"`
}

func (x *SwitchControlProcessorRequest) Reset() {
	*x = SwitchControlProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchControlProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchControlProcessorRequest) ProtoMessage() {}

func (x *SwitchControlProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchControlProcessorRequest.ProtoReflect.Descriptor instead.
func (*SwitchControlProcessorRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{0}
}

func (x *SwitchControlProcessorRequest) GetControlProcessor() *types.Path {
	if x != nil {
		return x.ControlProcessor
	}
	return nil
}

type SwitchControlProcessorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the Control Processor that the system switched to.
	ControlProcessor *types.Path `protobuf:"bytes,1,opt,name=control_processor,json=controlProcessor,proto3" json:"control_processor,omitempty"`
	// Current software version of the target Control Processor.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Uptime of the target Control Processor in nanoseconds.
	Uptime int64 `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *SwitchControlProcessorResponse) Reset() {
	*x = SwitchControlProcessorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchControlProcessorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchControlProcessorResponse) ProtoMessage() {}

func (x *SwitchControlProcessorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchControlProcessorResponse.ProtoReflect.Descriptor instead.
func (*SwitchControlProcessorResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{1}
}

func (x *SwitchControlProcessorResponse) GetControlProcessor() *types.Path {
	if x != nil {
		return x.ControlProcessor
	}
	return nil
}

func (x *SwitchControlProcessorResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SwitchControlProcessorResponse) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

// A RebootRequest requests the specified target be rebooted using the specified
// method after the specified delay.  Only the COLD method with a delay of 0
// is guaranteed to be accepted for all target types.
type RebootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method RebootMethod `protobuf:"varint,1,opt,name=method,proto3,enum=gnoi.system.RebootMethod" json:"method,omitempty"`
	// Delay in nanoseconds before issuing reboot.
	Delay uint64 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	// Informational reason for the reboot.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Optional sub-components to reboot.
	Subcomponents []*types.Path `protobuf:"bytes,4,rep,name=subcomponents,proto3" json:"subcomponents,omitempty"`
	// Force reboot if sanity checks fail. (ex. uncommited configuration)
	Force bool `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *RebootRequest) Reset() {
	*x = RebootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootRequest) ProtoMessage() {}

func (x *RebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootRequest.ProtoReflect.Descriptor instead.
func (*RebootRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{2}
}

func (x *RebootRequest) GetMethod() RebootMethod {
	if x != nil {
		return x.Method
	}
	return RebootMethod_UNKNOWN
}

func (x *RebootRequest) GetDelay() uint64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *RebootRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RebootRequest) GetSubcomponents() []*types.Path {
	if x != nil {
		return x.Subcomponents
	}
	return nil
}

func (x *RebootRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type RebootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebootResponse) Reset() {
	*x = RebootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootResponse) ProtoMessage() {}

func (x *RebootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootResponse.ProtoReflect.Descriptor instead.
func (*RebootResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{3}
}

// A CancelRebootRequest requests the cancelation of any outstanding reboot
// request.
type CancelRebootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message       string        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`             // informational reason for the cancel
	Subcomponents []*types.Path `protobuf:"bytes,2,rep,name=subcomponents,proto3" json:"subcomponents,omitempty"` // optional sub-components.
}

func (x *CancelRebootRequest) Reset() {
	*x = CancelRebootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRebootRequest) ProtoMessage() {}

func (x *CancelRebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRebootRequest.ProtoReflect.Descriptor instead.
func (*CancelRebootRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{4}
}

func (x *CancelRebootRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CancelRebootRequest) GetSubcomponents() []*types.Path {
	if x != nil {
		return x.Subcomponents
	}
	return nil
}

type CancelRebootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelRebootResponse) Reset() {
	*x = CancelRebootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRebootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRebootResponse) ProtoMessage() {}

func (x *CancelRebootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRebootResponse.ProtoReflect.Descriptor instead.
func (*CancelRebootResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{5}
}

type RebootStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subcomponents []*types.Path `protobuf:"bytes,1,rep,name=subcomponents,proto3" json:"subcomponents,omitempty"` // optional sub-component.
}

func (x *RebootStatusRequest) Reset() {
	*x = RebootStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootStatusRequest) ProtoMessage() {}

func (x *RebootStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootStatusRequest.ProtoReflect.Descriptor instead.
func (*RebootStatusRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{6}
}

func (x *RebootStatusRequest) GetSubcomponents() []*types.Path {
	if x != nil {
		return x.Subcomponents
	}
	return nil
}

type RebootStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active bool          `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`                               // If reboot is active.
	Wait   uint64        `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"`                                   // Time left until reboot.
	When   uint64        `protobuf:"varint,3,opt,name=when,proto3" json:"when,omitempty"`                                   // Time to reboot in nanoseconds since the epoch.
	Reason string        `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`                                // Reason for reboot.
	Count  uint32        `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                 // Number of reboots since active.
	Method RebootMethod  `protobuf:"varint,6,opt,name=method,proto3,enum=gnoi.system.RebootMethod" json:"method,omitempty"` // Type of reboot.
	Status *RebootStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`                                // Applicable only when active = false.
}

func (x *RebootStatusResponse) Reset() {
	*x = RebootStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootStatusResponse) ProtoMessage() {}

func (x *RebootStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootStatusResponse.ProtoReflect.Descriptor instead.
func (*RebootStatusResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{7}
}

func (x *RebootStatusResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RebootStatusResponse) GetWait() uint64 {
	if x != nil {
		return x.Wait
	}
	return 0
}

func (x *RebootStatusResponse) GetWhen() uint64 {
	if x != nil {
		return x.When
	}
	return 0
}

func (x *RebootStatusResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RebootStatusResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RebootStatusResponse) GetMethod() RebootMethod {
	if x != nil {
		return x.Method
	}
	return RebootMethod_UNKNOWN
}

func (x *RebootStatusResponse) GetStatus() *RebootStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type RebootStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  RebootStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=gnoi.system.RebootStatus_Status" json:"status,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RebootStatus) Reset() {
	*x = RebootStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootStatus) ProtoMessage() {}

func (x *RebootStatus) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootStatus.ProtoReflect.Descriptor instead.
func (*RebootStatus) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{8}
}

func (x *RebootStatus) GetStatus() RebootStatus_Status {
	if x != nil {
		return x.Status
	}
	return RebootStatus_STATUS_UNKNOWN
}

func (x *RebootStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A TimeRequest requests the current time accodring to the target.
type TimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimeRequest) Reset() {
	*x = TimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRequest) ProtoMessage() {}

func (x *TimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRequest.ProtoReflect.Descriptor instead.
func (*TimeRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{9}
}

type TimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"` // Current time in nanoseconds since epoch.
}

func (x *TimeResponse) Reset() {
	*x = TimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeResponse) ProtoMessage() {}

func (x *TimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeResponse.ProtoReflect.Descriptor instead.
func (*TimeResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{10}
}

func (x *TimeResponse) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// A PingRequest describes the ping operation to perform.  Only the destination
// fields is required.  Any field not specified is set to a reasonable server
// specified value.  Not all fields are supported by all vendors.
//
// A count of 0 defaults to a vendor specified value, typically 5.  A count of
// -1 means continue until the RPC times out or is canceled.
//
// If the interval is -1 then a flood ping is issued.
//
// If the size is 0, the vendor default size will be used (typically 56 bytes).
type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination     string           `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`                                 // Destination address to ping. required.
	Source          string           `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                           // Source address to ping from.
	Count           int32            `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                                            // Number of packets.
	Interval        int64            `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`                                      // Nanoseconds between requests.
	Wait            int64            `protobuf:"varint,5,opt,name=wait,proto3" json:"wait,omitempty"`                                              // Nanoseconds to wait for a response.
	Size            int32            `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`                                              // Size of request packet. (excluding ICMP header)
	DoNotFragment   bool             `protobuf:"varint,7,opt,name=do_not_fragment,json=doNotFragment,proto3" json:"do_not_fragment,omitempty"`     // Set the do not fragment bit. (IPv4 destinations)
	DoNotResolve    bool             `protobuf:"varint,8,opt,name=do_not_resolve,json=doNotResolve,proto3" json:"do_not_resolve,omitempty"`        // Do not try resolve the address returned.
	L3Protocol      types.L3Protocol `protobuf:"varint,9,opt,name=l3protocol,proto3,enum=gnoi.types.L3Protocol" json:"l3protocol,omitempty"`       // Layer3 protocol requested for the ping.
	NetworkInstance string           `protobuf:"bytes,10,opt,name=network_instance,json=networkInstance,proto3" json:"network_instance,omitempty"` // Network instance to ping the destination in
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{11}
}

func (x *PingRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *PingRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PingRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PingRequest) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PingRequest) GetWait() int64 {
	if x != nil {
		return x.Wait
	}
	return 0
}

func (x *PingRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PingRequest) GetDoNotFragment() bool {
	if x != nil {
		return x.DoNotFragment
	}
	return false
}

func (x *PingRequest) GetDoNotResolve() bool {
	if x != nil {
		return x.DoNotResolve
	}
	return false
}

func (x *PingRequest) GetL3Protocol() types.L3Protocol {
	if x != nil {
		return x.L3Protocol
	}
	return types.L3Protocol(0)
}

func (x *PingRequest) GetNetworkInstance() string {
	if x != nil {
		return x.NetworkInstance
	}
	return ""
}

// A PingResponse represents either the reponse to a single ping packet
// (the bytes field is non-zero) or the summary statistics (sent is non-zero).
//
// For a single ping packet, time is the round trip time, in nanoseconds.  For
// summary statistics, it is the time spent by the ping operation.  The time is
// not always present in summary statistics.  The std_dev is not always present
// in summary statistics.
type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"` // Source of received bytes.
	Time     int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Sent     int32  `protobuf:"varint,3,opt,name=sent,proto3" json:"sent,omitempty"`                      // Total packets sent.
	Received int32  `protobuf:"varint,4,opt,name=received,proto3" json:"received,omitempty"`              // Total packets received.
	MinTime  int64  `protobuf:"varint,5,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"` // Minimum round trip time in nanoseconds.
	AvgTime  int64  `protobuf:"varint,6,opt,name=avg_time,json=avgTime,proto3" json:"avg_time,omitempty"` // Average round trip time in nanoseconds.
	MaxTime  int64  `protobuf:"varint,7,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"` // Maximum round trip time in nanoseconds.
	StdDev   int64  `protobuf:"varint,8,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`    // Standard deviation in round trip time.
	Bytes    int32  `protobuf:"varint,11,opt,name=bytes,proto3" json:"bytes,omitempty"`                   // Bytes received.
	Sequence int32  `protobuf:"varint,12,opt,name=sequence,proto3" json:"sequence,omitempty"`             // Sequence number of received packet.
	Ttl      int32  `protobuf:"varint,13,opt,name=ttl,proto3" json:"ttl,omitempty"`                       // Remaining time to live value.
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{12}
}

func (x *PingResponse) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PingResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PingResponse) GetSent() int32 {
	if x != nil {
		return x.Sent
	}
	return 0
}

func (x *PingResponse) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *PingResponse) GetMinTime() int64 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *PingResponse) GetAvgTime() int64 {
	if x != nil {
		return x.AvgTime
	}
	return 0
}

func (x *PingResponse) GetMaxTime() int64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *PingResponse) GetStdDev() int64 {
	if x != nil {
		return x.StdDev
	}
	return 0
}

func (x *PingResponse) GetBytes() int32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *PingResponse) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PingResponse) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// A ProbeRequest describes the probe operation to perform.  The
// destination field and exactly one of the probe_target fields
// are required.  Any field not specified is set to a reasonable server
// specified value.  Not all fields are supported by all vendors.
type ProbeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"` // Proxy address to probe. required.
	Source      string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`           // Source address to probe from.
	// Types that are assignable to ProbeTarget:
	//
	//	*ProbeRequest_Ifindex
	//	*ProbeRequest_Ifname
	//	*ProbeRequest_Ifaddr
	//	*ProbeRequest_Remote
	ProbeTarget     isProbeRequest_ProbeTarget `protobuf_oneof:"probe_target"`
	Count           int32                      `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                                            // Number of requests to make, default 3.
	Interval        int64                      `protobuf:"varint,8,opt,name=interval,proto3" json:"interval,omitempty"`                                      // Nanoseconds between requests.
	Wait            int64                      `protobuf:"varint,9,opt,name=wait,proto3" json:"wait,omitempty"`                                              // Nanoseconds to wait for a response.
	NetworkInstance string                     `protobuf:"bytes,10,opt,name=network_instance,json=networkInstance,proto3" json:"network_instance,omitempty"` // Network instance to probe the proxy node in.
}

func (x *ProbeRequest) Reset() {
	*x = ProbeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeRequest) ProtoMessage() {}

func (x *ProbeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeRequest.ProtoReflect.Descriptor instead.
func (*ProbeRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{13}
}

func (x *ProbeRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ProbeRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (m *ProbeRequest) GetProbeTarget() isProbeRequest_ProbeTarget {
	if m != nil {
		return m.ProbeTarget
	}
	return nil
}

func (x *ProbeRequest) GetIfindex() int32 {
	if x, ok := x.GetProbeTarget().(*ProbeRequest_Ifindex); ok {
		return x.Ifindex
	}
	return 0
}

func (x *ProbeRequest) GetIfname() string {
	if x, ok := x.GetProbeTarget().(*ProbeRequest_Ifname); ok {
		return x.Ifname
	}
	return ""
}

func (x *ProbeRequest) GetIfaddr() string {
	if x, ok := x.GetProbeTarget().(*ProbeRequest_Ifaddr); ok {
		return x.Ifaddr
	}
	return ""
}

func (x *ProbeRequest) GetRemote() string {
	if x, ok := x.GetProbeTarget().(*ProbeRequest_Remote); ok {
		return x.Remote
	}
	return ""
}

func (x *ProbeRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProbeRequest) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ProbeRequest) GetWait() int64 {
	if x != nil {
		return x.Wait
	}
	return 0
}

func (x *ProbeRequest) GetNetworkInstance() string {
	if x != nil {
		return x.NetworkInstance
	}
	return ""
}

type isProbeRequest_ProbeTarget interface {
	isProbeRequest_ProbeTarget()
}

type ProbeRequest_Ifindex struct {
	// exactly one of the next 4 items must be present.
	Ifindex int32 `protobuf:"varint,3,opt,name=ifindex,proto3,oneof"` // ifIndex to probe, if present.
}

type ProbeRequest_Ifname struct {
	Ifname string `protobuf:"bytes,4,opt,name=ifname,proto3,oneof"` // ifName to probe, if present.
}

type ProbeRequest_Ifaddr struct {
	Ifaddr string `protobuf:"bytes,5,opt,name=ifaddr,proto3,oneof"` // ifAddr to probe, if present.
}

type ProbeRequest_Remote struct {
	Remote string `protobuf:"bytes,6,opt,name=remote,proto3,oneof"` // remote address to probe, if present.
}

func (*ProbeRequest_Ifindex) isProbeRequest_ProbeTarget() {}

func (*ProbeRequest_Ifname) isProbeRequest_ProbeTarget() {}

func (*ProbeRequest_Ifaddr) isProbeRequest_ProbeTarget() {}

func (*ProbeRequest_Remote) isProbeRequest_ProbeTarget() {}

// A ProbeResponse represents either the response to a single probe packet
// (the code field is non-zero) or the summary statistics (sent is non-zero).
//
// For a single probe packet, time is the round trip time, in nanoseconds.  For
// summary statistics, it is the time spent by the ping operation.  The time is
// not always present in summary statistics.
//
// In the summary, each map is keyed by the enum values referred to by that map.
// The codes map is keyed by the Code enum, the states map is keyed by the State
// enum, and the actives map is keyed by the Active enum.
type ProbeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Time   int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// For individual responses
	Sequence int32              `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Code     ProbeResponse_Code `protobuf:"varint,4,opt,name=code,proto3,enum=gnoi.system.ProbeResponse_Code" json:"code,omitempty"`
	// state is only present if code is CODE_NO_ERROR
	// and request was remote
	State ProbeResponse_State `protobuf:"varint,5,opt,name=state,proto3,enum=gnoi.system.ProbeResponse_State" json:"state,omitempty"`
	// active is only present if code is CODE_NO_ERROR
	// and request was not remote
	Active ProbeResponse_Active `protobuf:"varint,6,opt,name=active,proto3,enum=gnoi.system.ProbeResponse_Active" json:"active,omitempty"`
	// summary
	Sent     int32 `protobuf:"varint,7,opt,name=sent,proto3" json:"sent,omitempty"`         // Total packets sent.
	Errors   int32 `protobuf:"varint,8,opt,name=errors,proto3" json:"errors,omitempty"`     // Count of errors received when sending packets.
	Received int32 `protobuf:"varint,9,opt,name=received,proto3" json:"received,omitempty"` // Total packets received.
	// histograms in summary
	Codes   map[uint32]uint32 `protobuf:"bytes,10,rep,name=codes,proto3" json:"codes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`     // Keys are values of Code enum
	States  map[uint32]uint32 `protobuf:"bytes,11,rep,name=states,proto3" json:"states,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`   // Keys are values of State enum
	Actives map[uint32]uint32 `protobuf:"bytes,12,rep,name=actives,proto3" json:"actives,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Keys are values of Active enum
}

func (x *ProbeResponse) Reset() {
	*x = ProbeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeResponse) ProtoMessage() {}

func (x *ProbeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeResponse.ProtoReflect.Descriptor instead.
func (*ProbeResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{14}
}

func (x *ProbeResponse) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ProbeResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ProbeResponse) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ProbeResponse) GetCode() ProbeResponse_Code {
	if x != nil {
		return x.Code
	}
	return ProbeResponse_CODE_UNKNOWN
}

func (x *ProbeResponse) GetState() ProbeResponse_State {
	if x != nil {
		return x.State
	}
	return ProbeResponse_STATE_UNKNOWN
}

func (x *ProbeResponse) GetActive() ProbeResponse_Active {
	if x != nil {
		return x.Active
	}
	return ProbeResponse_ACTIVE_UNKNOWN
}

func (x *ProbeResponse) GetSent() int32 {
	if x != nil {
		return x.Sent
	}
	return 0
}

func (x *ProbeResponse) GetErrors() int32 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *ProbeResponse) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *ProbeResponse) GetCodes() map[uint32]uint32 {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *ProbeResponse) GetStates() map[uint32]uint32 {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *ProbeResponse) GetActives() map[uint32]uint32 {
	if x != nil {
		return x.Actives
	}
	return nil
}

// A TracerouteRequest describes the traceroute operation to perform.  Only the
// destination field is required.  Any field not specified is set to a
// reasonable server specified value.  Not all fields are supported by all
// vendors.
//
// If the hop_count is -1 the traceroute will continue forever.
type TracerouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          string                       `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`                                       // Source address to ping from.
	Destination     string                       `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`                             // Destination address to ping.
	InitialTtl      uint32                       `protobuf:"varint,3,opt,name=initial_ttl,json=initialTtl,proto3" json:"initial_ttl,omitempty"`            // Initial TTL. (default=1)
	MaxTtl          int32                        `protobuf:"varint,4,opt,name=max_ttl,json=maxTtl,proto3" json:"max_ttl,omitempty"`                        // Maximum number of hops. (default=30)
	Wait            int64                        `protobuf:"varint,5,opt,name=wait,proto3" json:"wait,omitempty"`                                          // Nanoseconds to wait for a response.
	DoNotFragment   bool                         `protobuf:"varint,6,opt,name=do_not_fragment,json=doNotFragment,proto3" json:"do_not_fragment,omitempty"` // Set the do not fragment bit. (IPv4 destinations)
	DoNotResolve    bool                         `protobuf:"varint,7,opt,name=do_not_resolve,json=doNotResolve,proto3" json:"do_not_resolve,omitempty"`    // Do not try resolve the address returned.
	L3Protocol      types.L3Protocol             `protobuf:"varint,8,opt,name=l3protocol,proto3,enum=gnoi.types.L3Protocol" json:"l3protocol,omitempty"`   // Layer-3 protocol requested for the ping.
	L4Protocol      TracerouteRequest_L4Protocol `protobuf:"varint,9,opt,name=l4protocol,proto3,enum=gnoi.system.TracerouteRequest_L4Protocol" json:"l4protocol,omitempty"`
	DoNotLookupAsn  bool                         `protobuf:"varint,10,opt,name=do_not_lookup_asn,json=doNotLookupAsn,proto3" json:"do_not_lookup_asn,omitempty"` // Do not try to lookup ASN
	NetworkInstance string                       `protobuf:"bytes,11,opt,name=network_instance,json=networkInstance,proto3" json:"network_instance,omitempty"`   // Network instance to trace the destination in
}

func (x *TracerouteRequest) Reset() {
	*x = TracerouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteRequest) ProtoMessage() {}

func (x *TracerouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteRequest.ProtoReflect.Descriptor instead.
func (*TracerouteRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{15}
}

func (x *TracerouteRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TracerouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TracerouteRequest) GetInitialTtl() uint32 {
	if x != nil {
		return x.InitialTtl
	}
	return 0
}

func (x *TracerouteRequest) GetMaxTtl() int32 {
	if x != nil {
		return x.MaxTtl
	}
	return 0
}

func (x *TracerouteRequest) GetWait() int64 {
	if x != nil {
		return x.Wait
	}
	return 0
}

func (x *TracerouteRequest) GetDoNotFragment() bool {
	if x != nil {
		return x.DoNotFragment
	}
	return false
}

func (x *TracerouteRequest) GetDoNotResolve() bool {
	if x != nil {
		return x.DoNotResolve
	}
	return false
}

func (x *TracerouteRequest) GetL3Protocol() types.L3Protocol {
	if x != nil {
		return x.L3Protocol
	}
	return types.L3Protocol(0)
}

func (x *TracerouteRequest) GetL4Protocol() TracerouteRequest_L4Protocol {
	if x != nil {
		return x.L4Protocol
	}
	return TracerouteRequest_ICMP
}

func (x *TracerouteRequest) GetDoNotLookupAsn() bool {
	if x != nil {
		return x.DoNotLookupAsn
	}
	return false
}

func (x *TracerouteRequest) GetNetworkInstance() string {
	if x != nil {
		return x.NetworkInstance
	}
	return ""
}

// A TraceRouteResponse contains the result of a single traceoute packet.
//
// There may be an optional initial response that provides information about the
// traceroute request itself and contains at least one of the fields in the the
// initial block of fields and none of the fields following that block.  All
// subsequent responses should not contain any of these fields.
//
// Typically multiple responses are received for each hop, as the packets are
// received.
//
// The mpls field maps names to values.  Example names include "Label", "CoS",
// "TTL", "S", and "MRU".
// [Perhaps we should list the canonical names that must be used when
// applicable].
type TracerouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The following fields are only filled in for the first message.
	// If any of these fields are specified, all fields following this
	// block are left unspecified.
	DestinationName    string `protobuf:"bytes,1,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	DestinationAddress string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Hops               int32  `protobuf:"varint,3,opt,name=hops,proto3" json:"hops,omitempty"`
	PacketSize         int32  `protobuf:"varint,4,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	// The following fields provide the disposition of a single traceroute
	// packet.
	Hop         int32                             `protobuf:"varint,5,opt,name=hop,proto3" json:"hop,omitempty"`                                                                                           // Hop number. required.
	Address     string                            `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`                                                                                    // Address of responding hop. required.
	Name        string                            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                                          // Name of responding hop.
	Rtt         int64                             `protobuf:"varint,8,opt,name=rtt,proto3" json:"rtt,omitempty"`                                                                                           // Round trip time in nanoseconds.
	State       TracerouteResponse_State          `protobuf:"varint,9,opt,name=state,proto3,enum=gnoi.system.TracerouteResponse_State" json:"state,omitempty"`                                             // State of this hop.
	IcmpCode    int32                             `protobuf:"varint,10,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`                                                                // Code terminating hop.
	Mpls        map[string]string                 `protobuf:"bytes,11,rep,name=mpls,proto3" json:"mpls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // MPLS key/value pairs.
	AsPath      []int32                           `protobuf:"varint,12,rep,packed,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`                                                               // AS path.
	IcmpExtData []*TracerouteResponse_IcmpExtData `protobuf:"bytes,13,rep,name=icmp_ext_data,json=icmpExtData,proto3" json:"icmp_ext_data,omitempty"`                                                      // ICMP extension data
}

func (x *TracerouteResponse) Reset() {
	*x = TracerouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteResponse) ProtoMessage() {}

func (x *TracerouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteResponse.ProtoReflect.Descriptor instead.
func (*TracerouteResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{16}
}

func (x *TracerouteResponse) GetDestinationName() string {
	if x != nil {
		return x.DestinationName
	}
	return ""
}

func (x *TracerouteResponse) GetDestinationAddress() string {
	if x != nil {
		return x.DestinationAddress
	}
	return ""
}

func (x *TracerouteResponse) GetHops() int32 {
	if x != nil {
		return x.Hops
	}
	return 0
}

func (x *TracerouteResponse) GetPacketSize() int32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *TracerouteResponse) GetHop() int32 {
	if x != nil {
		return x.Hop
	}
	return 0
}

func (x *TracerouteResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TracerouteResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TracerouteResponse) GetRtt() int64 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *TracerouteResponse) GetState() TracerouteResponse_State {
	if x != nil {
		return x.State
	}
	return TracerouteResponse_DEFAULT
}

func (x *TracerouteResponse) GetIcmpCode() int32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

func (x *TracerouteResponse) GetMpls() map[string]string {
	if x != nil {
		return x.Mpls
	}
	return nil
}

func (x *TracerouteResponse) GetAsPath() []int32 {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *TracerouteResponse) GetIcmpExtData() []*TracerouteResponse_IcmpExtData {
	if x != nil {
		return x.IcmpExtData
	}
	return nil
}

// Package defines a single package file to be placed on the target.
type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination path and filename of the package.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Version of the package. (vendor internal name)
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Indicates that the package should be made active after receipt on
	// the device. For system image packages, the new image is expected to
	// be active after a reboot.
	Activate bool `protobuf:"varint,5,opt,name=activate,proto3" json:"activate,omitempty"`
	// Details for the device to download the package from a remote location.
	RemoteDownload *common.RemoteDownload `protobuf:"bytes,6,opt,name=remote_download,json=remoteDownload,proto3" json:"remote_download,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{17}
}

func (x *Package) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Package) GetActivate() bool {
	if x != nil {
		return x.Activate
	}
	return false
}

func (x *Package) GetRemoteDownload() *common.RemoteDownload {
	if x != nil {
		return x.RemoteDownload
	}
	return nil
}

// SetPackageRequest will place the package onto the target and optionally mark
// it as the next bootable image. The initial message must be a package
// message containing the filename and information about the file. Following the
// initial message the contents are then streamed in maximum 64k chunks. The
// final message must be a hash message contains the hash of the file contents.
type SetPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SetPackageRequest_Package
	//	*SetPackageRequest_Contents
	//	*SetPackageRequest_Hash
	Request isSetPackageRequest_Request `protobuf_oneof:"request"`
}

func (x *SetPackageRequest) Reset() {
	*x = SetPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPackageRequest) ProtoMessage() {}

func (x *SetPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPackageRequest.ProtoReflect.Descriptor instead.
func (*SetPackageRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{18}
}

func (m *SetPackageRequest) GetRequest() isSetPackageRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SetPackageRequest) GetPackage() *Package {
	if x, ok := x.GetRequest().(*SetPackageRequest_Package); ok {
		return x.Package
	}
	return nil
}

func (x *SetPackageRequest) GetContents() []byte {
	if x, ok := x.GetRequest().(*SetPackageRequest_Contents); ok {
		return x.Contents
	}
	return nil
}

func (x *SetPackageRequest) GetHash() *types.HashType {
	if x, ok := x.GetRequest().(*SetPackageRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

type isSetPackageRequest_Request interface {
	isSetPackageRequest_Request()
}

type SetPackageRequest_Package struct {
	Package *Package `protobuf:"bytes,1,opt,name=package,proto3,oneof"`
}

type SetPackageRequest_Contents struct {
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3,oneof"`
}

type SetPackageRequest_Hash struct {
	Hash *types.HashType `protobuf:"bytes,3,opt,name=hash,proto3,oneof"` // Verification hash of data.
}

func (*SetPackageRequest_Package) isSetPackageRequest_Request() {}

func (*SetPackageRequest_Contents) isSetPackageRequest_Request() {}

func (*SetPackageRequest_Hash) isSetPackageRequest_Request() {}

type SetPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPackageResponse) Reset() {
	*x = SetPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPackageResponse) ProtoMessage() {}

func (x *SetPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPackageResponse.ProtoReflect.Descriptor instead.
func (*SetPackageResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{19}
}

// KillProcessRequest describes the process kill operation. Either a pid or
// process name must be specified, and a termination signal must be specified.
type KillProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Process ID of the process to be killed.
	Pid uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// Name of the process to be killed.
	Name   string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Signal KillProcessRequest_Signal `protobuf:"varint,3,opt,name=signal,proto3,enum=gnoi.system.KillProcessRequest_Signal" json:"signal,omitempty"`
	// Whether the process should be restarted after termination.
	// This value is ignored when the termination signal is SIGHUP.
	Restart bool `protobuf:"varint,4,opt,name=restart,proto3" json:"restart,omitempty"`
}

func (x *KillProcessRequest) Reset() {
	*x = KillProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillProcessRequest) ProtoMessage() {}

func (x *KillProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillProcessRequest.ProtoReflect.Descriptor instead.
func (*KillProcessRequest) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{20}
}

func (x *KillProcessRequest) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *KillProcessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KillProcessRequest) GetSignal() KillProcessRequest_Signal {
	if x != nil {
		return x.Signal
	}
	return KillProcessRequest_SIGNAL_UNSPECIFIED
}

func (x *KillProcessRequest) GetRestart() bool {
	if x != nil {
		return x.Restart
	}
	return false
}

// KillProcessResponse describes the result of the process kill operation.
type KillProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KillProcessResponse) Reset() {
	*x = KillProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillProcessResponse) ProtoMessage() {}

func (x *KillProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillProcessResponse.ProtoReflect.Descriptor instead.
func (*KillProcessResponse) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{21}
}

type TracerouteResponse_IcmpExtData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class uint32   `protobuf:"varint,1,opt,name=class,proto3" json:"class,omitempty"`      // class number
	Type  uint32   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`        // class type
	Data  []uint32 `protobuf:"varint,3,rep,packed,name=data,proto3" json:"data,omitempty"` // raw words associated with this data
}

func (x *TracerouteResponse_IcmpExtData) Reset() {
	*x = TracerouteResponse_IcmpExtData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracerouteResponse_IcmpExtData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracerouteResponse_IcmpExtData) ProtoMessage() {}

func (x *TracerouteResponse_IcmpExtData) ProtoReflect() protoreflect.Message {
	mi := &file_system_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracerouteResponse_IcmpExtData.ProtoReflect.Descriptor instead.
func (*TracerouteResponse_IcmpExtData) Descriptor() ([]byte, []int) {
	return file_system_proto_rawDescGZIP(), []int{16, 0}
}

func (x *TracerouteResponse_IcmpExtData) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *TracerouteResponse_IcmpExtData) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TracerouteResponse_IcmpExtData) GetData() []uint32 {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_system_proto protoreflect.FileDescriptor

var file_system_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x1d, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x1e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x67, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x62, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x22, 0x0d, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x0b,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x6c, 0x33, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c,
	0x33, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0a, 0x6c, 0x33, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x98, 0x02, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x76, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0xb3, 0x02, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x69, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06,
	0x69, 0x66, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x69, 0x66, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0xde, 0x08, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f,
	0x53, 0x55, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53, 0x10, 0x05, 0x22, 0x8a, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x22, 0x77, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x56, 0x34, 0x5f, 0x4e, 0x4f, 0x56, 0x36,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x34, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x36, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x34, 0x5f, 0x56, 0x36,
	0x10, 0x05, 0x22, 0xec, 0x03, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x74, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x54, 0x74, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x4e, 0x6f, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x6c, 0x33, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4c, 0x33, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0a, 0x6c, 0x33, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x49, 0x0a, 0x0a, 0x6c, 0x34, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x34, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0a, 0x6c, 0x34, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x29, 0x0a, 0x11, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x6f,
	0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x73, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x0a, 0x4c, 0x34, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10,
	0x02, 0x22, 0xf5, 0x06, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x68, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6d,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6d, 0x70, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a,
	0x0d, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x78, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x69, 0x63, 0x6d, 0x70, 0x45, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x4b,
	0x0a, 0x0b, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d,
	0x70, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x48,
	0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x43,
	0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x10, 0x0b, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x9a, 0x01,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf9, 0x01, 0x0a, 0x12, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x63, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x48, 0x55, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x42, 0x52, 0x54, 0x10, 0x04, 0x22, 0x15, 0x0a, 0x13,
	0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0x64, 0x0a, 0x0c, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c,
	0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4d, 0x10, 0x04, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x53, 0x46, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x55,
	0x50, 0x10, 0x07, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x32, 0xae, 0x06, 0x0a, 0x06, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x19,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x53,
	0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x73,
	0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2a, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12,
	0x20, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2b, 0xd2, 0x3e, 0x05, 0x31,
	0x2e, 0x34, 0x2e, 0x30, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69,
	0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_system_proto_rawDescOnce sync.Once
	file_system_proto_rawDescData = file_system_proto_rawDesc
)

func file_system_proto_rawDescGZIP() []byte {
	file_system_proto_rawDescOnce.Do(func() {
		file_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_proto_rawDescData)
	})
	return file_system_proto_rawDescData
}

var file_system_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_system_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_system_proto_goTypes = []interface{}{
	(RebootMethod)(0),                      // 0: gnoi.system.RebootMethod
	(RebootStatus_Status)(0),               // 1: gnoi.system.RebootStatus.Status
	(ProbeResponse_Code)(0),                // 2: gnoi.system.ProbeResponse.Code
	(ProbeResponse_State)(0),               // 3: gnoi.system.ProbeResponse.State
	(ProbeResponse_Active)(0),              // 4: gnoi.system.ProbeResponse.Active
	(TracerouteRequest_L4Protocol)(0),      // 5: gnoi.system.TracerouteRequest.L4Protocol
	(TracerouteResponse_State)(0),          // 6: gnoi.system.TracerouteResponse.State
	(KillProcessRequest_Signal)(0),         // 7: gnoi.system.KillProcessRequest.Signal
	(*SwitchControlProcessorRequest)(nil),  // 8: gnoi.system.SwitchControlProcessorRequest
	(*SwitchControlProcessorResponse)(nil), // 9: gnoi.system.SwitchControlProcessorResponse
	(*RebootRequest)(nil),                  // 10: gnoi.system.RebootRequest
	(*RebootResponse)(nil),                 // 11: gnoi.system.RebootResponse
	(*CancelRebootRequest)(nil),            // 12: gnoi.system.CancelRebootRequest
	(*CancelRebootResponse)(nil),           // 13: gnoi.system.CancelRebootResponse
	(*RebootStatusRequest)(nil),            // 14: gnoi.system.RebootStatusRequest
	(*RebootStatusResponse)(nil),           // 15: gnoi.system.RebootStatusResponse
	(*RebootStatus)(nil),                   // 16: gnoi.system.RebootStatus
	(*TimeRequest)(nil),                    // 17: gnoi.system.TimeRequest
	(*TimeResponse)(nil),                   // 18: gnoi.system.TimeResponse
	(*PingRequest)(nil),                    // 19: gnoi.system.PingRequest
	(*PingResponse)(nil),                   // 20: gnoi.system.PingResponse
	(*ProbeRequest)(nil),                   // 21: gnoi.system.ProbeRequest
	(*ProbeResponse)(nil),                  // 22: gnoi.system.ProbeResponse
	(*TracerouteRequest)(nil),              // 23: gnoi.system.TracerouteRequest
	(*TracerouteResponse)(nil),             // 24: gnoi.system.TracerouteResponse
	(*Package)(nil),                        // 25: gnoi.system.Package
	(*SetPackageRequest)(nil),              // 26: gnoi.system.SetPackageRequest
	(*SetPackageResponse)(nil),             // 27: gnoi.system.SetPackageResponse
	(*KillProcessRequest)(nil),             // 28: gnoi.system.KillProcessRequest
	(*KillProcessResponse)(nil),            // 29: gnoi.system.KillProcessResponse
	nil,                                    // 30: gnoi.system.ProbeResponse.CodesEntry
	nil,                                    // 31: gnoi.system.ProbeResponse.StatesEntry
	nil,                                    // 32: gnoi.system.ProbeResponse.ActivesEntry
	(*TracerouteResponse_IcmpExtData)(nil), // 33: gnoi.system.TracerouteResponse.IcmpExtData
	nil,                                    // 34: gnoi.system.TracerouteResponse.MplsEntry
	(*types.Path)(nil),                     // 35: gnoi.types.Path
	(types.L3Protocol)(0),                  // 36: gnoi.types.L3Protocol
	(*common.RemoteDownload)(nil),          // 37: gnoi.common.RemoteDownload
	(*types.HashType)(nil),                 // 38: gnoi.types.HashType
}
var file_system_proto_depIdxs = []int32{
	35, // 0: gnoi.system.SwitchControlProcessorRequest.control_processor:type_name -> gnoi.types.Path
	35, // 1: gnoi.system.SwitchControlProcessorResponse.control_processor:type_name -> gnoi.types.Path
	0,  // 2: gnoi.system.RebootRequest.method:type_name -> gnoi.system.RebootMethod
	35, // 3: gnoi.system.RebootRequest.subcomponents:type_name -> gnoi.types.Path
	35, // 4: gnoi.system.CancelRebootRequest.subcomponents:type_name -> gnoi.types.Path
	35, // 5: gnoi.system.RebootStatusRequest.subcomponents:type_name -> gnoi.types.Path
	0,  // 6: gnoi.system.RebootStatusResponse.method:type_name -> gnoi.system.RebootMethod
	16, // 7: gnoi.system.RebootStatusResponse.status:type_name -> gnoi.system.RebootStatus
	1,  // 8: gnoi.system.RebootStatus.status:type_name -> gnoi.system.RebootStatus.Status
	36, // 9: gnoi.system.PingRequest.l3protocol:type_name -> gnoi.types.L3Protocol
	2,  // 10: gnoi.system.ProbeResponse.code:type_name -> gnoi.system.ProbeResponse.Code
	3,  // 11: gnoi.system.ProbeResponse.state:type_name -> gnoi.system.ProbeResponse.State
	4,  // 12: gnoi.system.ProbeResponse.active:type_name -> gnoi.system.ProbeResponse.Active
	30, // 13: gnoi.system.ProbeResponse.codes:type_name -> gnoi.system.ProbeResponse.CodesEntry
	31, // 14: gnoi.system.ProbeResponse.states:type_name -> gnoi.system.ProbeResponse.StatesEntry
	32, // 15: gnoi.system.ProbeResponse.actives:type_name -> gnoi.system.ProbeResponse.ActivesEntry
	36, // 16: gnoi.system.TracerouteRequest.l3protocol:type_name -> gnoi.types.L3Protocol
	5,  // 17: gnoi.system.TracerouteRequest.l4protocol:type_name -> gnoi.system.TracerouteRequest.L4Protocol
	6,  // 18: gnoi.system.TracerouteResponse.state:type_name -> gnoi.system.TracerouteResponse.State
	34, // 19: gnoi.system.TracerouteResponse.mpls:type_name -> gnoi.system.TracerouteResponse.MplsEntry
	33, // 20: gnoi.system.TracerouteResponse.icmp_ext_data:type_name -> gnoi.system.TracerouteResponse.IcmpExtData
	37, // 21: gnoi.system.Package.remote_download:type_name -> gnoi.common.RemoteDownload
	25, // 22: gnoi.system.SetPackageRequest.package:type_name -> gnoi.system.Package
	38, // 23: gnoi.system.SetPackageRequest.hash:type_name -> gnoi.types.HashType
	7,  // 24: gnoi.system.KillProcessRequest.signal:type_name -> gnoi.system.KillProcessRequest.Signal
	19, // 25: gnoi.system.System.Ping:input_type -> gnoi.system.PingRequest
	21, // 26: gnoi.system.System.Probe:input_type -> gnoi.system.ProbeRequest
	23, // 27: gnoi.system.System.Traceroute:input_type -> gnoi.system.TracerouteRequest
	17, // 28: gnoi.system.System.Time:input_type -> gnoi.system.TimeRequest
	26, // 29: gnoi.system.System.SetPackage:input_type -> gnoi.system.SetPackageRequest
	8,  // 30: gnoi.system.System.SwitchControlProcessor:input_type -> gnoi.system.SwitchControlProcessorRequest
	10, // 31: gnoi.system.System.Reboot:input_type -> gnoi.system.RebootRequest
	14, // 32: gnoi.system.System.RebootStatus:input_type -> gnoi.system.RebootStatusRequest
	12, // 33: gnoi.system.System.CancelReboot:input_type -> gnoi.system.CancelRebootRequest
	28, // 34: gnoi.system.System.KillProcess:input_type -> gnoi.system.KillProcessRequest
	20, // 35: gnoi.system.System.Ping:output_type -> gnoi.system.PingResponse
	22, // 36: gnoi.system.System.Probe:output_type -> gnoi.system.ProbeResponse
	24, // 37: gnoi.system.System.Traceroute:output_type -> gnoi.system.TracerouteResponse
	18, // 38: gnoi.system.System.Time:output_type -> gnoi.system.TimeResponse
	27, // 39: gnoi.system.System.SetPackage:output_type -> gnoi.system.SetPackageResponse
	9,  // 40: gnoi.system.System.SwitchControlProcessor:output_type -> gnoi.system.SwitchControlProcessorResponse
	11, // 41: gnoi.system.System.Reboot:output_type -> gnoi.system.RebootResponse
	15, // 42: gnoi.system.System.RebootStatus:output_type -> gnoi.system.RebootStatusResponse
	13, // 43: gnoi.system.System.CancelReboot:output_type -> gnoi.system.CancelRebootResponse
	29, // 44: gnoi.system.System.KillProcess:output_type -> gnoi.system.KillProcessResponse
	35, // [35:45] is the sub-list for method output_type
	25, // [25:35] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_system_proto_init() }
func file_system_proto_init() {
	if File_system_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchControlProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchControlProcessorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRebootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRebootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracerouteResponse_IcmpExtData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_system_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ProbeRequest_Ifindex)(nil),
		(*ProbeRequest_Ifname)(nil),
		(*ProbeRequest_Ifaddr)(nil),
		(*ProbeRequest_Remote)(nil),
	}
	file_system_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*SetPackageRequest_Package)(nil),
		(*SetPackageRequest_Contents)(nil),
		(*SetPackageRequest_Hash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_system_proto_goTypes,
		DependencyIndexes: file_system_proto_depIdxs,
		EnumInfos:         file_system_proto_enumTypes,
		MessageInfos:      file_system_proto_msgTypes,
	}.Build()
	File_system_proto = out.File
	file_system_proto_rawDesc = nil
	file_system_proto_goTypes = nil
	file_system_proto_depIdxs = nil
}
