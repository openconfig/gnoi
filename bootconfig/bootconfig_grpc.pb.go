// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: bootconfig/bootconfig.proto

package bootconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BootConfigClient is the client API for BootConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootConfigClient interface {
	GetBootConfig(ctx context.Context, in *GetBootConfigRequest, opts ...grpc.CallOption) (*GetBootConfigResponse, error)
	SetBootConfig(ctx context.Context, in *SetBootConfigRequest, opts ...grpc.CallOption) (*SetBootConfigResponse, error)
}

type bootConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewBootConfigClient(cc grpc.ClientConnInterface) BootConfigClient {
	return &bootConfigClient{cc}
}

func (c *bootConfigClient) GetBootConfig(ctx context.Context, in *GetBootConfigRequest, opts ...grpc.CallOption) (*GetBootConfigResponse, error) {
	out := new(GetBootConfigResponse)
	err := c.cc.Invoke(ctx, "/gnoi.bootconfig.BootConfig/GetBootConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootConfigClient) SetBootConfig(ctx context.Context, in *SetBootConfigRequest, opts ...grpc.CallOption) (*SetBootConfigResponse, error) {
	out := new(SetBootConfigResponse)
	err := c.cc.Invoke(ctx, "/gnoi.bootconfig.BootConfig/SetBootConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootConfigServer is the server API for BootConfig service.
// All implementations must embed UnimplementedBootConfigServer
// for forward compatibility
type BootConfigServer interface {
	GetBootConfig(context.Context, *GetBootConfigRequest) (*GetBootConfigResponse, error)
	SetBootConfig(context.Context, *SetBootConfigRequest) (*SetBootConfigResponse, error)
	mustEmbedUnimplementedBootConfigServer()
}

// UnimplementedBootConfigServer must be embedded to have forward compatible implementations.
type UnimplementedBootConfigServer struct {
}

func (UnimplementedBootConfigServer) GetBootConfig(context.Context, *GetBootConfigRequest) (*GetBootConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootConfig not implemented")
}
func (UnimplementedBootConfigServer) SetBootConfig(context.Context, *SetBootConfigRequest) (*SetBootConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBootConfig not implemented")
}
func (UnimplementedBootConfigServer) mustEmbedUnimplementedBootConfigServer() {}

// UnsafeBootConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootConfigServer will
// result in compilation errors.
type UnsafeBootConfigServer interface {
	mustEmbedUnimplementedBootConfigServer()
}

func RegisterBootConfigServer(s grpc.ServiceRegistrar, srv BootConfigServer) {
	s.RegisterService(&BootConfig_ServiceDesc, srv)
}

func _BootConfig_GetBootConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBootConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootConfigServer).GetBootConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.bootconfig.BootConfig/GetBootConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootConfigServer).GetBootConfig(ctx, req.(*GetBootConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootConfig_SetBootConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBootConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootConfigServer).SetBootConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.bootconfig.BootConfig/SetBootConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootConfigServer).SetBootConfig(ctx, req.(*SetBootConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BootConfig_ServiceDesc is the grpc.ServiceDesc for BootConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BootConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.bootconfig.BootConfig",
	HandlerType: (*BootConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBootConfig",
			Handler:    _BootConfig_GetBootConfig_Handler,
		},
		{
			MethodName: "SetBootConfig",
			Handler:    _BootConfig_SetBootConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bootconfig/bootconfig.proto",
}
