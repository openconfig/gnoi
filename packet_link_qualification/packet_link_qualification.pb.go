// A generic network operational interface gRPC service to perform packet based
// link qualification operations on a network device.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: packet_link_qualification/packet_link_qualification.proto

package packet_link_qualification

import (
	types "github.com/openconfig/gnoi/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// States of qualification.
type QualificationState int32

const (
	QualificationState_QUALIFICATION_STATE_UNSPECIFIED QualificationState = 0
	QualificationState_QUALIFICATION_STATE_IDLE        QualificationState = 1 // Not set up.
	QualificationState_QUALIFICATION_STATE_READY       QualificationState = 2 // Set up completed, ready to qualify.
	QualificationState_QUALIFICATION_STATE_RUNNING     QualificationState = 3 // Qualification underway.
	QualificationState_QUALIFICATION_STATE_COMPLETED   QualificationState = 4 // Qualification is complete.
	QualificationState_QUALIFICATION_STATE_FAILED      QualificationState = 5 // Qualification failed for some reasons.
)

// Enum value maps for QualificationState.
var (
	QualificationState_name = map[int32]string{
		0: "QUALIFICATION_STATE_UNSPECIFIED",
		1: "QUALIFICATION_STATE_IDLE",
		2: "QUALIFICATION_STATE_READY",
		3: "QUALIFICATION_STATE_RUNNING",
		4: "QUALIFICATION_STATE_COMPLETED",
		5: "QUALIFICATION_STATE_FAILED",
	}
	QualificationState_value = map[string]int32{
		"QUALIFICATION_STATE_UNSPECIFIED": 0,
		"QUALIFICATION_STATE_IDLE":        1,
		"QUALIFICATION_STATE_READY":       2,
		"QUALIFICATION_STATE_RUNNING":     3,
		"QUALIFICATION_STATE_COMPLETED":   4,
		"QUALIFICATION_STATE_FAILED":      5,
	}
)

func (x QualificationState) Enum() *QualificationState {
	p := new(QualificationState)
	*p = x
	return p
}

func (x QualificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QualificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_link_qualification_packet_link_qualification_proto_enumTypes[0].Descriptor()
}

func (QualificationState) Type() protoreflect.EnumType {
	return &file_packet_link_qualification_packet_link_qualification_proto_enumTypes[0]
}

func (x QualificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QualificationState.Descriptor instead.
func (QualificationState) EnumDescriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{0}
}

type QualificationEnd int32

const (
	QualificationEnd_END_UNSPECIFIED QualificationEnd = 0
	// Responsible for generating loopback packets, etc.
	QualificationEnd_END_NEAR QualificationEnd = 1
	// Responsible for looping back packets only.
	QualificationEnd_END_FAR QualificationEnd = 2
)

// Enum value maps for QualificationEnd.
var (
	QualificationEnd_name = map[int32]string{
		0: "END_UNSPECIFIED",
		1: "END_NEAR",
		2: "END_FAR",
	}
	QualificationEnd_value = map[string]int32{
		"END_UNSPECIFIED": 0,
		"END_NEAR":        1,
		"END_FAR":         2,
	}
)

func (x QualificationEnd) Enum() *QualificationEnd {
	p := new(QualificationEnd)
	*p = x
	return p
}

func (x QualificationEnd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QualificationEnd) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_link_qualification_packet_link_qualification_proto_enumTypes[1].Descriptor()
}

func (QualificationEnd) Type() protoreflect.EnumType {
	return &file_packet_link_qualification_packet_link_qualification_proto_enumTypes[1]
}

func (x QualificationEnd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QualificationEnd.Descriptor instead.
func (QualificationEnd) EnumDescriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{1}
}

type StartPacketQualificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per interface start configuration request.
	Config []*QualificationConfiguration `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`
}

func (x *StartPacketQualificationRequest) Reset() {
	*x = StartPacketQualificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPacketQualificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPacketQualificationRequest) ProtoMessage() {}

func (x *StartPacketQualificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPacketQualificationRequest.ProtoReflect.Descriptor instead.
func (*StartPacketQualificationRequest) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{0}
}

func (x *StartPacketQualificationRequest) GetConfig() []*QualificationConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

type QualificationConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID assigned to the given test. The ID value must be unique among the
	// tests running on this agent.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Path to the interface corresponding to the port to test.
	Interface *types.Path `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	// The minimum amount of wait time before sending packets on the link. It
	// gives peer additional time to prepare. The default value for this field
	// is 70 seconds.
	MinimumWaitBeforePreparationSeconds int32 `protobuf:"varint,3,opt,name=minimum_wait_before_preparation_seconds,json=minimumWaitBeforePreparationSeconds,proto3" json:"minimum_wait_before_preparation_seconds,omitempty"`
	// The total number of packets to send on the link in the preparation phase.
	NumPreparationPackets int64 `protobuf:"varint,4,opt,name=num_preparation_packets,json=numPreparationPackets,proto3" json:"num_preparation_packets,omitempty"`
	// The amount of time in which the preparation must complete.
	PreparationTimeoutSeconds int32 `protobuf:"varint,5,opt,name=preparation_timeout_seconds,json=preparationTimeoutSeconds,proto3" json:"preparation_timeout_seconds,omitempty"`
	// The amount of time the qualification will run before we recapture the
	// packets and check if there was any drop.
	QualificationDurationSeconds int32 `protobuf:"varint,6,opt,name=qualification_duration_seconds,json=qualificationDurationSeconds,proto3" json:"qualification_duration_seconds,omitempty"`
	// Qualification end.
	QualificationEnd QualificationEnd `protobuf:"varint,7,opt,name=qualification_end,json=qualificationEnd,proto3,enum=gnoi.packet_link_qualification.QualificationEnd" json:"qualification_end,omitempty"`
	// The default value for this field is 10 seconds. This is the
	// time period that the link qualification service should wait
	// between the two samples of port counters that it reads from the
	// device - both prior to starting qualification, and right after
	// qualification. The qualification itself runs for
	// Qaulification_duration_seconds.
	TestWaitBetweenSampleSeconds int32 `protobuf:"varint,8,opt,name=test_wait_between_sample_seconds,json=testWaitBetweenSampleSeconds,proto3" json:"test_wait_between_sample_seconds,omitempty"`
	// The default value of this field is 10 seconds. During this period, the
	// link qualification state machine must undo things it setup during start
	// of the test and ensure all packets circulating as part of the test have
	// been dropped.
	MinimumWaitPostQualificationSeconds int32 `protobuf:"varint,9,opt,name=minimum_wait_post_qualification_seconds,json=minimumWaitPostQualificationSeconds,proto3" json:"minimum_wait_post_qualification_seconds,omitempty"`
	// default packet_size is 1500 bytes.
	PacketSize uint32 `protobuf:"varint,10,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
}

func (x *QualificationConfiguration) Reset() {
	*x = QualificationConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualificationConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualificationConfiguration) ProtoMessage() {}

func (x *QualificationConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualificationConfiguration.ProtoReflect.Descriptor instead.
func (*QualificationConfiguration) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{1}
}

func (x *QualificationConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QualificationConfiguration) GetInterface() *types.Path {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *QualificationConfiguration) GetMinimumWaitBeforePreparationSeconds() int32 {
	if x != nil {
		return x.MinimumWaitBeforePreparationSeconds
	}
	return 0
}

func (x *QualificationConfiguration) GetNumPreparationPackets() int64 {
	if x != nil {
		return x.NumPreparationPackets
	}
	return 0
}

func (x *QualificationConfiguration) GetPreparationTimeoutSeconds() int32 {
	if x != nil {
		return x.PreparationTimeoutSeconds
	}
	return 0
}

func (x *QualificationConfiguration) GetQualificationDurationSeconds() int32 {
	if x != nil {
		return x.QualificationDurationSeconds
	}
	return 0
}

func (x *QualificationConfiguration) GetQualificationEnd() QualificationEnd {
	if x != nil {
		return x.QualificationEnd
	}
	return QualificationEnd_END_UNSPECIFIED
}

func (x *QualificationConfiguration) GetTestWaitBetweenSampleSeconds() int32 {
	if x != nil {
		return x.TestWaitBetweenSampleSeconds
	}
	return 0
}

func (x *QualificationConfiguration) GetMinimumWaitPostQualificationSeconds() int32 {
	if x != nil {
		return x.MinimumWaitPostQualificationSeconds
	}
	return 0
}

func (x *QualificationConfiguration) GetPacketSize() uint32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

type StartPacketQualificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per interface start response.
	Response []*StartResponse `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *StartPacketQualificationResponse) Reset() {
	*x = StartPacketQualificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPacketQualificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPacketQualificationResponse) ProtoMessage() {}

func (x *StartPacketQualificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPacketQualificationResponse.ProtoReflect.Descriptor instead.
func (*StartPacketQualificationResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{2}
}

func (x *StartPacketQualificationResponse) GetResponse() []*StartResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type StartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The same ID given in the start request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{3}
}

func (x *StartResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopPacketQualificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDs assigned to the given qualification operations.
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *StopPacketQualificationRequest) Reset() {
	*x = StopPacketQualificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPacketQualificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPacketQualificationRequest) ProtoMessage() {}

func (x *StopPacketQualificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPacketQualificationRequest.ProtoReflect.Descriptor instead.
func (*StopPacketQualificationRequest) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{4}
}

func (x *StopPacketQualificationRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type StopPacketQualificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per interface stop response.
	Response []*StopResponse `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *StopPacketQualificationResponse) Reset() {
	*x = StopPacketQualificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPacketQualificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPacketQualificationResponse) ProtoMessage() {}

func (x *StopPacketQualificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPacketQualificationResponse.ProtoReflect.Descriptor instead.
func (*StopPacketQualificationResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{5}
}

func (x *StopPacketQualificationResponse) GetResponse() []*StopResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The same ID given in the stop request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{6}
}

func (x *StopResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPacketQualificationResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDs assigned to the given qualification operations.
	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPacketQualificationResultRequest) Reset() {
	*x = GetPacketQualificationResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPacketQualificationResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPacketQualificationResultRequest) ProtoMessage() {}

func (x *GetPacketQualificationResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPacketQualificationResultRequest.ProtoReflect.Descriptor instead.
func (*GetPacketQualificationResultRequest) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{7}
}

func (x *GetPacketQualificationResultRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type QualificationResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state the test was in when the results were snapshotted.
	CurrentState QualificationState `protobuf:"varint,1,opt,name=current_state,json=currentState,proto3,enum=gnoi.packet_link_qualification.QualificationState" json:"current_state,omitempty"`
	// The total number of test packets sent.
	NumSentPackets int64 `protobuf:"varint,2,opt,name=num_sent_packets,json=numSentPackets,proto3" json:"num_sent_packets,omitempty"`
	// The number of packets that were recaptured.
	NumOkPackets int64 `protobuf:"varint,3,opt,name=num_ok_packets,json=numOkPackets,proto3" json:"num_ok_packets,omitempty"`
	// The number of packets transmitted, but which experienced corruption.
	NumCorruptPackets int64 `protobuf:"varint,4,opt,name=num_corrupt_packets,json=numCorruptPackets,proto3" json:"num_corrupt_packets,omitempty"`
	// The test start time since epoch.
	StartTimeNanos int64 `protobuf:"varint,5,opt,name=start_time_nanos,json=startTimeNanos,proto3" json:"start_time_nanos,omitempty"`
	// The test end time, or the current snapshot time since epoch.
	EndTimeNanos int64 `protobuf:"varint,6,opt,name=end_time_nanos,json=endTimeNanos,proto3" json:"end_time_nanos,omitempty"`
	// The bitrate before the qualification is started. Bytes per second.
	InitialRateBytesPerSecond int64 `protobuf:"varint,7,opt,name=initial_rate_bytes_per_second,json=initialRateBytesPerSecond,proto3" json:"initial_rate_bytes_per_second,omitempty"`
	// The bitrate after the qualification is completed. Bytes per second.
	FinalRateBytesPerSecond int64 `protobuf:"varint,8,opt,name=final_rate_bytes_per_second,json=finalRateBytesPerSecond,proto3" json:"final_rate_bytes_per_second,omitempty"`
	// The number of packets that were dropped by the MMU for the port under test.
	NumPacketsDroppedByMmu int64 `protobuf:"varint,9,opt,name=num_packets_dropped_by_mmu,json=numPacketsDroppedByMmu,proto3" json:"num_packets_dropped_by_mmu,omitempty"`
	// Error message if something failed during qualification.
	ErrorMessage string `protobuf:"bytes,10,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *QualificationResults) Reset() {
	*x = QualificationResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualificationResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualificationResults) ProtoMessage() {}

func (x *QualificationResults) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualificationResults.ProtoReflect.Descriptor instead.
func (*QualificationResults) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{8}
}

func (x *QualificationResults) GetCurrentState() QualificationState {
	if x != nil {
		return x.CurrentState
	}
	return QualificationState_QUALIFICATION_STATE_UNSPECIFIED
}

func (x *QualificationResults) GetNumSentPackets() int64 {
	if x != nil {
		return x.NumSentPackets
	}
	return 0
}

func (x *QualificationResults) GetNumOkPackets() int64 {
	if x != nil {
		return x.NumOkPackets
	}
	return 0
}

func (x *QualificationResults) GetNumCorruptPackets() int64 {
	if x != nil {
		return x.NumCorruptPackets
	}
	return 0
}

func (x *QualificationResults) GetStartTimeNanos() int64 {
	if x != nil {
		return x.StartTimeNanos
	}
	return 0
}

func (x *QualificationResults) GetEndTimeNanos() int64 {
	if x != nil {
		return x.EndTimeNanos
	}
	return 0
}

func (x *QualificationResults) GetInitialRateBytesPerSecond() int64 {
	if x != nil {
		return x.InitialRateBytesPerSecond
	}
	return 0
}

func (x *QualificationResults) GetFinalRateBytesPerSecond() int64 {
	if x != nil {
		return x.FinalRateBytesPerSecond
	}
	return 0
}

func (x *QualificationResults) GetNumPacketsDroppedByMmu() int64 {
	if x != nil {
		return x.NumPacketsDroppedByMmu
	}
	return 0
}

func (x *QualificationResults) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetPacketQualificationResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per interface qualification response.
	Response []*GetResponse `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *GetPacketQualificationResultResponse) Reset() {
	*x = GetPacketQualificationResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPacketQualificationResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPacketQualificationResultResponse) ProtoMessage() {}

func (x *GetPacketQualificationResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPacketQualificationResultResponse.ProtoReflect.Descriptor instead.
func (*GetPacketQualificationResultResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{9}
}

func (x *GetPacketQualificationResultResponse) GetResponse() []*GetResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The same ID given in the get request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Qualification results.
	Result *QualificationResults `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{10}
}

func (x *GetResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetResponse) GetResult() *QualificationResults {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_packet_link_qualification_packet_link_qualification_proto protoreflect.FileDescriptor

var file_packet_link_qualification_packet_link_qualification_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a, 0x1f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x8e, 0x05, 0x0a, 0x1a, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x54, 0x0a, 0x27, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x23, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x57, 0x61, 0x69, 0x74, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x1b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x19, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x44, 0x0a,
	0x1e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x5d, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x65,
	0x73, 0x74, 0x57, 0x61, 0x69, 0x74, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x6d, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x30, 0x0a, 0x1e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x35, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa0, 0x04, 0x0a, 0x14, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x57, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6b, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d,
	0x4f, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6d, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6e,
	0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x42, 0x79, 0x4d, 0x6d, 0x75, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0xda, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x1f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x42, 0x0a, 0x10, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x52, 0x10, 0x02, 0x32, 0xff, 0x03, 0x0a, 0x0e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x12, 0x9f, 0x01, 0x0a,
	0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c,
	0x01, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xab, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0xd2, 0x3e, 0x05, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_packet_link_qualification_packet_link_qualification_proto_rawDescOnce sync.Once
	file_packet_link_qualification_packet_link_qualification_proto_rawDescData = file_packet_link_qualification_packet_link_qualification_proto_rawDesc
)

func file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP() []byte {
	file_packet_link_qualification_packet_link_qualification_proto_rawDescOnce.Do(func() {
		file_packet_link_qualification_packet_link_qualification_proto_rawDescData = protoimpl.X.CompressGZIP(file_packet_link_qualification_packet_link_qualification_proto_rawDescData)
	})
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescData
}

var file_packet_link_qualification_packet_link_qualification_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_packet_link_qualification_packet_link_qualification_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_packet_link_qualification_packet_link_qualification_proto_goTypes = []interface{}{
	(QualificationState)(0),                      // 0: gnoi.packet_link_qualification.QualificationState
	(QualificationEnd)(0),                        // 1: gnoi.packet_link_qualification.QualificationEnd
	(*StartPacketQualificationRequest)(nil),      // 2: gnoi.packet_link_qualification.StartPacketQualificationRequest
	(*QualificationConfiguration)(nil),           // 3: gnoi.packet_link_qualification.QualificationConfiguration
	(*StartPacketQualificationResponse)(nil),     // 4: gnoi.packet_link_qualification.StartPacketQualificationResponse
	(*StartResponse)(nil),                        // 5: gnoi.packet_link_qualification.StartResponse
	(*StopPacketQualificationRequest)(nil),       // 6: gnoi.packet_link_qualification.StopPacketQualificationRequest
	(*StopPacketQualificationResponse)(nil),      // 7: gnoi.packet_link_qualification.StopPacketQualificationResponse
	(*StopResponse)(nil),                         // 8: gnoi.packet_link_qualification.StopResponse
	(*GetPacketQualificationResultRequest)(nil),  // 9: gnoi.packet_link_qualification.GetPacketQualificationResultRequest
	(*QualificationResults)(nil),                 // 10: gnoi.packet_link_qualification.QualificationResults
	(*GetPacketQualificationResultResponse)(nil), // 11: gnoi.packet_link_qualification.GetPacketQualificationResultResponse
	(*GetResponse)(nil),                          // 12: gnoi.packet_link_qualification.GetResponse
	(*types.Path)(nil),                           // 13: gnoi.types.Path
}
var file_packet_link_qualification_packet_link_qualification_proto_depIdxs = []int32{
	3,  // 0: gnoi.packet_link_qualification.StartPacketQualificationRequest.config:type_name -> gnoi.packet_link_qualification.QualificationConfiguration
	13, // 1: gnoi.packet_link_qualification.QualificationConfiguration.interface:type_name -> gnoi.types.Path
	1,  // 2: gnoi.packet_link_qualification.QualificationConfiguration.qualification_end:type_name -> gnoi.packet_link_qualification.QualificationEnd
	5,  // 3: gnoi.packet_link_qualification.StartPacketQualificationResponse.response:type_name -> gnoi.packet_link_qualification.StartResponse
	8,  // 4: gnoi.packet_link_qualification.StopPacketQualificationResponse.response:type_name -> gnoi.packet_link_qualification.StopResponse
	0,  // 5: gnoi.packet_link_qualification.QualificationResults.current_state:type_name -> gnoi.packet_link_qualification.QualificationState
	12, // 6: gnoi.packet_link_qualification.GetPacketQualificationResultResponse.response:type_name -> gnoi.packet_link_qualification.GetResponse
	10, // 7: gnoi.packet_link_qualification.GetResponse.result:type_name -> gnoi.packet_link_qualification.QualificationResults
	2,  // 8: gnoi.packet_link_qualification.PacketLinkQual.StartPacketQualification:input_type -> gnoi.packet_link_qualification.StartPacketQualificationRequest
	6,  // 9: gnoi.packet_link_qualification.PacketLinkQual.StopPacketQualification:input_type -> gnoi.packet_link_qualification.StopPacketQualificationRequest
	9,  // 10: gnoi.packet_link_qualification.PacketLinkQual.GetPacketQualificationResult:input_type -> gnoi.packet_link_qualification.GetPacketQualificationResultRequest
	4,  // 11: gnoi.packet_link_qualification.PacketLinkQual.StartPacketQualification:output_type -> gnoi.packet_link_qualification.StartPacketQualificationResponse
	7,  // 12: gnoi.packet_link_qualification.PacketLinkQual.StopPacketQualification:output_type -> gnoi.packet_link_qualification.StopPacketQualificationResponse
	11, // 13: gnoi.packet_link_qualification.PacketLinkQual.GetPacketQualificationResult:output_type -> gnoi.packet_link_qualification.GetPacketQualificationResultResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_packet_link_qualification_packet_link_qualification_proto_init() }
func file_packet_link_qualification_packet_link_qualification_proto_init() {
	if File_packet_link_qualification_packet_link_qualification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPacketQualificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualificationConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPacketQualificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPacketQualificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPacketQualificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPacketQualificationResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualificationResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPacketQualificationResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packet_link_qualification_packet_link_qualification_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_packet_link_qualification_packet_link_qualification_proto_goTypes,
		DependencyIndexes: file_packet_link_qualification_packet_link_qualification_proto_depIdxs,
		EnumInfos:         file_packet_link_qualification_packet_link_qualification_proto_enumTypes,
		MessageInfos:      file_packet_link_qualification_packet_link_qualification_proto_msgTypes,
	}.Build()
	File_packet_link_qualification_packet_link_qualification_proto = out.File
	file_packet_link_qualification_packet_link_qualification_proto_rawDesc = nil
	file_packet_link_qualification_packet_link_qualification_proto_goTypes = nil
	file_packet_link_qualification_packet_link_qualification_proto_depIdxs = nil
}
