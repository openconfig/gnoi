// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.10
// source: packet_link_qualification/packet_link_qualification.proto

package linkqual

import (
	_ "github.com/openconfig/gnoi/types"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QualificationState int32

const (
	QualificationState_QUALIFICATION_STATE_UNSPECIFIED QualificationState = 0
	QualificationState_QUALIFICATION_STATE_ERROR       QualificationState = 1
	QualificationState_QUALIFICATION_STATE_IDLE        QualificationState = 2
	QualificationState_QUALIFICATION_STATE_SETUP       QualificationState = 3
	QualificationState_QUALIFICATION_STATE_RUNNING     QualificationState = 4
	QualificationState_QUALIFICATION_STATE_TEARDOWN    QualificationState = 5
	QualificationState_QUALIFICATION_STATE_COMPLETED   QualificationState = 6
)

// Enum value maps for QualificationState.
var (
	QualificationState_name = map[int32]string{
		0: "QUALIFICATION_STATE_UNSPECIFIED",
		1: "QUALIFICATION_STATE_ERROR",
		2: "QUALIFICATION_STATE_IDLE",
		3: "QUALIFICATION_STATE_SETUP",
		4: "QUALIFICATION_STATE_RUNNING",
		5: "QUALIFICATION_STATE_TEARDOWN",
		6: "QUALIFICATION_STATE_COMPLETED",
	}
	QualificationState_value = map[string]int32{
		"QUALIFICATION_STATE_UNSPECIFIED": 0,
		"QUALIFICATION_STATE_ERROR":       1,
		"QUALIFICATION_STATE_IDLE":        2,
		"QUALIFICATION_STATE_SETUP":       3,
		"QUALIFICATION_STATE_RUNNING":     4,
		"QUALIFICATION_STATE_TEARDOWN":    5,
		"QUALIFICATION_STATE_COMPLETED":   6,
	}
)

func (x QualificationState) Enum() *QualificationState {
	p := new(QualificationState)
	*p = x
	return p
}

func (x QualificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QualificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_link_qualification_packet_link_qualification_proto_enumTypes[0].Descriptor()
}

func (QualificationState) Type() protoreflect.EnumType {
	return &file_packet_link_qualification_packet_link_qualification_proto_enumTypes[0]
}

func (x QualificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QualificationState.Descriptor instead.
func (QualificationState) EnumDescriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{0}
}

type PacketInjectorLoopbackMode int32

const (
	PacketInjectorLoopbackMode_PACKET_INJECTOR_LOOPBACK_MODE_UNSPECIFIED PacketInjectorLoopbackMode = 0
	PacketInjectorLoopbackMode_PACKET_INJECTOR_LOOPBACK_MODE_PMD         PacketInjectorLoopbackMode = 1
	PacketInjectorLoopbackMode_PACKET_INJECTOR_LOOPBACK_MODE_ASIC        PacketInjectorLoopbackMode = 2
)

// Enum value maps for PacketInjectorLoopbackMode.
var (
	PacketInjectorLoopbackMode_name = map[int32]string{
		0: "PACKET_INJECTOR_LOOPBACK_MODE_UNSPECIFIED",
		1: "PACKET_INJECTOR_LOOPBACK_MODE_PMD",
		2: "PACKET_INJECTOR_LOOPBACK_MODE_ASIC",
	}
	PacketInjectorLoopbackMode_value = map[string]int32{
		"PACKET_INJECTOR_LOOPBACK_MODE_UNSPECIFIED": 0,
		"PACKET_INJECTOR_LOOPBACK_MODE_PMD":         1,
		"PACKET_INJECTOR_LOOPBACK_MODE_ASIC":        2,
	}
)

func (x PacketInjectorLoopbackMode) Enum() *PacketInjectorLoopbackMode {
	p := new(PacketInjectorLoopbackMode)
	*p = x
	return p
}

func (x PacketInjectorLoopbackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketInjectorLoopbackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_link_qualification_packet_link_qualification_proto_enumTypes[1].Descriptor()
}

func (PacketInjectorLoopbackMode) Type() protoreflect.EnumType {
	return &file_packet_link_qualification_packet_link_qualification_proto_enumTypes[1]
}

func (x PacketInjectorLoopbackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketInjectorLoopbackMode.Descriptor instead.
func (PacketInjectorLoopbackMode) EnumDescriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{1}
}

type HeaderMatchField int32

const (
	HeaderMatchField_HEADER_MATCH_FIELD_UNSPECIFIED HeaderMatchField = 0
	HeaderMatchField_HEADER_MATCH_FIELD_L2          HeaderMatchField = 1
	HeaderMatchField_HEADER_MATCH_FIELD_L3          HeaderMatchField = 2
	HeaderMatchField_HEADER_MATCH_FIELD_L4          HeaderMatchField = 3
)

// Enum value maps for HeaderMatchField.
var (
	HeaderMatchField_name = map[int32]string{
		0: "HEADER_MATCH_FIELD_UNSPECIFIED",
		1: "HEADER_MATCH_FIELD_L2",
		2: "HEADER_MATCH_FIELD_L3",
		3: "HEADER_MATCH_FIELD_L4",
	}
	HeaderMatchField_value = map[string]int32{
		"HEADER_MATCH_FIELD_UNSPECIFIED": 0,
		"HEADER_MATCH_FIELD_L2":          1,
		"HEADER_MATCH_FIELD_L3":          2,
		"HEADER_MATCH_FIELD_L4":          3,
	}
)

func (x HeaderMatchField) Enum() *HeaderMatchField {
	p := new(HeaderMatchField)
	*p = x
	return p
}

func (x HeaderMatchField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderMatchField) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_link_qualification_packet_link_qualification_proto_enumTypes[2].Descriptor()
}

func (HeaderMatchField) Type() protoreflect.EnumType {
	return &file_packet_link_qualification_packet_link_qualification_proto_enumTypes[2]
}

func (x HeaderMatchField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderMatchField.Descriptor instead.
func (HeaderMatchField) EnumDescriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{2}
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*QualificationConfiguration `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRequest) GetInterfaces() []*QualificationConfiguration {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]*status.Status `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{1}
}

func (x *CreateResponse) GetStatus() map[string]*status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type NTPSyncedTiming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	TeardownTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=teardown_time,json=teardownTime,proto3" json:"teardown_time,omitempty"`
}

func (x *NTPSyncedTiming) Reset() {
	*x = NTPSyncedTiming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NTPSyncedTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NTPSyncedTiming) ProtoMessage() {}

func (x *NTPSyncedTiming) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NTPSyncedTiming.ProtoReflect.Descriptor instead.
func (*NTPSyncedTiming) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{2}
}

func (x *NTPSyncedTiming) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *NTPSyncedTiming) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *NTPSyncedTiming) GetTeardownTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TeardownTime
	}
	return nil
}

type RPCSyncedTiming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreSyncDuration  *durationpb.Duration `protobuf:"bytes,1,opt,name=pre_sync_duration,json=preSyncDuration,proto3" json:"pre_sync_duration,omitempty"`
	SetupDuration    *durationpb.Duration `protobuf:"bytes,2,opt,name=setup_duration,json=setupDuration,proto3" json:"setup_duration,omitempty"`
	Duration         *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	PostSyncDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=post_sync_duration,json=postSyncDuration,proto3" json:"post_sync_duration,omitempty"`
	TeardownDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=teardown_duration,json=teardownDuration,proto3" json:"teardown_duration,omitempty"`
}

func (x *RPCSyncedTiming) Reset() {
	*x = RPCSyncedTiming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCSyncedTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCSyncedTiming) ProtoMessage() {}

func (x *RPCSyncedTiming) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCSyncedTiming.ProtoReflect.Descriptor instead.
func (*RPCSyncedTiming) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{3}
}

func (x *RPCSyncedTiming) GetPreSyncDuration() *durationpb.Duration {
	if x != nil {
		return x.PreSyncDuration
	}
	return nil
}

func (x *RPCSyncedTiming) GetSetupDuration() *durationpb.Duration {
	if x != nil {
		return x.SetupDuration
	}
	return nil
}

func (x *RPCSyncedTiming) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *RPCSyncedTiming) GetPostSyncDuration() *durationpb.Duration {
	if x != nil {
		return x.PostSyncDuration
	}
	return nil
}

func (x *RPCSyncedTiming) GetTeardownDuration() *durationpb.Duration {
	if x != nil {
		return x.TeardownDuration
	}
	return nil
}

type QualificationConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Types that are assignable to Timing:
	//
	//	*QualificationConfiguration_Ntp
	//	*QualificationConfiguration_Rpc
	Timing isQualificationConfiguration_Timing `protobuf_oneof:"timing"`
	// Types that are assignable to EndpointType:
	//
	//	*QualificationConfiguration_PacketGenerator
	//	*QualificationConfiguration_PacketInjector
	//	*QualificationConfiguration_PmdLoopback
	//	*QualificationConfiguration_AsicLoopback
	EndpointType isQualificationConfiguration_EndpointType `protobuf_oneof:"endpoint_type"`
}

func (x *QualificationConfiguration) Reset() {
	*x = QualificationConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualificationConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualificationConfiguration) ProtoMessage() {}

func (x *QualificationConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualificationConfiguration.ProtoReflect.Descriptor instead.
func (*QualificationConfiguration) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{4}
}

func (x *QualificationConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QualificationConfiguration) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (m *QualificationConfiguration) GetTiming() isQualificationConfiguration_Timing {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (x *QualificationConfiguration) GetNtp() *NTPSyncedTiming {
	if x, ok := x.GetTiming().(*QualificationConfiguration_Ntp); ok {
		return x.Ntp
	}
	return nil
}

func (x *QualificationConfiguration) GetRpc() *RPCSyncedTiming {
	if x, ok := x.GetTiming().(*QualificationConfiguration_Rpc); ok {
		return x.Rpc
	}
	return nil
}

func (m *QualificationConfiguration) GetEndpointType() isQualificationConfiguration_EndpointType {
	if m != nil {
		return m.EndpointType
	}
	return nil
}

func (x *QualificationConfiguration) GetPacketGenerator() *PacketGeneratorConfiguration {
	if x, ok := x.GetEndpointType().(*QualificationConfiguration_PacketGenerator); ok {
		return x.PacketGenerator
	}
	return nil
}

func (x *QualificationConfiguration) GetPacketInjector() *PacketInjectorConfiguration {
	if x, ok := x.GetEndpointType().(*QualificationConfiguration_PacketInjector); ok {
		return x.PacketInjector
	}
	return nil
}

func (x *QualificationConfiguration) GetPmdLoopback() *PmdLoopbackConfiguration {
	if x, ok := x.GetEndpointType().(*QualificationConfiguration_PmdLoopback); ok {
		return x.PmdLoopback
	}
	return nil
}

func (x *QualificationConfiguration) GetAsicLoopback() *AsicLoopbackConfiguration {
	if x, ok := x.GetEndpointType().(*QualificationConfiguration_AsicLoopback); ok {
		return x.AsicLoopback
	}
	return nil
}

type isQualificationConfiguration_Timing interface {
	isQualificationConfiguration_Timing()
}

type QualificationConfiguration_Ntp struct {
	Ntp *NTPSyncedTiming `protobuf:"bytes,101,opt,name=ntp,proto3,oneof"`
}

type QualificationConfiguration_Rpc struct {
	Rpc *RPCSyncedTiming `protobuf:"bytes,102,opt,name=rpc,proto3,oneof"`
}

func (*QualificationConfiguration_Ntp) isQualificationConfiguration_Timing() {}

func (*QualificationConfiguration_Rpc) isQualificationConfiguration_Timing() {}

type isQualificationConfiguration_EndpointType interface {
	isQualificationConfiguration_EndpointType()
}

type QualificationConfiguration_PacketGenerator struct {
	PacketGenerator *PacketGeneratorConfiguration `protobuf:"bytes,111,opt,name=packet_generator,json=packetGenerator,proto3,oneof"`
}

type QualificationConfiguration_PacketInjector struct {
	PacketInjector *PacketInjectorConfiguration `protobuf:"bytes,112,opt,name=packet_injector,json=packetInjector,proto3,oneof"`
}

type QualificationConfiguration_PmdLoopback struct {
	PmdLoopback *PmdLoopbackConfiguration `protobuf:"bytes,113,opt,name=pmd_loopback,json=pmdLoopback,proto3,oneof"`
}

type QualificationConfiguration_AsicLoopback struct {
	AsicLoopback *AsicLoopbackConfiguration `protobuf:"bytes,114,opt,name=asic_loopback,json=asicLoopback,proto3,oneof"`
}

func (*QualificationConfiguration_PacketGenerator) isQualificationConfiguration_EndpointType() {}

func (*QualificationConfiguration_PacketInjector) isQualificationConfiguration_EndpointType() {}

func (*QualificationConfiguration_PmdLoopback) isQualificationConfiguration_EndpointType() {}

func (*QualificationConfiguration_AsicLoopback) isQualificationConfiguration_EndpointType() {}

type PacketGeneratorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketRate uint64 `protobuf:"varint,1,opt,name=packet_rate,json=packetRate,proto3" json:"packet_rate,omitempty"`
	PacketSize uint32 `protobuf:"varint,2,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
}

func (x *PacketGeneratorConfiguration) Reset() {
	*x = PacketGeneratorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketGeneratorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketGeneratorConfiguration) ProtoMessage() {}

func (x *PacketGeneratorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketGeneratorConfiguration.ProtoReflect.Descriptor instead.
func (*PacketGeneratorConfiguration) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{5}
}

func (x *PacketGeneratorConfiguration) GetPacketRate() uint64 {
	if x != nil {
		return x.PacketRate
	}
	return 0
}

func (x *PacketGeneratorConfiguration) GetPacketSize() uint32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

type PacketInjectorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketCount uint32 `protobuf:"varint,1,opt,name=packet_count,json=packetCount,proto3" json:"packet_count,omitempty"`
	PacketSize  uint32 `protobuf:"varint,2,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	// Types that are assignable to LoopbackMode:
	//
	//	*PacketInjectorConfiguration_PmdLoopback
	//	*PacketInjectorConfiguration_AsicLoopback
	LoopbackMode isPacketInjectorConfiguration_LoopbackMode `protobuf_oneof:"loopback_mode"`
}

func (x *PacketInjectorConfiguration) Reset() {
	*x = PacketInjectorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketInjectorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketInjectorConfiguration) ProtoMessage() {}

func (x *PacketInjectorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketInjectorConfiguration.ProtoReflect.Descriptor instead.
func (*PacketInjectorConfiguration) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{6}
}

func (x *PacketInjectorConfiguration) GetPacketCount() uint32 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *PacketInjectorConfiguration) GetPacketSize() uint32 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (m *PacketInjectorConfiguration) GetLoopbackMode() isPacketInjectorConfiguration_LoopbackMode {
	if m != nil {
		return m.LoopbackMode
	}
	return nil
}

func (x *PacketInjectorConfiguration) GetPmdLoopback() *PmdLoopbackConfiguration {
	if x, ok := x.GetLoopbackMode().(*PacketInjectorConfiguration_PmdLoopback); ok {
		return x.PmdLoopback
	}
	return nil
}

func (x *PacketInjectorConfiguration) GetAsicLoopback() *AsicLoopbackConfiguration {
	if x, ok := x.GetLoopbackMode().(*PacketInjectorConfiguration_AsicLoopback); ok {
		return x.AsicLoopback
	}
	return nil
}

type isPacketInjectorConfiguration_LoopbackMode interface {
	isPacketInjectorConfiguration_LoopbackMode()
}

type PacketInjectorConfiguration_PmdLoopback struct {
	PmdLoopback *PmdLoopbackConfiguration `protobuf:"bytes,101,opt,name=pmd_loopback,json=pmdLoopback,proto3,oneof"`
}

type PacketInjectorConfiguration_AsicLoopback struct {
	AsicLoopback *AsicLoopbackConfiguration `protobuf:"bytes,102,opt,name=asic_loopback,json=asicLoopback,proto3,oneof"`
}

func (*PacketInjectorConfiguration_PmdLoopback) isPacketInjectorConfiguration_LoopbackMode() {}

func (*PacketInjectorConfiguration_AsicLoopback) isPacketInjectorConfiguration_LoopbackMode() {}

type PmdLoopbackConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PmdLoopbackConfiguration) Reset() {
	*x = PmdLoopbackConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmdLoopbackConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmdLoopbackConfiguration) ProtoMessage() {}

func (x *PmdLoopbackConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmdLoopbackConfiguration.ProtoReflect.Descriptor instead.
func (*PmdLoopbackConfiguration) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{7}
}

type AsicLoopbackConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AsicLoopbackConfiguration) Reset() {
	*x = AsicLoopbackConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsicLoopbackConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsicLoopbackConfiguration) ProtoMessage() {}

func (x *AsicLoopbackConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsicLoopbackConfiguration.ProtoReflect.Descriptor instead.
func (*AsicLoopbackConfiguration) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{8}
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{9}
}

func (x *GetRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*QualificationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{10}
}

func (x *GetResponse) GetResults() map[string]*QualificationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type QualificationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InterfaceName                   string                 `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	State                           QualificationState     `protobuf:"varint,3,opt,name=state,proto3,enum=gnoi.packet_link_qualification.QualificationState" json:"state,omitempty"`
	PacketsSent                     uint64                 `protobuf:"varint,4,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	PacketsReceived                 uint64                 `protobuf:"varint,5,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	PacketsError                    uint64                 `protobuf:"varint,6,opt,name=packets_error,json=packetsError,proto3" json:"packets_error,omitempty"`
	PacketsDropped                  uint64                 `protobuf:"varint,7,opt,name=packets_dropped,json=packetsDropped,proto3" json:"packets_dropped,omitempty"`
	StartTime                       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ExpectedRateBytesPerSecond      uint64                 `protobuf:"varint,10,opt,name=expected_rate_bytes_per_second,json=expectedRateBytesPerSecond,proto3" json:"expected_rate_bytes_per_second,omitempty"`
	QualificationRateBytesPerSecond uint64                 `protobuf:"varint,11,opt,name=qualification_rate_bytes_per_second,json=qualificationRateBytesPerSecond,proto3" json:"qualification_rate_bytes_per_second,omitempty"`
	Status                          *status.Status         `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *QualificationResult) Reset() {
	*x = QualificationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualificationResult) ProtoMessage() {}

func (x *QualificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualificationResult.ProtoReflect.Descriptor instead.
func (*QualificationResult) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{11}
}

func (x *QualificationResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QualificationResult) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *QualificationResult) GetState() QualificationState {
	if x != nil {
		return x.State
	}
	return QualificationState_QUALIFICATION_STATE_UNSPECIFIED
}

func (x *QualificationResult) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *QualificationResult) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *QualificationResult) GetPacketsError() uint64 {
	if x != nil {
		return x.PacketsError
	}
	return 0
}

func (x *QualificationResult) GetPacketsDropped() uint64 {
	if x != nil {
		return x.PacketsDropped
	}
	return 0
}

func (x *QualificationResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QualificationResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QualificationResult) GetExpectedRateBytesPerSecond() uint64 {
	if x != nil {
		return x.ExpectedRateBytesPerSecond
	}
	return 0
}

func (x *QualificationResult) GetQualificationRateBytesPerSecond() uint64 {
	if x != nil {
		return x.QualificationRateBytesPerSecond
	}
	return 0
}

func (x *QualificationResult) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*status.Status `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteResponse) GetResults() map[string]*status.Status {
	if x != nil {
		return x.Results
	}
	return nil
}

type CapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CapabilitiesRequest) Reset() {
	*x = CapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesRequest) ProtoMessage() {}

func (x *CapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*CapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{14}
}

type CapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                             *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	NtpSynced                        bool                   `protobuf:"varint,2,opt,name=ntp_synced,json=ntpSynced,proto3" json:"ntp_synced,omitempty"`
	Generator                        *GeneratorCapabilities `protobuf:"bytes,3,opt,name=generator,proto3" json:"generator,omitempty"`
	Reflector                        *ReflectorCapabilities `protobuf:"bytes,4,opt,name=reflector,proto3" json:"reflector,omitempty"`
	MaxHistoricalResultsPerInterface uint64                 `protobuf:"varint,5,opt,name=max_historical_results_per_interface,json=maxHistoricalResultsPerInterface,proto3" json:"max_historical_results_per_interface,omitempty"`
}

func (x *CapabilitiesResponse) Reset() {
	*x = CapabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesResponse) ProtoMessage() {}

func (x *CapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*CapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{15}
}

func (x *CapabilitiesResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CapabilitiesResponse) GetNtpSynced() bool {
	if x != nil {
		return x.NtpSynced
	}
	return false
}

func (x *CapabilitiesResponse) GetGenerator() *GeneratorCapabilities {
	if x != nil {
		return x.Generator
	}
	return nil
}

func (x *CapabilitiesResponse) GetReflector() *ReflectorCapabilities {
	if x != nil {
		return x.Reflector
	}
	return nil
}

func (x *CapabilitiesResponse) GetMaxHistoricalResultsPerInterface() uint64 {
	if x != nil {
		return x.MaxHistoricalResultsPerInterface
	}
	return 0
}

type PacketGeneratorCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxBps              uint64               `protobuf:"varint,1,opt,name=max_bps,json=maxBps,proto3" json:"max_bps,omitempty"`
	MaxPps              uint64               `protobuf:"varint,2,opt,name=max_pps,json=maxPps,proto3" json:"max_pps,omitempty"`
	MinMtu              uint32               `protobuf:"varint,3,opt,name=min_mtu,json=minMtu,proto3" json:"min_mtu,omitempty"`
	MaxMtu              uint32               `protobuf:"varint,4,opt,name=max_mtu,json=maxMtu,proto3" json:"max_mtu,omitempty"`
	MinSetupDuration    *durationpb.Duration `protobuf:"bytes,5,opt,name=min_setup_duration,json=minSetupDuration,proto3" json:"min_setup_duration,omitempty"`
	MinTeardownDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=min_teardown_duration,json=minTeardownDuration,proto3" json:"min_teardown_duration,omitempty"`
	MinSampleInterval   *durationpb.Duration `protobuf:"bytes,7,opt,name=min_sample_interval,json=minSampleInterval,proto3" json:"min_sample_interval,omitempty"`
	SupportedInterfaces []string             `protobuf:"bytes,8,rep,name=supported_interfaces,json=supportedInterfaces,proto3" json:"supported_interfaces,omitempty"`
}

func (x *PacketGeneratorCapabilities) Reset() {
	*x = PacketGeneratorCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketGeneratorCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketGeneratorCapabilities) ProtoMessage() {}

func (x *PacketGeneratorCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketGeneratorCapabilities.ProtoReflect.Descriptor instead.
func (*PacketGeneratorCapabilities) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{16}
}

func (x *PacketGeneratorCapabilities) GetMaxBps() uint64 {
	if x != nil {
		return x.MaxBps
	}
	return 0
}

func (x *PacketGeneratorCapabilities) GetMaxPps() uint64 {
	if x != nil {
		return x.MaxPps
	}
	return 0
}

func (x *PacketGeneratorCapabilities) GetMinMtu() uint32 {
	if x != nil {
		return x.MinMtu
	}
	return 0
}

func (x *PacketGeneratorCapabilities) GetMaxMtu() uint32 {
	if x != nil {
		return x.MaxMtu
	}
	return 0
}

func (x *PacketGeneratorCapabilities) GetMinSetupDuration() *durationpb.Duration {
	if x != nil {
		return x.MinSetupDuration
	}
	return nil
}

func (x *PacketGeneratorCapabilities) GetMinTeardownDuration() *durationpb.Duration {
	if x != nil {
		return x.MinTeardownDuration
	}
	return nil
}

func (x *PacketGeneratorCapabilities) GetMinSampleInterval() *durationpb.Duration {
	if x != nil {
		return x.MinSampleInterval
	}
	return nil
}

func (x *PacketGeneratorCapabilities) GetSupportedInterfaces() []string {
	if x != nil {
		return x.SupportedInterfaces
	}
	return nil
}

type PacketInjectorCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinMtu              uint32                       `protobuf:"varint,1,opt,name=min_mtu,json=minMtu,proto3" json:"min_mtu,omitempty"`
	MaxMtu              uint32                       `protobuf:"varint,2,opt,name=max_mtu,json=maxMtu,proto3" json:"max_mtu,omitempty"`
	MinInjectedPackets  uint32                       `protobuf:"varint,3,opt,name=min_injected_packets,json=minInjectedPackets,proto3" json:"min_injected_packets,omitempty"`
	MaxInjectedPackets  uint32                       `protobuf:"varint,4,opt,name=max_injected_packets,json=maxInjectedPackets,proto3" json:"max_injected_packets,omitempty"`
	MinSetupDuration    *durationpb.Duration         `protobuf:"bytes,5,opt,name=min_setup_duration,json=minSetupDuration,proto3" json:"min_setup_duration,omitempty"`
	MinTeardownDuration *durationpb.Duration         `protobuf:"bytes,6,opt,name=min_teardown_duration,json=minTeardownDuration,proto3" json:"min_teardown_duration,omitempty"`
	MinSampleInterval   *durationpb.Duration         `protobuf:"bytes,7,opt,name=min_sample_interval,json=minSampleInterval,proto3" json:"min_sample_interval,omitempty"`
	LoopbackModes       []PacketInjectorLoopbackMode `protobuf:"varint,8,rep,packed,name=loopback_modes,json=loopbackModes,proto3,enum=gnoi.packet_link_qualification.PacketInjectorLoopbackMode" json:"loopback_modes,omitempty"`
	SupportedInterfaces []string                     `protobuf:"bytes,9,rep,name=supported_interfaces,json=supportedInterfaces,proto3" json:"supported_interfaces,omitempty"`
}

func (x *PacketInjectorCapabilities) Reset() {
	*x = PacketInjectorCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketInjectorCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketInjectorCapabilities) ProtoMessage() {}

func (x *PacketInjectorCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketInjectorCapabilities.ProtoReflect.Descriptor instead.
func (*PacketInjectorCapabilities) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{17}
}

func (x *PacketInjectorCapabilities) GetMinMtu() uint32 {
	if x != nil {
		return x.MinMtu
	}
	return 0
}

func (x *PacketInjectorCapabilities) GetMaxMtu() uint32 {
	if x != nil {
		return x.MaxMtu
	}
	return 0
}

func (x *PacketInjectorCapabilities) GetMinInjectedPackets() uint32 {
	if x != nil {
		return x.MinInjectedPackets
	}
	return 0
}

func (x *PacketInjectorCapabilities) GetMaxInjectedPackets() uint32 {
	if x != nil {
		return x.MaxInjectedPackets
	}
	return 0
}

func (x *PacketInjectorCapabilities) GetMinSetupDuration() *durationpb.Duration {
	if x != nil {
		return x.MinSetupDuration
	}
	return nil
}

func (x *PacketInjectorCapabilities) GetMinTeardownDuration() *durationpb.Duration {
	if x != nil {
		return x.MinTeardownDuration
	}
	return nil
}

func (x *PacketInjectorCapabilities) GetMinSampleInterval() *durationpb.Duration {
	if x != nil {
		return x.MinSampleInterval
	}
	return nil
}

func (x *PacketInjectorCapabilities) GetLoopbackModes() []PacketInjectorLoopbackMode {
	if x != nil {
		return x.LoopbackModes
	}
	return nil
}

func (x *PacketInjectorCapabilities) GetSupportedInterfaces() []string {
	if x != nil {
		return x.SupportedInterfaces
	}
	return nil
}

type GeneratorCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketGenerator *PacketGeneratorCapabilities `protobuf:"bytes,1,opt,name=packet_generator,json=packetGenerator,proto3" json:"packet_generator,omitempty"`
	PacketInjector  *PacketInjectorCapabilities  `protobuf:"bytes,2,opt,name=packet_injector,json=packetInjector,proto3" json:"packet_injector,omitempty"`
}

func (x *GeneratorCapabilities) Reset() {
	*x = GeneratorCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratorCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratorCapabilities) ProtoMessage() {}

func (x *GeneratorCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratorCapabilities.ProtoReflect.Descriptor instead.
func (*GeneratorCapabilities) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{18}
}

func (x *GeneratorCapabilities) GetPacketGenerator() *PacketGeneratorCapabilities {
	if x != nil {
		return x.PacketGenerator
	}
	return nil
}

func (x *GeneratorCapabilities) GetPacketInjector() *PacketInjectorCapabilities {
	if x != nil {
		return x.PacketInjector
	}
	return nil
}

type PmdLoopbackCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinSetupDuration    *durationpb.Duration `protobuf:"bytes,1,opt,name=min_setup_duration,json=minSetupDuration,proto3" json:"min_setup_duration,omitempty"`
	MinTeardownDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=min_teardown_duration,json=minTeardownDuration,proto3" json:"min_teardown_duration,omitempty"`
	SupportedInterfaces []string             `protobuf:"bytes,3,rep,name=supported_interfaces,json=supportedInterfaces,proto3" json:"supported_interfaces,omitempty"`
}

func (x *PmdLoopbackCapabilities) Reset() {
	*x = PmdLoopbackCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmdLoopbackCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmdLoopbackCapabilities) ProtoMessage() {}

func (x *PmdLoopbackCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmdLoopbackCapabilities.ProtoReflect.Descriptor instead.
func (*PmdLoopbackCapabilities) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{19}
}

func (x *PmdLoopbackCapabilities) GetMinSetupDuration() *durationpb.Duration {
	if x != nil {
		return x.MinSetupDuration
	}
	return nil
}

func (x *PmdLoopbackCapabilities) GetMinTeardownDuration() *durationpb.Duration {
	if x != nil {
		return x.MinTeardownDuration
	}
	return nil
}

func (x *PmdLoopbackCapabilities) GetSupportedInterfaces() []string {
	if x != nil {
		return x.SupportedInterfaces
	}
	return nil
}

type AsicLoopbackCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinSetupDuration    *durationpb.Duration `protobuf:"bytes,1,opt,name=min_setup_duration,json=minSetupDuration,proto3" json:"min_setup_duration,omitempty"`
	MinTeardownDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=min_teardown_duration,json=minTeardownDuration,proto3" json:"min_teardown_duration,omitempty"`
	Fields              []HeaderMatchField   `protobuf:"varint,3,rep,packed,name=fields,proto3,enum=gnoi.packet_link_qualification.HeaderMatchField" json:"fields,omitempty"`
	SupportedInterfaces []string             `protobuf:"bytes,4,rep,name=supported_interfaces,json=supportedInterfaces,proto3" json:"supported_interfaces,omitempty"`
}

func (x *AsicLoopbackCapabilities) Reset() {
	*x = AsicLoopbackCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsicLoopbackCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsicLoopbackCapabilities) ProtoMessage() {}

func (x *AsicLoopbackCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsicLoopbackCapabilities.ProtoReflect.Descriptor instead.
func (*AsicLoopbackCapabilities) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{20}
}

func (x *AsicLoopbackCapabilities) GetMinSetupDuration() *durationpb.Duration {
	if x != nil {
		return x.MinSetupDuration
	}
	return nil
}

func (x *AsicLoopbackCapabilities) GetMinTeardownDuration() *durationpb.Duration {
	if x != nil {
		return x.MinTeardownDuration
	}
	return nil
}

func (x *AsicLoopbackCapabilities) GetFields() []HeaderMatchField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *AsicLoopbackCapabilities) GetSupportedInterfaces() []string {
	if x != nil {
		return x.SupportedInterfaces
	}
	return nil
}

type ReflectorCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PmdLoopback  *PmdLoopbackCapabilities  `protobuf:"bytes,1,opt,name=pmd_loopback,json=pmdLoopback,proto3" json:"pmd_loopback,omitempty"`
	AsicLoopback *AsicLoopbackCapabilities `protobuf:"bytes,2,opt,name=asic_loopback,json=asicLoopback,proto3" json:"asic_loopback,omitempty"`
}

func (x *ReflectorCapabilities) Reset() {
	*x = ReflectorCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectorCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectorCapabilities) ProtoMessage() {}

func (x *ReflectorCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectorCapabilities.ProtoReflect.Descriptor instead.
func (*ReflectorCapabilities) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{21}
}

func (x *ReflectorCapabilities) GetPmdLoopback() *PmdLoopbackCapabilities {
	if x != nil {
		return x.PmdLoopback
	}
	return nil
}

func (x *ReflectorCapabilities) GetAsicLoopback() *AsicLoopbackCapabilities {
	if x != nil {
		return x.AsicLoopback
	}
	return nil
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{22}
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{23}
}

func (x *ListResponse) GetResults() []*ListResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State         QualificationState `protobuf:"varint,2,opt,name=state,proto3,enum=gnoi.packet_link_qualification.QualificationState" json:"state,omitempty"`
	InterfaceName string             `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *ListResult) Reset() {
	*x = ListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResult) ProtoMessage() {}

func (x *ListResult) ProtoReflect() protoreflect.Message {
	mi := &file_packet_link_qualification_packet_link_qualification_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResult.ProtoReflect.Descriptor instead.
func (*ListResult) Descriptor() ([]byte, []int) {
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP(), []int{24}
}

func (x *ListResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListResult) GetState() QualificationState {
	if x != nil {
		return x.State
	}
	return QualificationState_QUALIFICATION_STATE_UNSPECIFIED
}

func (x *ListResult) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

var File_packet_link_qualification_packet_link_qualification_proto protoreflect.FileDescriptor

var file_packet_link_qualification_packet_link_qualification_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x4d, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x4e, 0x54, 0x50, 0x53, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe2, 0x02,
	0x0a, 0x0f, 0x52, 0x50, 0x43, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x11, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8c, 0x05, 0x0a, 0x1a, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x03, 0x6e, 0x74, 0x70, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x54, 0x50, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x74, 0x70, 0x12, 0x43, 0x0a,
	0x03, 0x72, 0x70, 0x63, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x50, 0x43, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x03, 0x72,
	0x70, 0x63, 0x12, 0x69, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x66, 0x0a,
	0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x0c, 0x70, 0x6d, 0x64, 0x5f, 0x6c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6d, 0x64,
	0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x6d, 0x64, 0x4c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x60, 0x0a, 0x0d, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x69,
	0x63, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x73, 0x69, 0x63, 0x4c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x60, 0x0a, 0x1c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x1b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x70, 0x6d, 0x64, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x6d, 0x64, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6d, 0x64, 0x4c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x60, 0x0a, 0x0d, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x73, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x73, 0x69, 0x63,
	0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x50, 0x6d, 0x64,
	0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x73, 0x69, 0x63, 0x4c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x6f, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x04, 0x0a, 0x13, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x1e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x23, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x21, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0xb7, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xdf, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x74, 0x70,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e,
	0x74, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x24, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x20, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x1b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x42, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x50, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x74, 0x75, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4d, 0x74, 0x75, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x4d, 0x74, 0x75, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xab, 0x04, 0x0a,
	0x1a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x4d, 0x74, 0x75, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x74, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4d, 0x74, 0x75, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x69, 0x6e,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x15, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x61, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xe4, 0x01, 0x0a, 0x17, 0x50, 0x6d, 0x64, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x6d, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x18, 0x41, 0x73, 0x69,
	0x63, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x6d, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6e, 0x6f,
	0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6d, 0x64, 0x4c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x6d, 0x64, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x5d, 0x0a, 0x0d, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x69, 0x63, 0x4c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x0c, 0x61, 0x73, 0x69, 0x63, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x22,
	0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x2a, 0xfb, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x52, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x06, 0x2a, 0x9a, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x4a, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x4d, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42,
	0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x49, 0x43, 0x10, 0x02, 0x2a,
	0x87, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c,
	0x32, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x34, 0x10, 0x03, 0x32, 0xa3, 0x04, 0x0a, 0x11, 0x4c, 0x69,
	0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x67, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x67, 0x6e, 0x6f, 0x69,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x2a, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6e,
	0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e,
	0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67,
	0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6e, 0x6f, 0x69, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x47, 0xd2, 0x3e, 0x05, 0x31, 0x2e, 0x32, 0x2e, 0x30, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x67, 0x6e, 0x6f, 0x69, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b,
	0x6c, 0x69, 0x6e, 0x6b, 0x71, 0x75, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_packet_link_qualification_packet_link_qualification_proto_rawDescOnce sync.Once
	file_packet_link_qualification_packet_link_qualification_proto_rawDescData = file_packet_link_qualification_packet_link_qualification_proto_rawDesc
)

func file_packet_link_qualification_packet_link_qualification_proto_rawDescGZIP() []byte {
	file_packet_link_qualification_packet_link_qualification_proto_rawDescOnce.Do(func() {
		file_packet_link_qualification_packet_link_qualification_proto_rawDescData = protoimpl.X.CompressGZIP(file_packet_link_qualification_packet_link_qualification_proto_rawDescData)
	})
	return file_packet_link_qualification_packet_link_qualification_proto_rawDescData
}

var file_packet_link_qualification_packet_link_qualification_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_packet_link_qualification_packet_link_qualification_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_packet_link_qualification_packet_link_qualification_proto_goTypes = []interface{}{
	(QualificationState)(0),              // 0: gnoi.packet_link_qualification.QualificationState
	(PacketInjectorLoopbackMode)(0),      // 1: gnoi.packet_link_qualification.PacketInjectorLoopbackMode
	(HeaderMatchField)(0),                // 2: gnoi.packet_link_qualification.HeaderMatchField
	(*CreateRequest)(nil),                // 3: gnoi.packet_link_qualification.CreateRequest
	(*CreateResponse)(nil),               // 4: gnoi.packet_link_qualification.CreateResponse
	(*NTPSyncedTiming)(nil),              // 5: gnoi.packet_link_qualification.NTPSyncedTiming
	(*RPCSyncedTiming)(nil),              // 6: gnoi.packet_link_qualification.RPCSyncedTiming
	(*QualificationConfiguration)(nil),   // 7: gnoi.packet_link_qualification.QualificationConfiguration
	(*PacketGeneratorConfiguration)(nil), // 8: gnoi.packet_link_qualification.PacketGeneratorConfiguration
	(*PacketInjectorConfiguration)(nil),  // 9: gnoi.packet_link_qualification.PacketInjectorConfiguration
	(*PmdLoopbackConfiguration)(nil),     // 10: gnoi.packet_link_qualification.PmdLoopbackConfiguration
	(*AsicLoopbackConfiguration)(nil),    // 11: gnoi.packet_link_qualification.AsicLoopbackConfiguration
	(*GetRequest)(nil),                   // 12: gnoi.packet_link_qualification.GetRequest
	(*GetResponse)(nil),                  // 13: gnoi.packet_link_qualification.GetResponse
	(*QualificationResult)(nil),          // 14: gnoi.packet_link_qualification.QualificationResult
	(*DeleteRequest)(nil),                // 15: gnoi.packet_link_qualification.DeleteRequest
	(*DeleteResponse)(nil),               // 16: gnoi.packet_link_qualification.DeleteResponse
	(*CapabilitiesRequest)(nil),          // 17: gnoi.packet_link_qualification.CapabilitiesRequest
	(*CapabilitiesResponse)(nil),         // 18: gnoi.packet_link_qualification.CapabilitiesResponse
	(*PacketGeneratorCapabilities)(nil),  // 19: gnoi.packet_link_qualification.PacketGeneratorCapabilities
	(*PacketInjectorCapabilities)(nil),   // 20: gnoi.packet_link_qualification.PacketInjectorCapabilities
	(*GeneratorCapabilities)(nil),        // 21: gnoi.packet_link_qualification.GeneratorCapabilities
	(*PmdLoopbackCapabilities)(nil),      // 22: gnoi.packet_link_qualification.PmdLoopbackCapabilities
	(*AsicLoopbackCapabilities)(nil),     // 23: gnoi.packet_link_qualification.AsicLoopbackCapabilities
	(*ReflectorCapabilities)(nil),        // 24: gnoi.packet_link_qualification.ReflectorCapabilities
	(*ListRequest)(nil),                  // 25: gnoi.packet_link_qualification.ListRequest
	(*ListResponse)(nil),                 // 26: gnoi.packet_link_qualification.ListResponse
	(*ListResult)(nil),                   // 27: gnoi.packet_link_qualification.ListResult
	nil,                                  // 28: gnoi.packet_link_qualification.CreateResponse.StatusEntry
	nil,                                  // 29: gnoi.packet_link_qualification.GetResponse.ResultsEntry
	nil,                                  // 30: gnoi.packet_link_qualification.DeleteResponse.ResultsEntry
	(*timestamppb.Timestamp)(nil),        // 31: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),          // 32: google.protobuf.Duration
	(*status.Status)(nil),                // 33: google.rpc.Status
}
var file_packet_link_qualification_packet_link_qualification_proto_depIdxs = []int32{
	7,  // 0: gnoi.packet_link_qualification.CreateRequest.interfaces:type_name -> gnoi.packet_link_qualification.QualificationConfiguration
	28, // 1: gnoi.packet_link_qualification.CreateResponse.status:type_name -> gnoi.packet_link_qualification.CreateResponse.StatusEntry
	31, // 2: gnoi.packet_link_qualification.NTPSyncedTiming.start_time:type_name -> google.protobuf.Timestamp
	31, // 3: gnoi.packet_link_qualification.NTPSyncedTiming.end_time:type_name -> google.protobuf.Timestamp
	31, // 4: gnoi.packet_link_qualification.NTPSyncedTiming.teardown_time:type_name -> google.protobuf.Timestamp
	32, // 5: gnoi.packet_link_qualification.RPCSyncedTiming.pre_sync_duration:type_name -> google.protobuf.Duration
	32, // 6: gnoi.packet_link_qualification.RPCSyncedTiming.setup_duration:type_name -> google.protobuf.Duration
	32, // 7: gnoi.packet_link_qualification.RPCSyncedTiming.duration:type_name -> google.protobuf.Duration
	32, // 8: gnoi.packet_link_qualification.RPCSyncedTiming.post_sync_duration:type_name -> google.protobuf.Duration
	32, // 9: gnoi.packet_link_qualification.RPCSyncedTiming.teardown_duration:type_name -> google.protobuf.Duration
	5,  // 10: gnoi.packet_link_qualification.QualificationConfiguration.ntp:type_name -> gnoi.packet_link_qualification.NTPSyncedTiming
	6,  // 11: gnoi.packet_link_qualification.QualificationConfiguration.rpc:type_name -> gnoi.packet_link_qualification.RPCSyncedTiming
	8,  // 12: gnoi.packet_link_qualification.QualificationConfiguration.packet_generator:type_name -> gnoi.packet_link_qualification.PacketGeneratorConfiguration
	9,  // 13: gnoi.packet_link_qualification.QualificationConfiguration.packet_injector:type_name -> gnoi.packet_link_qualification.PacketInjectorConfiguration
	10, // 14: gnoi.packet_link_qualification.QualificationConfiguration.pmd_loopback:type_name -> gnoi.packet_link_qualification.PmdLoopbackConfiguration
	11, // 15: gnoi.packet_link_qualification.QualificationConfiguration.asic_loopback:type_name -> gnoi.packet_link_qualification.AsicLoopbackConfiguration
	10, // 16: gnoi.packet_link_qualification.PacketInjectorConfiguration.pmd_loopback:type_name -> gnoi.packet_link_qualification.PmdLoopbackConfiguration
	11, // 17: gnoi.packet_link_qualification.PacketInjectorConfiguration.asic_loopback:type_name -> gnoi.packet_link_qualification.AsicLoopbackConfiguration
	29, // 18: gnoi.packet_link_qualification.GetResponse.results:type_name -> gnoi.packet_link_qualification.GetResponse.ResultsEntry
	0,  // 19: gnoi.packet_link_qualification.QualificationResult.state:type_name -> gnoi.packet_link_qualification.QualificationState
	31, // 20: gnoi.packet_link_qualification.QualificationResult.start_time:type_name -> google.protobuf.Timestamp
	31, // 21: gnoi.packet_link_qualification.QualificationResult.end_time:type_name -> google.protobuf.Timestamp
	33, // 22: gnoi.packet_link_qualification.QualificationResult.status:type_name -> google.rpc.Status
	30, // 23: gnoi.packet_link_qualification.DeleteResponse.results:type_name -> gnoi.packet_link_qualification.DeleteResponse.ResultsEntry
	31, // 24: gnoi.packet_link_qualification.CapabilitiesResponse.time:type_name -> google.protobuf.Timestamp
	21, // 25: gnoi.packet_link_qualification.CapabilitiesResponse.generator:type_name -> gnoi.packet_link_qualification.GeneratorCapabilities
	24, // 26: gnoi.packet_link_qualification.CapabilitiesResponse.reflector:type_name -> gnoi.packet_link_qualification.ReflectorCapabilities
	32, // 27: gnoi.packet_link_qualification.PacketGeneratorCapabilities.min_setup_duration:type_name -> google.protobuf.Duration
	32, // 28: gnoi.packet_link_qualification.PacketGeneratorCapabilities.min_teardown_duration:type_name -> google.protobuf.Duration
	32, // 29: gnoi.packet_link_qualification.PacketGeneratorCapabilities.min_sample_interval:type_name -> google.protobuf.Duration
	32, // 30: gnoi.packet_link_qualification.PacketInjectorCapabilities.min_setup_duration:type_name -> google.protobuf.Duration
	32, // 31: gnoi.packet_link_qualification.PacketInjectorCapabilities.min_teardown_duration:type_name -> google.protobuf.Duration
	32, // 32: gnoi.packet_link_qualification.PacketInjectorCapabilities.min_sample_interval:type_name -> google.protobuf.Duration
	1,  // 33: gnoi.packet_link_qualification.PacketInjectorCapabilities.loopback_modes:type_name -> gnoi.packet_link_qualification.PacketInjectorLoopbackMode
	19, // 34: gnoi.packet_link_qualification.GeneratorCapabilities.packet_generator:type_name -> gnoi.packet_link_qualification.PacketGeneratorCapabilities
	20, // 35: gnoi.packet_link_qualification.GeneratorCapabilities.packet_injector:type_name -> gnoi.packet_link_qualification.PacketInjectorCapabilities
	32, // 36: gnoi.packet_link_qualification.PmdLoopbackCapabilities.min_setup_duration:type_name -> google.protobuf.Duration
	32, // 37: gnoi.packet_link_qualification.PmdLoopbackCapabilities.min_teardown_duration:type_name -> google.protobuf.Duration
	32, // 38: gnoi.packet_link_qualification.AsicLoopbackCapabilities.min_setup_duration:type_name -> google.protobuf.Duration
	32, // 39: gnoi.packet_link_qualification.AsicLoopbackCapabilities.min_teardown_duration:type_name -> google.protobuf.Duration
	2,  // 40: gnoi.packet_link_qualification.AsicLoopbackCapabilities.fields:type_name -> gnoi.packet_link_qualification.HeaderMatchField
	22, // 41: gnoi.packet_link_qualification.ReflectorCapabilities.pmd_loopback:type_name -> gnoi.packet_link_qualification.PmdLoopbackCapabilities
	23, // 42: gnoi.packet_link_qualification.ReflectorCapabilities.asic_loopback:type_name -> gnoi.packet_link_qualification.AsicLoopbackCapabilities
	27, // 43: gnoi.packet_link_qualification.ListResponse.results:type_name -> gnoi.packet_link_qualification.ListResult
	0,  // 44: gnoi.packet_link_qualification.ListResult.state:type_name -> gnoi.packet_link_qualification.QualificationState
	33, // 45: gnoi.packet_link_qualification.CreateResponse.StatusEntry.value:type_name -> google.rpc.Status
	14, // 46: gnoi.packet_link_qualification.GetResponse.ResultsEntry.value:type_name -> gnoi.packet_link_qualification.QualificationResult
	33, // 47: gnoi.packet_link_qualification.DeleteResponse.ResultsEntry.value:type_name -> google.rpc.Status
	3,  // 48: gnoi.packet_link_qualification.LinkQualification.Create:input_type -> gnoi.packet_link_qualification.CreateRequest
	12, // 49: gnoi.packet_link_qualification.LinkQualification.Get:input_type -> gnoi.packet_link_qualification.GetRequest
	17, // 50: gnoi.packet_link_qualification.LinkQualification.Capabilities:input_type -> gnoi.packet_link_qualification.CapabilitiesRequest
	15, // 51: gnoi.packet_link_qualification.LinkQualification.Delete:input_type -> gnoi.packet_link_qualification.DeleteRequest
	25, // 52: gnoi.packet_link_qualification.LinkQualification.List:input_type -> gnoi.packet_link_qualification.ListRequest
	4,  // 53: gnoi.packet_link_qualification.LinkQualification.Create:output_type -> gnoi.packet_link_qualification.CreateResponse
	13, // 54: gnoi.packet_link_qualification.LinkQualification.Get:output_type -> gnoi.packet_link_qualification.GetResponse
	18, // 55: gnoi.packet_link_qualification.LinkQualification.Capabilities:output_type -> gnoi.packet_link_qualification.CapabilitiesResponse
	16, // 56: gnoi.packet_link_qualification.LinkQualification.Delete:output_type -> gnoi.packet_link_qualification.DeleteResponse
	26, // 57: gnoi.packet_link_qualification.LinkQualification.List:output_type -> gnoi.packet_link_qualification.ListResponse
	53, // [53:58] is the sub-list for method output_type
	48, // [48:53] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_packet_link_qualification_packet_link_qualification_proto_init() }
func file_packet_link_qualification_packet_link_qualification_proto_init() {
	if File_packet_link_qualification_packet_link_qualification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NTPSyncedTiming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCSyncedTiming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualificationConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketGeneratorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketInjectorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmdLoopbackConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsicLoopbackConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualificationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketGeneratorCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketInjectorCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratorCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmdLoopbackCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsicLoopbackCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReflectorCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packet_link_qualification_packet_link_qualification_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_packet_link_qualification_packet_link_qualification_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*QualificationConfiguration_Ntp)(nil),
		(*QualificationConfiguration_Rpc)(nil),
		(*QualificationConfiguration_PacketGenerator)(nil),
		(*QualificationConfiguration_PacketInjector)(nil),
		(*QualificationConfiguration_PmdLoopback)(nil),
		(*QualificationConfiguration_AsicLoopback)(nil),
	}
	file_packet_link_qualification_packet_link_qualification_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PacketInjectorConfiguration_PmdLoopback)(nil),
		(*PacketInjectorConfiguration_AsicLoopback)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packet_link_qualification_packet_link_qualification_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_packet_link_qualification_packet_link_qualification_proto_goTypes,
		DependencyIndexes: file_packet_link_qualification_packet_link_qualification_proto_depIdxs,
		EnumInfos:         file_packet_link_qualification_packet_link_qualification_proto_enumTypes,
		MessageInfos:      file_packet_link_qualification_packet_link_qualification_proto_msgTypes,
	}.Build()
	File_packet_link_qualification_packet_link_qualification_proto = out.File
	file_packet_link_qualification_packet_link_qualification_proto_rawDesc = nil
	file_packet_link_qualification_packet_link_qualification_proto_goTypes = nil
	file_packet_link_qualification_packet_link_qualification_proto_depIdxs = nil
}
