// A generic network operational interface gRPC service to perform packet based
// link qualification operations on a network device.

syntax = "proto3";

package gnoi.packet_link_qualification;

import "github.com/openconfig/gnoi/types/types.proto";
import "google/rpc/status.proto";

// Note: The RPCs defined here are stateless operations and them failing/passing
// should not leave any permanent artifact on the network device (unless there
// is something wrong HW-wise). Note: By "port" we refer to a channelized
// frontpanel or backplane port on a chassis. In OpenConfig YANG models, there
// is a one-to-one relationship between a port as used here and an "interface".
// Therefore, the "types.Path" fields below for ports correspond to
// "/interfaces/interface" in YANG models.

service PacketLinkQual {
  // Packet based link qualification related RPCs.

  // Starts packet based link qualification on a set of interfaces. Each start
  // operation is uniquely identified by an ID supplied by the caller. This ID
  // must be used by other operations (e.g., stop, get results, etc.) to select
  // the test associated with the ID. Caller specifies the minimum wait time
  // before warming up the link, number of packets, and preparation time to warm
  // up the link, and the actual duration of the qualification. It also
  // specifies if the interface under test is used as a near-end/ far-end from
  // the test perspective. On receiving the request, the device performs the
  // setup, and qualifies the link for the supplied test duration. The device
  // keeps the results until the corresponding stop request. Each start response
  // matches with a corresponding unique operation ID. If there is any error
  // starting the qualification, status is populated with canonical error code
  // and message to denote the details.
  rpc StartPacketQualification(StartPacketQualificationRequest)
      returns (StartPacketQualificationResponse) {}

  // Stops packet based link qualification on a set of interfaces. The caller
  // uses the operation ID it previously used when starting the operation to
  // stop it. Note that a qualification operation is considered completed if the
  // device has a record/history of it. Also note that it is OK to receive a
  // stop request for an interface which has completed qualification, as long as
  // the recorded operation ID matches the one specified by the request. Devices
  // should clean up at stop request. Each stop response matches with a
  // corresponding unique operation ID supplied in the request. If there is any
  // error processing the request, status is populated with canonical error
  // code and message to denote the details.
  rpc StopPacketQualification(StopPacketQualificationRequest)
      returns (StopPacketQualificationResponse) {}

  // Gets packet based link qualification results for a set of operation IDs.
  // Note that the results will be incomplete during the operation. The caller
  // uses the operation ID it previously used when starting the operation to
  // query it. The device is expected to keep the results until the
  // corresponding stop request. Each get response matches with a corresponding
  // unique operation ID supplied in the request. If there is any error getting
  // the results, status is populated with canonical error code and message to
  // denote the details.
  rpc GetPacketQualificationResult(GetPacketQualificationResultRequest)
      returns (GetPacketQualificationResultResponse) {}
}

// States of qualification.
enum QualificationState {
  QUALIFICATION_STATE_UNSPECIFIED = 0;
  QUALIFICATION_STATE_IDLE = 1;       // Not set up.
  QUALIFICATION_STATE_READY = 2;      // Set up completed, ready to qualify.
  QUALIFICATION_STATE_RUNNING = 3;    // Qualification underway.
  QUALIFICATION_STATE_COMPLETED = 4;  // Qualification is complete.
  QUALIFICATION_STATE_FAILED = 5;     // Qualification failed for some reasons.
}

message StartPacketQualificationRequest {
  enum QualificationEnd {
    END_UNSPECIFIED = 0;
    // Responsible for generating loopback packets, etc.
    NEAR_END = 1;
    // Responsible for looping back packets only.
    FAR_END = 2;
  }

  message QualificationConfiguration {
    // The ID assigned to the given test. The ID value must be unique among the
    // tests running on this agent.
    string id = 1;

    // Path to the interface corresponding to the port to test.
    .gnoi.types.Path interface = 2;

    // default packet_size is 1500 bytes.
    uint16 packet_size = 1500;

    // The minimum amount of wait time before sending packets on the link. It
    // gives peer additional time to prepare. The default value for this field
    // is 70 seconds.
    int32 minimum_wait_before_preparation_seconds = 3;

    // The total number of packets to send on the link in the preparation phase.
    int64 num_preparation_packets = 4;

    // The amount of time in which the preparation must complete.
    int32 preparation_timeout_seconds = 5;
    
    // The default value for this field is 10 seconds. This is the 
    // time period that the link qualification service should wait 
    // between the two samples of port counters that it reads from the 
    // device - both prior to starting qualification, and right after 
    // qualification. The qualification itself runs for 
    // Qaulification_duration_seconds.
    int32 test_wait_between_sample_seconds = 8;

    // The amount of time the qualification will run before we recapture the
    // packets and check if there was any drop.
    int32 qualification_duration_seconds = 6;
    
    // The default value of this field is 10 seconds. During this period, the 
    // link qualification state machine must undo things it setup during start 
    // of the test and ensure all packets circulating as part of the test have
    // been dropped.
    int32 minimum_wait_post_qualification_seconds = 9;

    // Qualification end.
    QualificationEnd qualification_end = 7;
    
  }

  // Per interface start configuration request.
  repeated QualificationConfiguration configs = 1;
}

message StartPacketQualificationResponse {
  // Per interface start response.
  message StartResponse {
    // The same ID given in the start request.
    string id = 1;
    // Status of the operation. In case of failures, canonical error code and
    // message will show the details.
    google.rpc.Status status = 2;
  }

  repeated StartResponse responses = 1;
}

message StopPacketQualificationRequest {
  // The IDs assigned to the given qualification operations.
  repeated string ids = 1;
}

message StopPacketQualificationResponse {
  // Per interface stop response.
  message StopResponse {
    // The same ID given in the stop request.
    string id = 1;
    // Status of the operation. In case of failures, canonical error code and
    // message will show the details.
    google.rpc.Status status = 2;
  }

  repeated StopResponse responses = 1;
}

message GetPacketQualificationResultRequest {
  // The IDs assigned to the given qualification operations.
  repeated string ids = 1;
}

message QualificationResults {
  // The state the test was in when the results were snapshotted.
  QualificationState current_state = 1;

  // The total number of test packets sent.
  int64 num_sent_packets = 2;

  // The number of packets that were recaptured.
  int64 num_ok_packets = 3;

  // The number of packets transmitted, but which experienced corruption.
  int64 num_corrupt_packets = 4;

  // The test start time since epoch.
  int64 start_time_nanos = 5;

  // The test end time, or the current snapshot time since epoch.
  int64 end_time_nanos = 6;

  // The bitrate before the qualification is started. Bytes per second.
  int64 initial_rate_bytes_per_second = 7;

  // The bitrate after the qualification is completed. Bytes per second.
  int64 final_rate_bytes_per_second = 8;

  // The number of packets that were dropped by the MMU for the port under test.
  int64 num_packets_dropped_by_mmu = 9;

  // Error message if something failed during qualification.
  string error_message = 10;
}

message GetPacketQualificationResultResponse {
  // Per interface qualification response.
  message GetResponse {
    // The same ID given in the get request.
    string id = 1;
    // Status of the operation. In case of failures, canonical error code and
    // message will show the details.
    google.rpc.Status status = 2;
    // Qualification results.
    QualificationResults results = 3;
  }

  repeated GetResponse responses = 1;
}
