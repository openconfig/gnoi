// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: github.com/openconfig/gnoi/software_bundle/software_bundle.proto

package software_bundle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SoftwareBundle_ListSoftwareBundles_FullMethodName     = "/gnoi.software_bundle.SoftwareBundle/ListSoftwareBundles"
	SoftwareBundle_FinalizeSoftwareBundles_FullMethodName = "/gnoi.software_bundle.SoftwareBundle/FinalizeSoftwareBundles"
	SoftwareBundle_InstallSoftwareBundle_FullMethodName   = "/gnoi.software_bundle.SoftwareBundle/InstallSoftwareBundle"
	SoftwareBundle_UninstallSoftwareBundle_FullMethodName = "/gnoi.software_bundle.SoftwareBundle/UninstallSoftwareBundle"
)

// SoftwareBundleClient is the client API for SoftwareBundle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoftwareBundleClient interface {
	ListSoftwareBundles(ctx context.Context, in *ListSoftwareBundlesRequest, opts ...grpc.CallOption) (*ListSoftwareBundlesResponse, error)
	FinalizeSoftwareBundles(ctx context.Context, in *FinalizeSoftwareBundlesRequest, opts ...grpc.CallOption) (*FinalizeSoftwareBundlesResponse, error)
	InstallSoftwareBundle(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InstallSoftwareBundleRequest, InstallSoftwareBundleResponse], error)
	UninstallSoftwareBundle(ctx context.Context, in *UninstallSoftwareBundleRequest, opts ...grpc.CallOption) (*UninstallSoftwareBundleResponse, error)
}

type softwareBundleClient struct {
	cc grpc.ClientConnInterface
}

func NewSoftwareBundleClient(cc grpc.ClientConnInterface) SoftwareBundleClient {
	return &softwareBundleClient{cc}
}

func (c *softwareBundleClient) ListSoftwareBundles(ctx context.Context, in *ListSoftwareBundlesRequest, opts ...grpc.CallOption) (*ListSoftwareBundlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSoftwareBundlesResponse)
	err := c.cc.Invoke(ctx, SoftwareBundle_ListSoftwareBundles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareBundleClient) FinalizeSoftwareBundles(ctx context.Context, in *FinalizeSoftwareBundlesRequest, opts ...grpc.CallOption) (*FinalizeSoftwareBundlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeSoftwareBundlesResponse)
	err := c.cc.Invoke(ctx, SoftwareBundle_FinalizeSoftwareBundles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareBundleClient) InstallSoftwareBundle(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InstallSoftwareBundleRequest, InstallSoftwareBundleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SoftwareBundle_ServiceDesc.Streams[0], SoftwareBundle_InstallSoftwareBundle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InstallSoftwareBundleRequest, InstallSoftwareBundleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SoftwareBundle_InstallSoftwareBundleClient = grpc.BidiStreamingClient[InstallSoftwareBundleRequest, InstallSoftwareBundleResponse]

func (c *softwareBundleClient) UninstallSoftwareBundle(ctx context.Context, in *UninstallSoftwareBundleRequest, opts ...grpc.CallOption) (*UninstallSoftwareBundleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninstallSoftwareBundleResponse)
	err := c.cc.Invoke(ctx, SoftwareBundle_UninstallSoftwareBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoftwareBundleServer is the server API for SoftwareBundle service.
// All implementations should embed UnimplementedSoftwareBundleServer
// for forward compatibility.
type SoftwareBundleServer interface {
	ListSoftwareBundles(context.Context, *ListSoftwareBundlesRequest) (*ListSoftwareBundlesResponse, error)
	FinalizeSoftwareBundles(context.Context, *FinalizeSoftwareBundlesRequest) (*FinalizeSoftwareBundlesResponse, error)
	InstallSoftwareBundle(grpc.BidiStreamingServer[InstallSoftwareBundleRequest, InstallSoftwareBundleResponse]) error
	UninstallSoftwareBundle(context.Context, *UninstallSoftwareBundleRequest) (*UninstallSoftwareBundleResponse, error)
}

// UnimplementedSoftwareBundleServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSoftwareBundleServer struct{}

func (UnimplementedSoftwareBundleServer) ListSoftwareBundles(context.Context, *ListSoftwareBundlesRequest) (*ListSoftwareBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSoftwareBundles not implemented")
}
func (UnimplementedSoftwareBundleServer) FinalizeSoftwareBundles(context.Context, *FinalizeSoftwareBundlesRequest) (*FinalizeSoftwareBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeSoftwareBundles not implemented")
}
func (UnimplementedSoftwareBundleServer) InstallSoftwareBundle(grpc.BidiStreamingServer[InstallSoftwareBundleRequest, InstallSoftwareBundleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InstallSoftwareBundle not implemented")
}
func (UnimplementedSoftwareBundleServer) UninstallSoftwareBundle(context.Context, *UninstallSoftwareBundleRequest) (*UninstallSoftwareBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallSoftwareBundle not implemented")
}
func (UnimplementedSoftwareBundleServer) testEmbeddedByValue() {}

// UnsafeSoftwareBundleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoftwareBundleServer will
// result in compilation errors.
type UnsafeSoftwareBundleServer interface {
	mustEmbedUnimplementedSoftwareBundleServer()
}

func RegisterSoftwareBundleServer(s grpc.ServiceRegistrar, srv SoftwareBundleServer) {
	// If the following call pancis, it indicates UnimplementedSoftwareBundleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SoftwareBundle_ServiceDesc, srv)
}

func _SoftwareBundle_ListSoftwareBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSoftwareBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareBundleServer).ListSoftwareBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftwareBundle_ListSoftwareBundles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareBundleServer).ListSoftwareBundles(ctx, req.(*ListSoftwareBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareBundle_FinalizeSoftwareBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeSoftwareBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareBundleServer).FinalizeSoftwareBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftwareBundle_FinalizeSoftwareBundles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareBundleServer).FinalizeSoftwareBundles(ctx, req.(*FinalizeSoftwareBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareBundle_InstallSoftwareBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SoftwareBundleServer).InstallSoftwareBundle(&grpc.GenericServerStream[InstallSoftwareBundleRequest, InstallSoftwareBundleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SoftwareBundle_InstallSoftwareBundleServer = grpc.BidiStreamingServer[InstallSoftwareBundleRequest, InstallSoftwareBundleResponse]

func _SoftwareBundle_UninstallSoftwareBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallSoftwareBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareBundleServer).UninstallSoftwareBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftwareBundle_UninstallSoftwareBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareBundleServer).UninstallSoftwareBundle(ctx, req.(*UninstallSoftwareBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoftwareBundle_ServiceDesc is the grpc.ServiceDesc for SoftwareBundle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoftwareBundle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.software_bundle.SoftwareBundle",
	HandlerType: (*SoftwareBundleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSoftwareBundles",
			Handler:    _SoftwareBundle_ListSoftwareBundles_Handler,
		},
		{
			MethodName: "FinalizeSoftwareBundles",
			Handler:    _SoftwareBundle_FinalizeSoftwareBundles_Handler,
		},
		{
			MethodName: "UninstallSoftwareBundle",
			Handler:    _SoftwareBundle_UninstallSoftwareBundle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallSoftwareBundle",
			Handler:       _SoftwareBundle_InstallSoftwareBundle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnoi/software_bundle/software_bundle.proto",
}
