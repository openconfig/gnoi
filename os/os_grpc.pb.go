// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: github.com/openconfig/gnoi/os/os.proto

package os

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OS_Install_FullMethodName  = "/gnoi.os.OS/Install"
	OS_Activate_FullMethodName = "/gnoi.os.OS/Activate"
	OS_Verify_FullMethodName   = "/gnoi.os.OS/Verify"
)

// OSClient is the client API for OS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OSClient interface {
	Install(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InstallRequest, InstallResponse], error)
	Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*ActivateResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type oSClient struct {
	cc grpc.ClientConnInterface
}

func NewOSClient(cc grpc.ClientConnInterface) OSClient {
	return &oSClient{cc}
}

func (c *oSClient) Install(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InstallRequest, InstallResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OS_ServiceDesc.Streams[0], OS_Install_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InstallRequest, InstallResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OS_InstallClient = grpc.BidiStreamingClient[InstallRequest, InstallResponse]

func (c *oSClient) Activate(ctx context.Context, in *ActivateRequest, opts ...grpc.CallOption) (*ActivateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateResponse)
	err := c.cc.Invoke(ctx, OS_Activate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, OS_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSServer is the server API for OS service.
// All implementations should embed UnimplementedOSServer
// for forward compatibility.
type OSServer interface {
	Install(grpc.BidiStreamingServer[InstallRequest, InstallResponse]) error
	Activate(context.Context, *ActivateRequest) (*ActivateResponse, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
}

// UnimplementedOSServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOSServer struct{}

func (UnimplementedOSServer) Install(grpc.BidiStreamingServer[InstallRequest, InstallResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedOSServer) Activate(context.Context, *ActivateRequest) (*ActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedOSServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedOSServer) testEmbeddedByValue() {}

// UnsafeOSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSServer will
// result in compilation errors.
type UnsafeOSServer interface {
	mustEmbedUnimplementedOSServer()
}

func RegisterOSServer(s grpc.ServiceRegistrar, srv OSServer) {
	// If the following call pancis, it indicates UnimplementedOSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OS_ServiceDesc, srv)
}

func _OS_Install_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OSServer).Install(&grpc.GenericServerStream[InstallRequest, InstallResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OS_InstallServer = grpc.BidiStreamingServer[InstallRequest, InstallResponse]

func _OS_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OS_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).Activate(ctx, req.(*ActivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OS_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OS_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OS_ServiceDesc is the grpc.ServiceDesc for OS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.os.OS",
	HandlerType: (*OSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _OS_Activate_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _OS_Verify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Install",
			Handler:       _OS_Install_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/openconfig/gnoi/os/os.proto",
}
